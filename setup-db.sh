#!/usr/bin/env bash

docker exec -i --user postgres my-webapp-db-1 createdb mydb

docker exec -i --user postgres my-webapp-db-1 psql mydb -a <<__END
create user my_role password 'lacinia';
grant create on schema public to my_role;
__END

docker exec -i my-webapp-db-1 psql -Umy_role mydb -a <<__END
drop table if exists user_to_token;
drop table if exists users;
drop table if exists auth;
drop table if exists posts;
drop table if exists comments;

CREATE OR REPLACE FUNCTION maintain_updated_at()
RETURNS TRIGGER AS \$\$
BEGIN
   NEW.updated_at = now();
   RETURN NEW;
END;
\$\$ language 'plpgsql';

create table auths (
  auth_id int generated by default as identity primary key,
  loggedin boolean not null,
  created_at timestamp not null default current_timestamp,
  updated_at timestamp not null default current_timestamp);

create trigger auths_updated_at before update
on auths for each row execute procedure
maintain_updated_at();

create table users (
  user_id int generated by default as identity primary key,
  name text not null,
  username text not null,
  password text not null,
  accesslevel text not null,
  email text not null,
  loggedin boolean not null,
  auth int references auths(auth_id),
  created_at timestamp not null default current_timestamp,
  updated_at timestamp not null default current_timestamp);

create trigger user_updated_at before update
on users for each row execute procedure
maintain_updated_at();

create table posts (
  post_id int generated by default as identity primary key,
  title text not null,
  body text not null,
  user_id int references users(user_id),
  created_at timestamp not null default current_timestamp,
  updated_at timestamp not null default current_timestamp);

create trigger posts_updated_at before update
on auths for each row execute procedure
maintain_updated_at();

create table comments (
  comment_id int generated by default as identity primary key,
  body text not null,
  post int references posts(post_id),
  created_at timestamp not null default current_timestamp,
  updated_at timestamp not null default current_timestamp);

create trigger comments_updated_at before update
on auths for each row execute procedure
maintain_updated_at();

insert into auths (auth_id, loggedin) values
  (0, FALSE),
  (1, FALSE),
  (2, FALSE);

alter table auths alter column auth_id restart with 10;

insert into users (user_id, name, username, accesslevel, password, email, loggedin, auth) values
  (0, 'my name', 'orgenborgen', 'regular', 'abc', 'name@something.com', FALSE, 0),
  (1, 'louise theroux', 'documentarydude', 'regular', 'abc', 'louis@theroux.com', FALSE, 1),
  (2, 'another one', 'evenmore!', 'regular', 'abc', 'another@one.com', FALSE, 2);

alter table users alter column user_id restart with 10;

insert into posts (post_id, title, body, user_id) values
  (0, 'yes', 'hi there', 0),
  (1, 'this', 'whats up', 1),
  (2, 'works', 'whats goin on', 2);

alter table posts alter column post_id restart with 10;

insert into comments (comment_id, body, post) values
  (0, 'says a lot of things', 0),
  (1, 'a feud!', 0);

alter table comments alter column comment_id restart with 10;

__END
