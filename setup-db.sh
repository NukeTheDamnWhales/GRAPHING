#!/usr/bin/env bash
docker exec -i --user postgres graphing_db_1 createdb mydb

docker exec -i --user postgres graphing_db_1 psql mydb -a <<__END
create user my_role password 'lacinia';
grant create on schema public to my_role;
__END

docker exec -i graphing_db_1 psql -Umy_role mydb -a <<__END
drop table if exists user_to_token;
drop table if exists members;
drop table if exists users;
drop table if exists auths;
drop table if exists posts;
drop table if exists comments;
drop table if exists boards;

CREATE OR REPLACE FUNCTION maintain_updated_at()
RETURNS TRIGGER AS \$\$
BEGIN
   NEW.updated_at = now();
   RETURN NEW;
END;
\$\$ language 'plpgsql';

create table users (
  user_id int generated by default as identity primary key,
  name text not null,
  username text not null,
  password text not null,
  accesslevel text not null,
  created_at timestamp not null default current_timestamp,
  updated_at timestamp not null default current_timestamp,
  CONSTRAINT username_unique UNIQUE (username));

create trigger user_updated_at before update
on users for each row execute procedure
maintain_updated_at();

create table boards (
  board_id int generated by default as identity primary key,
  title text not null,
  owner int references users(user_id) on delete cascade,
  created_at timestamp not null default current_timestamp,
  updated_at timestamp not null default current_timestamp);

create trigger board_updated_at before update
on boards for each row execute procedure
maintain_updated_at();


create table members (
  member_id int generated by default as identity primary key,
  board_id int references boards(board_id) on delete cascade,
  user_id int references users(user_id) on delete cascade,
  created_at timestamp not null default current_timestamp,
  updated_at timestamp not null default current_timestamp);

create trigger member_updated_at before update
on users for each row execute procedure
maintain_updated_at();

create table posts (
  post_id int generated by default as identity primary key,
  title text not null,
  body text not null,
  user_id int references users(user_id),
  board_id int references boards(board_id),
  created_at timestamp not null default current_timestamp,
  updated_at timestamp not null default current_timestamp);

create trigger posts_updated_at before update
on posts for each row execute procedure
maintain_updated_at();

create table comments (
  comment_id int generated by default as identity primary key,
  body text not null,
  post_id int references posts(post_id) on delete cascade,
  user_id int references users(user_id) on delete cascade,
  parent_id int references comments(comment_id) on delete cascade,
  created_at timestamp not null default current_timestamp,
  updated_at timestamp not null default current_timestamp);

create trigger comments_updated_at before update
on comments for each row execute procedure
maintain_updated_at();


insert into users (user_id, name, username, accesslevel, password) values
  (0, 'pickle master', 'picklemaster', 'admin', 'Supergoodpassword!1'),
  (1, 'pickle disciple', 'pickledisciple', 'regular', 'Supergoodpassword!1'),
  (2, 'picklepal', 'picklepoisoner!', 'regular', 'Supergoodpassword!1'),
  (3, 'picklepal', 'GirkenDude', 'regular', 'Supergoodpassword!1'),
  (4, 'picklepal', 'MerryPickles', 'regular', 'Supergoodpassword!1'),
  (5, 'picklepal', 'MerryPickles2', 'regular', 'Supergoodpassword!1'),
  (6, 'picklepal', 'OurLordAndSaviourPickle', 'regular', 'Supergoodpassword!1');

alter table users alter column user_id restart with 10;

insert into boards (board_id, owner, title) values
  (0, 0, 'recipes'),
  (1, 0, 'pickling tips and tricks'),
  (2, 0, 'super special pickle discussion'),
  (3, 1, 'General Pickle Discussion');

alter table boards alter column board_id restart with 10;

insert into members (member_id, board_id, user_id) values
  (0, 0, 0),
  (1, 0, 1),
  (2, 1, 0),
  (3, 2, 0),
  (4, 2, 1),
  (5, 2, 2);

alter table members alter column member_id restart with 3;

insert into posts (post_id, title, body, user_id, board_id) values
  (0, 'testing pickle', 'is up', 1, 0),
  (1, 'woohoo!', 'whats up', 1, 0),
  (2, 'works', 'whats goin on', 2, 0),
  (3, 'Top Secret Pickle discussion', 'flag{AuthIsReallyHard,LetsJustHideIt}: We have recently updated our message system! SQL was a little complicated for me and as we all know my true love is pickling, not database solutions. I have therefore migrated all of messages over to a brilliant stateful queue! It may be a little slower but Im sure will serve us well in our collective study of the pickle. I also configured it to send some logs to non-existent users to help with quick troubleshooting. Our superusers can access these by creating a user called logger suffixed with the current minute encoded in our Super Special Pickle Cypher', 0, 2),
  (4, 'Why is it all so broken', 'I noticed my messages, sometimes dont send until Ive sent a couple, whats going on there. I have lots of pertinent poignant pickle points to ponder with pals', 1, 3),
  (5, 'yes', 'This simple refrigerator pickle brine is made with water, vinegar, sugar, sea salt, garlic cloves, and fresh dill. You can adjust the ratios and add other ingredients such as coriander seeds, peppercorns, or bay leaves to suit your taste.To cut cucumber spears, simply cut the cuke in half lengthwise and then cut the halves into quarters. If youre happy with the spear size, stop there. If youd like them smaller, cut the spears in half lengthwise again.Of course, this refrigerator dill pickle recipe would also work well with cucumber slices instead of spears.', 0, 0),
  (6, 'please help', 'Instrcautiun uncleeeear pckle st uck in eyee (web)SOCKET', 3, 0)

alter table posts alter column post_id restart with 10;


__END
