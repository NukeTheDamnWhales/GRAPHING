(undo-tree-save-format-version . 1)
"06ac27801817c9e83f93fd0b0f69cacc9e99e9e8"
[nil nil nil nil (25759 10900 305182 0) 0 nil]
([nil nil ((1 . 3) (t 25759 10869 115461 322000)) nil (25759 10900 305181 0) 0 nil])
([nil nil ((2 . 5)) nil (25759 10900 305180 0) 0 nil])
([nil nil ((#("o" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -3) (undo-tree-id9 . -1) (#("b" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -4) (undo-tree-id10 . -1) 5) nil (25759 10900 305179 0) 0 nil])
([nil nil ((3 . 10)) nil (25759 10900 305177 0) 0 nil])
([nil nil ((10 . 12)) nil (25759 10900 305176 0) 0 nil])
([nil nil ((12 . 13)) nil (25759 10900 305176 0) 0 nil])
([nil nil ((#("P" 0 1 (ws-butler-chg chg fontified t)) . -12) (undo-tree-id8 . -1) 13) nil (25759 10900 305175 0) 0 nil])
([nil nil ((12 . 14)) nil (25759 10900 305174 0) 0 nil])
([nil nil ((13 . 18)) nil (25759 10900 305173 0) 0 nil])
([nil nil ((#("u" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -14) (undo-tree-id4 . -1) (#("s" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -15) (undo-tree-id5 . -1) (#("e" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -16) (undo-tree-id6 . -1) (#("r" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -17) (undo-tree-id7 . -1) 18) nil (25759 10900 305172 0) 0 nil])
([nil nil ((14 . 15)) nil (25759 10900 305169 0) 0 nil])
([nil nil ((#("u" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -14) (undo-tree-id3 . -1) 15) nil (25759 10900 305163 0) 0 nil])
([nil nil ((14 . 15)) nil (25759 10900 305161 0) 0 nil])
([nil nil ((#("U" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -14) (undo-tree-id2 . -1) 15) nil (25759 10900 305160 0) 0 nil])
([nil nil ((14 . 15)) nil (25759 10900 305159 0) 0 nil])
([nil nil ((#("u" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -14) (undo-tree-id1 . -1) 15) nil (25759 10900 305158 0) 0 nil])
([nil nil ((14 . 18)) nil (25759 10900 305156 0) 0 nil])
([nil nil ((18 . 20) (#("}}" 0 1 (face (rainbow-delimiters-depth-2-face) ws-butler-chg delete fontified t) 1 2 (face (rainbow-delimiters-depth-1-face) ws-butler-chg delete fontified t)) . 18)) nil (25759 10900 305155 0) 0 nil])
([nil nil ((18 . 21)) nil (25759 10900 305154 0) 0 nil])
([nil nil ((21 . 23)) nil (25759 10900 305153 0) 0 nil])
([nil nil ((22 . 35)) nil (25759 10900 305152 0) 0 nil])
([nil nil ((35 . 37)) nil (25759 10900 305146 0) 0 nil])
([nil nil ((36 . 39)) nil (25759 10900 305145 0) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -38) (undo-tree-id0 . -1) 39) nil (25759 10900 305144 0) 0 nil])
([nil nil ((38 . 49)) nil (25759 10900 305127 0) 0 nil])
([nil nil ((53 . 54) 49) nil (25759 10900 305118 0) 0 nil])
([nil nil ((50 . 54) (t 25759 10900 306794 652000)) nil (25759 10909 427822 0) 0 nil])
([nil nil ((54 . 55)) nil (25759 10909 427821 0) 0 nil])
([nil nil ((#("P" 0 1 (ws-butler-chg chg fontified t)) . -54) (undo-tree-id11 . -1) 55) nil (25759 10909 427820 0) 0 nil])
([nil nil ((54 . 56)) nil (25759 10909 764574 0) 0 nil])
([nil nil ((55 . 62)) nil (25759 10937 657313 0) 0 nil] [nil nil ((55 . 61)) ((#(";
    " 0 2 (face font-lock-comment-face ws-butler-chg chg fontified t) 2 6 (fontified t ws-butler-chg chg)) . 55) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1)) (25759 10909 427971 0) 0 nil])
([nil nil ((62 . 67)) nil (25759 10937 657312 0) 0 nil])
([nil nil ((56 . 57)) ((#(":" 0 1 (face font-lock-comment-face ws-butler-chg chg fontified t)) . 56) (undo-tree-id12 . -1)) (25759 10909 427808 0) 0 nil])
([nil nil ((67 . 69)) nil (25759 10937 657312 0) 0 nil])
nil
([nil nil ((68 . 69)) nil (25759 10937 657311 0) 0 nil])
([nil nil ((69 . 78)) nil (25759 10937 657311 0) 0 nil])
([nil nil ((78 . 80)) nil (25759 10937 657310 0) 0 nil])
([nil nil ((79 . 83)) nil (25759 10937 657309 0) 0 nil])
([nil nil ((#("u" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -81) (undo-tree-id36 . -1) (#("y" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -82) (undo-tree-id37 . -1) 83) nil (25759 10937 657308 0) 0 nil])
([nil nil ((81 . 85)) nil (25759 10937 657299 0) 0 nil])
([nil nil ((85 . 87)) nil (25759 10937 657298 0) 0 nil])
([nil nil ((86 . 101)) nil (25759 10937 657294 0) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-7-face) fontified nil)) . -85) (undo-tree-id38 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-7-face) fontified t)) . -101) (undo-tree-id39 . 1) 86 (t 25759 10937 659021 500000)) nil (25759 10961 773112 0) 0 nil])
([nil nil ((94 . 95) (85 . 86)) nil (25759 10961 773103 0) 0 nil])
([nil nil ((#("n" 0 1 (ws-butler-chg delete fontified t)) . 86)) nil (25759 10961 773102 0) 0 nil])
([nil nil ((86 . 87)) nil (25759 10961 773101 0) 0 nil])
([nil nil ((101 . 101) (101 . 102) (#(")" 0 1 (face (rainbow-delimiters-depth-7-face) ws-butler-chg chg fontified t)) . -94) 87) nil (25759 10961 773096 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 65) 62 (#("{" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -54) (undo-tree-id42 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -104) 55 (t 25759 10961 774689 646000)) nil (25759 11014 145834 0) 0 nil])
([nil nil ((101 . 106)) nil (25759 11014 145833 0) 0 nil])
([nil nil ((106 . 107)) nil (25759 11014 145832 0) 0 nil])
([nil nil ((#("L" 0 1 (ws-butler-chg chg fontified t)) . -106) (undo-tree-id41 . -1) 107) nil (25759 11014 145831 0) 0 nil])
([nil nil ((106 . 108)) nil (25759 11014 145830 0) 0 nil])
([nil nil ((#("F" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -107) (undo-tree-id40 . -1) 108) nil (25759 11014 145829 0) 0 nil])
([nil nil ((107 . 116)) nil (25759 11014 145820 0) 0 nil])
([nil nil ((116 . 118)) nil (25759 11014 145820 0) 0 nil])
([nil nil ((117 . 123)) nil (25759 11014 145819 0) 0 nil])
([nil nil ((123 . 125)) nil (25759 11014 145819 0) 0 nil])
([nil nil ((124 . 139)) nil (25759 11014 145818 0) 0 nil])
([nil nil ((141 . 146)) nil (25759 11014 145818 0) 0 nil])
([nil nil ((146 . 150)) nil (25759 11014 145817 0) 0 nil])
([nil nil ((150 . 153)) nil (25759 11014 145817 0) 0 nil])
([nil nil ((153 . 155)) nil (25759 11014 145816 0) 0 nil])
([nil nil ((154 . 160)) nil (25759 11014 145816 0) 0 nil])
([nil nil ((160 . 162)) nil (25759 11014 145815 0) 0 nil])
([nil nil ((161 . 176)) nil (25759 11014 145811 0) 0 nil])
([nil nil ((181 . 183) (t 25759 11014 148113 234000)) nil (25759 11034 97144 0) 0 nil])
([nil nil ((182 . 184) (#(" " 0 1 (ws-butler-chg chg fontified t)) . 182) (undo-tree-id43 . -1) 183) nil (25759 11034 97142 0) 0 nil])
([nil nil ((184 . 190)) nil (25759 11034 97136 0) 0 nil])
([nil nil ((190 . 192)) nil (25759 11034 97132 0) 0 nil])
([nil nil ((183 . 184) (#("
 " 0 1 (fontified nil) 1 2 (fontified t)) . 190) (189 . 189) (189 . 190) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -180) (undo-tree-id44 . -1) (t 25759 11034 98981 733000)) nil (25759 11058 662321 0) 0 nil])
([nil nil ((190 . 193)) nil (25759 11058 662307 0) 0 nil])
([nil nil ((190 . 193) (t 25759 11058 663923 115000)) nil (25759 11078 657330 0) 0 nil])
([nil nil ((193 . 195)) nil (25759 11078 657330 0) 0 nil])
([nil nil ((194 . 199)) nil (25759 11078 657329 0) 0 nil])
([nil nil ((#("l" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -197) (undo-tree-id47 . -1) (#("e" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -198) (undo-tree-id48 . -1) 199) nil (25759 11078 657329 0) 0 nil])
([nil nil ((197 . 201)) nil (25759 11078 657327 0) 0 nil])
([nil nil ((201 . 205)) nil (25759 11078 657326 0) 0 nil])
([nil nil ((205 . 207)) nil (25759 11078 657326 0) 0 nil])
([nil nil ((206 . 208)) nil (25759 11078 657326 0) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face ws-butler-chg delete fontified nil)) . 206) (#("\"" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -206) (undo-tree-id46 . -1) 207) nil (25759 11078 657325 0) 0 nil])
([nil nil ((206 . 207)) nil (25759 11078 657323 0) 0 nil])
([nil nil ((207 . 214)) nil (25759 11078 657323 0) 0 nil])
([nil nil ((#("r" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -213) (undo-tree-id45 . -1) 214) nil (25759 11078 657321 0) 0 nil])
([nil nil ((213 . 214)) nil (25759 11078 657313 0) 0 nil])
([nil nil ((214 . 219) (t 25759 11078 659124 721000)) nil (25759 11093 22664 0) 0 nil])
([nil nil ((219 . 221)) nil (25759 11093 22664 0) 0 nil])
([nil nil ((220 . 227)) nil (25759 11093 22663 0) 0 nil])
([nil nil ((#("U" 0 1 (ws-butler-chg chg fontified t)) . -226) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) 227) nil (25759 11093 22661 0) 0 nil])
([nil nil ((226 . 231)) nil (25759 11093 22640 0) 0 nil])
([nil nil ((231 . 237) (t 25759 11093 24250 399000)) nil (25759 11127 170186 0) 0 nil])
([nil nil ((237 . 250)) nil (25759 11127 170181 0) 0 nil])
([nil nil ((250 . 252)) nil (25759 11127 170180 0) 0 nil])
([nil nil ((251 . 269)) nil (25759 11127 170426 0) 0 nil])
([nil nil ((270 . 276)) nil (25759 11149 420079 0) 0 nil] [nil nil ((271 . 276)) ((#("
    " 0 5 (ws-butler-chg chg fontified t)) . 271) (undo-tree-id77 . -5) (undo-tree-id78 . -1)) (25759 11127 170175 0) 0 nil])
([nil nil ((276 . 281)) nil (25759 11149 420079 0) 0 nil])
nil
([nil nil ((281 . 287)) nil (25759 11149 420077 0) 0 nil])
([nil nil ((287 . 289)) nil (25759 11149 420077 0) 0 nil])
([nil nil ((288 . 291)) nil (25759 11149 420076 0) 0 nil])
([nil nil ((#("i" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -289) (undo-tree-id83 . -1) (#("d" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -290) (undo-tree-id84 . -1) 291) nil (25759 11149 420075 0) 0 nil])
([nil nil ((289 . 293)) nil (25759 11149 420073 0) 0 nil])
([nil nil ((#("n" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -289) (undo-tree-id79 . -1) (#("a" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -290) (undo-tree-id80 . -1) (#("m" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -291) (undo-tree-id81 . -1) (#("e" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -292) (undo-tree-id82 . -1) 293) nil (25759 11149 420072 0) 0 nil])
([nil nil ((289 . 298)) nil (25759 11149 420064 0) 0 nil])
([nil nil ((298 . 300)) nil (25759 11149 420062 0) 0 nil])
([nil nil ((299 . 311)) nil (25759 11149 420059 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -316) (undo-tree-id85 . -1) (#(" " 0 1 (fontified t)) . -317) (undo-tree-id86 . -1) (#(" " 0 1 (fontified t)) . -318) (undo-tree-id87 . -1) 319 (t 25759 11149 422252 7000)) nil (25759 11157 378775 0) 0 nil])
([nil nil ((319 . 320) (t 25759 11157 380271 709000)) nil (25760 62947 111949 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg chg)) . 319) (320 . 320)) nil (25760 62947 111944 0) 0 nil])
([nil nil ((319 . 320) 320 (t 25760 62947 113661 461000)) nil (25760 63007 450177 0) 0 nil])
([nil nil ((182 . 183) (t 25760 62947 113661 461000)) nil (25760 63007 450176 0) 0 nil])
([nil nil ((183 . 186) (#("  " 0 2 (fontified t)) . 183) (undo-tree-id4 . -2) 185) nil (25760 63007 450176 0) 0 nil])
([nil nil ((184 . 187) (#("  " 0 2 (fontified t ws-butler-chg chg)) . 184) (undo-tree-id3 . -2) 186) nil (25760 63007 450174 0) 0 nil])
([nil nil ((182 . 184)) nil (25760 63007 450173 0) 0 nil])
([nil nil ((184 . 189)) nil (25760 63007 450173 0) 0 nil])
([nil nil ((190 . 192)) nil (25760 63007 450172 0) 0 nil])
([nil nil ((191 . 192)) nil (25760 63007 450172 0) 0 nil])
([nil nil ((#("D" 0 1 (fontified t ws-butler-chg chg)) . -191) (undo-tree-id2 . -1) 192) nil (25760 63007 450171 0) 0 nil])
([nil nil ((191 . 204)) nil (25760 63007 450170 0) 0 nil])
([nil nil ((204 . 206)) nil (25760 63007 450170 0) 0 nil])
([nil nil ((205 . 206)) nil (25760 63007 450169 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -205) (undo-tree-id1 . -1) 206) nil (25760 63007 450169 0) 0 nil])
([nil nil ((205 . 208)) nil (25760 63007 450167 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -207) (undo-tree-id0 . -1) 208) nil (25760 63007 450167 0) 0 nil])
([nil nil ((207 . 223)) nil (25760 63007 450156 0) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg fontified t)) . 364) (365 . 365) 223) nil (25760 63007 450153 0) 0 nil])
([nil nil ((190 . 192) 223 (t 25760 63007 452192 196000)) nil (25760 63019 1354 0) 0 nil])
([nil nil ((226 . 230)) nil (25760 63019 1353 0) 0 nil])
([nil nil ((230 . 237)) nil (25760 63019 1352 0) 0 nil])
([nil nil ((237 . 241)) nil (25760 63019 1351 0) 0 nil])
([nil nil ((241 . 243)) nil (25760 63019 1348 0) 0 nil])
([nil nil ((242 . 248) (t 25760 63019 3077 72000)) nil (25760 63021 491102 0) 0 nil])
([nil nil ((248 . 249) (t 25760 63021 493076 612000)) nil (25760 63050 442031 0) 0 nil])
([nil nil ((249 . 251)) nil (25760 63050 442031 0) 0 nil])
([nil nil ((250 . 256)) nil (25760 63050 442030 0) 0 nil])
([nil nil ((256 . 258)) nil (25760 63050 442030 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil ws-butler-chg delete face (rainbow-delimiters-depth-6-face))) . 256) (#("(" 0 1 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-6-face))) . -256) (undo-tree-id18 . -1) 257) nil (25760 63050 442029 0) 0 nil])
([nil nil ((256 . 259)) nil (25760 63050 442028 0) 0 nil])
([nil nil ((#("n" 0 1 (fontified t ws-butler-chg chg)) . -256) (undo-tree-id15 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -257) (undo-tree-id16 . -1) (#("n" 0 1 (fontified t ws-butler-chg chg)) . -258) (undo-tree-id17 . -1) 259) nil (25760 63050 442027 0) 0 nil])
([nil nil ((256 . 258)) nil (25760 63050 442025 0) 0 nil])
([nil nil ((257 . 263)) nil (25760 63050 442025 0) 0 nil])
([nil nil ((#("n" 0 1 (fontified t ws-butler-chg chg)) . -257) (undo-tree-id9 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -258) (undo-tree-id10 . -1) (#("n" 0 1 (fontified t ws-butler-chg chg)) . -259) (undo-tree-id11 . -1) (#("-" 0 1 (fontified t ws-butler-chg chg)) . -260) (undo-tree-id12 . -1) (#("n" 0 1 (fontified t ws-butler-chg chg)) . -261) (undo-tree-id13 . -1) (#("u" 0 1 (fontified t ws-butler-chg chg)) . -262) (undo-tree-id14 . -1) 263) nil (25760 63050 442024 0) 0 nil])
([nil nil ((257 . 259)) nil (25760 63050 442020 0) 0 nil])
([nil nil ((#("S" 0 1 (fontified t ws-butler-chg chg)) . -257) (undo-tree-id7 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg)) . -258) (undo-tree-id8 . -1) 259) nil (25760 63050 442019 0) 0 nil])
([nil nil ((257 . 270)) nil (25760 63050 442018 0) 0 nil])
([nil nil ((#("i" 0 1 (fontified t ws-butler-chg chg)) . -268) (undo-tree-id5 . -1) (#("n" 0 1 (fontified t ws-butler-chg chg)) . -269) (undo-tree-id6 . -1) 270) nil (25760 63050 442017 0) 0 nil])
([nil nil ((268 . 272)) nil (25760 63050 442003 0) 0 nil])
([nil nil ((274 . 279)) nil (25760 63050 442002 0) 0 nil])
([nil nil ((279 . 280)) nil (25760 63050 441999 0) 0 nil])
([nil nil ((280 . 282) (t 25760 63050 443801 819000)) nil (25760 63063 409298 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t ws-butler-chg chg face clojure-keyword-face)) . -281) (undo-tree-id19 . -1) 282) nil (25760 63063 409297 0) 0 nil])
([nil nil ((281 . 290)) nil (25760 63063 409290 0) 0 nil])
([nil nil ((290 . 292)) nil (25760 63063 409290 0) 0 nil])
([nil nil ((291 . 297)) nil (25760 63063 409289 0) 0 nil])
([nil nil ((297 . 299)) nil (25760 63063 409289 0) 0 nil])
([nil nil ((298 . 313)) nil (25760 63063 409286 0) 0 nil])
([nil nil ((315 . 320) (t 25760 63063 411288 575000)) nil (25760 63074 286291 0) 0 nil])
([nil nil ((320 . 334)) nil (25760 63074 286288 0) 0 nil])
([nil nil ((334 . 336) (t 25760 63074 287745 42000)) nil (25760 63084 837779 0) 0 nil])
([nil nil ((335 . 336)) nil (25760 63084 837776 0) 0 nil])
([nil nil ((336 . 341) (t 25760 63084 839600 200000)) nil (25760 63094 282325 0) 0 nil])
([nil nil ((341 . 343)) nil (25760 63094 282324 0) 0 nil])
([nil nil ((342 . 345)) nil (25760 63094 282323 0) 0 nil])
([nil nil ((#("n" 0 1 (fontified t ws-butler-chg chg)) . -344) (undo-tree-id20 . -1) 345) nil (25760 63094 282322 0) 0 nil])
([nil nil ((344 . 348)) nil (25760 63094 282316 0) 0 nil])
([nil nil ((348 . 350)) nil (25760 63094 282312 0) 0 nil])
([nil nil ((350 . 357) (t 25760 63094 284549 106000)) nil (25760 63101 540284 0) 0 nil])
([nil nil ((358 . 378) (t 25760 63101 542257 182000)) nil (25760 63114 926676 0) 0 nil])
([nil nil ((378 . 388)) nil (25760 63114 926675 0) 0 nil])
([nil nil ((#("o" 0 1 (fontified t ws-butler-chg chg face clojure-keyword-face)) . -387) (undo-tree-id21 . -1) 388) nil (25760 63114 926674 0) 0 nil])
([nil nil ((387 . 391)) nil (25760 63114 926669 0) 0 nil])
([nil nil ((391 . 393)) nil (25760 63114 926669 0) 0 nil])
([nil nil ((392 . 405)) nil (25760 63119 19874 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -409) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) 410 (t 25760 63114 928463 25000)) nil (25760 63122 517831 0) 0 nil] [nil nil ((407 . 412) (t 25760 63114 928463 25000)) ((#("
    " 0 5 (fontified t ws-butler-chg chg)) . 407) (undo-tree-id22 . -5) (undo-tree-id23 . -1)) (25760 63119 19407 0) 0 nil])
([nil nil ((410 . 413) (#("  " 0 2 (fontified t)) . 410) (undo-tree-id63 . -2) 412 (t 25760 63122 519758 220000)) nil (25760 63125 793885 0) 0 nil])
nil
([nil nil ((66 . 71) (t 25760 63125 795923 516000)) nil (25761 12975 878069 0) 0 nil])
([nil nil ((66 . 70)) nil (25761 12975 878068 0) 0 nil])
([nil nil ((70 . 72)) nil (25761 12975 878068 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil ws-butler-chg delete help-echo cider--help-echo cider-locals nil face (rainbow-delimiters-depth-5-face))) . 70) (#("(" 0 1 (fontified t ws-butler-chg chg help-echo cider--help-echo cider-locals nil face (rainbow-delimiters-depth-5-face))) . -70) (undo-tree-id66 . -1) 71) nil (25761 12975 878067 0) 0 nil])
([nil nil ((70 . 72)) nil (25761 12975 878065 0) 0 nil])
([nil nil ((71 . 78)) nil (25761 12975 878065 0) 0 nil])
([nil nil ((#("*" 0 1 (fontified t ws-butler-chg chg help-echo cider--help-echo cider-locals nil face font-lock-function-name-face)) . -77) (undo-tree-id65 . -1) 78) nil (25761 12975 878064 0) 0 nil])
([nil nil ((77 . 79)) nil (25761 12975 878063 0) 0 nil])
([nil nil ((78 . 82)) nil (25761 12975 878062 0) 0 nil])
([nil nil ((#("=" 0 1 (fontified t ws-butler-chg chg help-echo cider--help-echo cider-locals nil)) . -81) (undo-tree-id64 . -1) 82) nil (25761 12975 878061 0) 0 nil])
([nil nil ((81 . 89)) nil (25761 12975 878050 0) 0 nil])
([nil nil ((272 . 277) (t 25761 12975 881802 24000)) nil (25761 12989 634807 0) 0 nil])
([nil nil ((272 . 273)) nil (25761 12989 634807 0) 0 nil])
([nil nil ((273 . 276)) nil (25761 12989 634806 0) 0 nil])
([nil nil ((276 . 278)) nil (25761 12989 634805 0) 0 nil])
([nil nil ((277 . 283)) nil (25761 12989 634805 0) 0 nil])
([nil nil ((283 . 285)) nil (25761 12989 634804 0) 0 nil])
([nil nil ((284 . 295)) nil (25761 12989 634800 0) 0 nil])
([nil nil ((208 . 213) (t 25761 12989 636929 389000)) nil (25761 13266 214262 0) 0 nil])
([nil nil ((213 . 218)) nil (25761 13266 214260 0) 0 nil])
([nil nil ((218 . 219)) nil (25761 13266 214259 0) 0 nil])
([nil nil ((219 . 221)) nil (25761 13266 214258 0) 0 nil])
([nil nil ((220 . 226)) nil (25761 13266 214257 0) 0 nil])
([nil nil ((226 . 228)) nil (25761 13266 214256 0) 0 nil])
([nil nil ((227 . 236)) nil (25761 13266 214255 0) 0 nil])
([nil nil ((236 . 238)) nil (25761 13266 214254 0) 0 nil])
([nil nil ((237 . 240)) nil (25761 13266 214252 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t ws-butler-chg chg help-echo cider--help-echo cider-locals nil)) . -239) (undo-tree-id67 . -1) 240) nil (25761 13266 214251 0) 0 nil])
([nil nil ((239 . 247)) nil (25761 13266 214238 0) 0 nil])
([nil nil ((510 . 514) (t 25761 13266 217167 674000)) nil (25761 13370 94725 0) 0 nil])
([nil nil ((514 . 520)) nil (25761 13370 94724 0) 0 nil])
([nil nil ((520 . 522)) nil (25761 13370 94723 0) 0 nil])
([nil nil ((521 . 527)) nil (25761 13370 94722 0) 0 nil])
([nil nil ((527 . 529)) nil (25761 13370 94721 0) 0 nil])
([nil nil ((528 . 537)) nil (25761 13370 94720 0) 0 nil])
([nil nil ((537 . 539)) nil (25761 13370 94719 0) 0 nil])
([nil nil ((538 . 543)) nil (25761 13370 94718 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg chg help-echo cider--help-echo cider-locals nil)) . -542) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) 543) nil (25761 55998 355371 0) 0 nil])
([nil nil ((#(" {:type (non-null ID)}" 0 1 (help-echo cider--help-echo fontified t cider-locals nil) 1 2 (help-echo cider--help-echo fontified t cider-locals nil face (rainbow-delimiters-depth-5-face)) 2 3 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 3 7 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 7 8 (help-echo cider--help-echo fontified t cider-locals nil) 8 9 (help-echo cider--help-echo fontified t cider-locals nil face (rainbow-delimiters-depth-6-face)) 9 13 (help-echo cider--help-echo fontified t cider-locals nil) 13 18 (help-echo cider--help-echo fontified t cider-locals nil) 18 20 (help-echo cider--help-echo fontified t cider-locals nil) 20 21 (help-echo cider--help-echo fontified t cider-locals nil face (rainbow-delimiters-depth-6-face)) 21 22 (help-echo cider--help-echo fontified t cider-locals nil face (rainbow-delimiters-depth-5-face))) . 317) (undo-tree-id594 . -21)) nil (25761 56008 9097 0) 0 nil] [nil nil ((542 . 548)) ((#(" :User" 0 1 (help-echo cider--help-echo fontified t cider-locals nil) 1 2 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 2 6 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face)) . 542) (t 25761 13370 97750 444000)) (25761 55997 848111 0) 0 nil])
([nil nil ((#(":" 0 1 (help-echo cider--help-echo fontified t cider-locals nil)) . -314) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (#("i" 0 1 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face)) . -315) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (#("d" 0 1 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face)) . -316) (undo-tree-id592 . -1) (undo-tree-id593 . -1) 317) nil (25761 56008 9094 0) 0 nil])
([nil nil ((#("ID)" 0 2 (help-echo cider--help-echo fontified t cider-locals nil) 2 3 (help-echo cider--help-echo fontified t cider-locals nil face (rainbow-delimiters-depth-6-face))) . -335) (undo-tree-id478 . -3) (undo-tree-id479 . -2) (undo-tree-id480 . -2) (undo-tree-id481 . -2) (undo-tree-id482 . -3) (undo-tree-id483 . -3) (undo-tree-id484 . -3) (undo-tree-id485 . -3) (undo-tree-id486 . -3) (undo-tree-id487 . -3) (undo-tree-id488 . -3) (undo-tree-id489 . -3) (undo-tree-id490 . -3) (undo-tree-id491 . -3) (undo-tree-id492 . -3) (undo-tree-id493 . -3) (undo-tree-id494 . -3) (undo-tree-id495 . -3) (undo-tree-id496 . -3) (undo-tree-id497 . -3) (undo-tree-id498 . -3) (undo-tree-id499 . -3) (undo-tree-id500 . -3) (undo-tree-id501 . -3) (undo-tree-id502 . -3) (undo-tree-id503 . -3) (undo-tree-id504 . -3) (undo-tree-id505 . -3) (undo-tree-id506 . -3) (undo-tree-id507 . -3) (undo-tree-id508 . -3) (undo-tree-id509 . -3) (undo-tree-id510 . -3) (undo-tree-id511 . -3) (undo-tree-id512 . -3) (undo-tree-id513 . -3) (undo-tree-id514 . 1) (undo-tree-id515 . -3) (undo-tree-id516 . -3) (undo-tree-id517 . -3) (undo-tree-id518 . -3) (undo-tree-id519 . -3) (undo-tree-id520 . -3) (undo-tree-id521 . -3) (undo-tree-id522 . -3) (undo-tree-id523 . -3) (undo-tree-id524 . -3) (undo-tree-id525 . -3) (undo-tree-id526 . -3) (undo-tree-id527 . -3) (undo-tree-id528 . -3) (undo-tree-id529 . -3) (undo-tree-id530 . -3) (undo-tree-id531 . -3) (undo-tree-id532 . -3) (undo-tree-id533 . -3) (undo-tree-id534 . -3) (undo-tree-id535 . -3) (undo-tree-id536 . -3) (undo-tree-id537 . -3) (undo-tree-id538 . -3) (undo-tree-id539 . -3) (undo-tree-id540 . -3) (undo-tree-id541 . -3) (undo-tree-id542 . -3) (undo-tree-id543 . -3) (undo-tree-id544 . -3) (undo-tree-id545 . -3) (undo-tree-id546 . -3) (undo-tree-id547 . -3) (undo-tree-id548 . -3) (undo-tree-id549 . -3) (undo-tree-id550 . -3) (undo-tree-id551 . -3) (undo-tree-id552 . -3) (undo-tree-id553 . -3) (undo-tree-id554 . -3) (undo-tree-id555 . -3) (undo-tree-id556 . -3) (undo-tree-id557 . -3) (undo-tree-id558 . -3) (undo-tree-id559 . -3) (undo-tree-id560 . -3) (undo-tree-id561 . -3) (undo-tree-id562 . -3) (undo-tree-id563 . -3) (undo-tree-id564 . -3) (undo-tree-id565 . -3) (undo-tree-id566 . -3) (undo-tree-id567 . -3) (undo-tree-id568 . -3) (undo-tree-id569 . -3) (undo-tree-id570 . -3) (undo-tree-id571 . -3) (undo-tree-id572 . -3) (undo-tree-id573 . -3) (undo-tree-id574 . -3) (undo-tree-id575 . -3) (undo-tree-id576 . -3) (undo-tree-id577 . -3) (undo-tree-id578 . -3) (undo-tree-id579 . -3) (undo-tree-id580 . -3) (undo-tree-id581 . -3) (undo-tree-id582 . -3) (undo-tree-id583 . -3) (undo-tree-id584 . -3) (undo-tree-id585 . -3) (undo-tree-id586 . -3) (undo-tree-id587 . -3) 338 (t 25761 13370 97750 444000)) ((335 . 338)) (25761 55997 455469 0) 0 nil])
([nil nil ((#("    " 0 4 (help-echo cider--help-echo fontified t cider-locals nil)) . 315) (undo-tree-id777 . -4) (undo-tree-id778 . -4) (undo-tree-id779 . -4) (undo-tree-id780 . -4) (undo-tree-id781 . -4) (undo-tree-id782 . -4) (undo-tree-id783 . -4) (undo-tree-id784 . -4) (undo-tree-id785 . -4) (undo-tree-id786 . -4) (undo-tree-id787 . -4) (undo-tree-id788 . -4) (undo-tree-id789 . -4) (undo-tree-id790 . -4) (undo-tree-id791 . -4) (undo-tree-id792 . -4) (undo-tree-id793 . -4) (undo-tree-id794 . -4) (undo-tree-id795 . -4) (undo-tree-id796 . -4) (undo-tree-id797 . -4) (undo-tree-id798 . -4) (undo-tree-id799 . -4) (undo-tree-id800 . -4) (undo-tree-id801 . -4) (undo-tree-id802 . -4) (undo-tree-id803 . -4) (undo-tree-id804 . -4) (undo-tree-id805 . -4) (undo-tree-id806 . -4) (undo-tree-id807 . -4) (undo-tree-id808 . -4) (undo-tree-id809 . -4) (undo-tree-id810 . -4) (undo-tree-id811 . -4) (undo-tree-id812 . -4) (undo-tree-id813 . -4) (undo-tree-id814 . -4) (undo-tree-id815 . -4) (undo-tree-id816 . -4) (undo-tree-id817 . -4) (undo-tree-id818 . -4) (undo-tree-id819 . -4) (undo-tree-id820 . -4) (undo-tree-id821 . -4) (undo-tree-id822 . -4) (undo-tree-id823 . -4) (undo-tree-id824 . -4) (undo-tree-id825 . -4) (undo-tree-id826 . -4) (undo-tree-id827 . -4) (undo-tree-id828 . -4) (undo-tree-id829 . -4) (undo-tree-id830 . -4) (undo-tree-id831 . -4) (undo-tree-id832 . -4) (undo-tree-id833 . -4) (undo-tree-id834 . -4) (undo-tree-id835 . -4) (undo-tree-id836 . -4) (undo-tree-id837 . -4) (undo-tree-id838 . -4) (undo-tree-id839 . -4) (undo-tree-id840 . -4) (undo-tree-id841 . -4) (undo-tree-id842 . -4) (undo-tree-id843 . -4) (undo-tree-id844 . -4) (undo-tree-id845 . -4) (undo-tree-id846 . -4) (undo-tree-id847 . -4) (undo-tree-id848 . -4) (undo-tree-id849 . -4) (undo-tree-id850 . -4) (undo-tree-id851 . -4) (undo-tree-id852 . -4) (undo-tree-id853 . -4) (undo-tree-id854 . -4) (undo-tree-id855 . -4) (undo-tree-id856 . -4) (undo-tree-id857 . -4) (undo-tree-id858 . -4) (undo-tree-id859 . -4) (undo-tree-id860 . -4) (undo-tree-id861 . -4) (undo-tree-id862 . -4) (undo-tree-id863 . -4) (undo-tree-id864 . -4) (t 25761 56008 11506 243000)) nil (25761 56011 302836 0) 0 nil])
([nil nil ((#("null " 0 5 (help-echo cider--help-echo fontified t cider-locals nil)) . -330) (undo-tree-id315 . -5) (undo-tree-id316 . -5) (undo-tree-id317 . -5) (undo-tree-id318 . -5) (undo-tree-id319 . -5) (undo-tree-id320 . -5) (undo-tree-id321 . -5) (undo-tree-id322 . -5) (undo-tree-id323 . -5) (undo-tree-id324 . -5) (undo-tree-id325 . -5) (undo-tree-id326 . -5) (undo-tree-id327 . -5) (undo-tree-id328 . -5) (undo-tree-id329 . -5) (undo-tree-id330 . -5) (undo-tree-id331 . -5) (undo-tree-id332 . -5) (undo-tree-id333 . -5) (undo-tree-id334 . -5) (undo-tree-id335 . -5) (undo-tree-id336 . -5) (undo-tree-id337 . -5) (undo-tree-id338 . -5) (undo-tree-id339 . -5) (undo-tree-id340 . -5) (undo-tree-id341 . -5) (undo-tree-id342 . -5) (undo-tree-id343 . -5) (undo-tree-id344 . -5) (undo-tree-id345 . -5) (undo-tree-id346 . -5) (undo-tree-id347 . -5) (undo-tree-id348 . -5) (undo-tree-id349 . -5) (undo-tree-id350 . -5) (undo-tree-id351 . -5) (undo-tree-id352 . -5) (undo-tree-id353 . -5) (undo-tree-id354 . -5) (undo-tree-id355 . -5) (undo-tree-id356 . -5) (undo-tree-id357 . -5) (undo-tree-id358 . -5) (undo-tree-id359 . -5) (undo-tree-id360 . -5) (undo-tree-id361 . -5) (undo-tree-id362 . -5) (undo-tree-id363 . -5) (undo-tree-id364 . -5) (undo-tree-id365 . -5) (undo-tree-id366 . -5) (undo-tree-id367 . -5) (undo-tree-id368 . -5) (undo-tree-id369 . -5) (undo-tree-id370 . -5) (undo-tree-id371 . -5) (undo-tree-id372 . -5) (undo-tree-id373 . -5) (undo-tree-id374 . -5) (undo-tree-id375 . -5) (undo-tree-id376 . -5) (undo-tree-id377 . -5) (undo-tree-id378 . -5) (undo-tree-id379 . -5) (undo-tree-id380 . -5) (undo-tree-id381 . -5) (undo-tree-id382 . -5) (undo-tree-id383 . -5) (undo-tree-id384 . -5) (undo-tree-id385 . -5) (undo-tree-id386 . -5) (undo-tree-id387 . -5) (undo-tree-id388 . -5) (undo-tree-id389 . -5) (undo-tree-id390 . -5) (undo-tree-id391 . -5) (undo-tree-id392 . -5) (undo-tree-id393 . -5) (undo-tree-id394 . -5) (undo-tree-id395 . -5) (undo-tree-id396 . -5) (undo-tree-id397 . -5) (undo-tree-id398 . -5) (undo-tree-id399 . -5) (undo-tree-id400 . -5) (undo-tree-id401 . -5) (undo-tree-id402 . -5) (undo-tree-id403 . -5) (undo-tree-id404 . -5) (undo-tree-id405 . -5) (undo-tree-id406 . -5) (undo-tree-id407 . -5) (undo-tree-id408 . -5) (undo-tree-id409 . -5) (undo-tree-id410 . -5) (undo-tree-id411 . -5) (undo-tree-id412 . -5) (undo-tree-id413 . -5) (undo-tree-id414 . -5) (undo-tree-id415 . -5) (undo-tree-id416 . -5) (undo-tree-id417 . -5) (undo-tree-id418 . -5) (undo-tree-id419 . -5) (undo-tree-id420 . -5) (undo-tree-id421 . -5) (undo-tree-id422 . -5) (undo-tree-id423 . -5) (undo-tree-id424 . -5) (undo-tree-id425 . -5) (undo-tree-id426 . -5) (undo-tree-id427 . -5) (undo-tree-id428 . -5) (undo-tree-id429 . -5) (undo-tree-id430 . -5) (undo-tree-id431 . -5) (undo-tree-id432 . -5) (undo-tree-id433 . -5) (undo-tree-id434 . -5) (undo-tree-id435 . -5) (undo-tree-id436 . -5) (undo-tree-id437 . -5) (undo-tree-id438 . -5) (undo-tree-id439 . -5) (undo-tree-id440 . -5) (undo-tree-id441 . -5) (undo-tree-id442 . -5) (undo-tree-id443 . -5) (undo-tree-id444 . -5) (undo-tree-id445 . -5) (undo-tree-id446 . -5) (undo-tree-id447 . -5) (undo-tree-id448 . -5) (undo-tree-id449 . -5) (undo-tree-id450 . -5) (undo-tree-id451 . -5) (undo-tree-id452 . -5) (undo-tree-id453 . -5) (undo-tree-id454 . -5) (undo-tree-id455 . -5) (undo-tree-id456 . -5) (undo-tree-id457 . -5) (undo-tree-id458 . -5) (undo-tree-id459 . -5) (undo-tree-id460 . -5) (undo-tree-id461 . -5) (undo-tree-id462 . -5) (undo-tree-id463 . -5) (undo-tree-id464 . -5) (undo-tree-id465 . -5) (undo-tree-id466 . -5) (undo-tree-id467 . -5) (undo-tree-id468 . -5) (undo-tree-id469 . -5) (undo-tree-id470 . -5) (undo-tree-id471 . -5) (undo-tree-id472 . -5) (undo-tree-id473 . -5) (undo-tree-id474 . -5) (undo-tree-id475 . -5) (undo-tree-id476 . -5) (undo-tree-id477 . -5) 335) ((330 . 335)) (25761 55997 180512 0) 0 nil])
([nil nil ((#("
" 0 1 (help-echo cider--help-echo fontified t cider-locals nil)) . -314) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) 315) nil (25761 56011 302802 0) 0 nil])
([nil nil ((#("non-" 0 4 (help-echo cider--help-echo fontified t cider-locals nil)) . -326) (undo-tree-id124 . -4) (undo-tree-id125 . -4) (undo-tree-id126 . -4) (undo-tree-id127 . -4) (undo-tree-id128 . -4) (undo-tree-id129 . -4) (undo-tree-id130 . -4) (undo-tree-id131 . -4) (undo-tree-id132 . -4) (undo-tree-id133 . -4) (undo-tree-id134 . -4) (undo-tree-id135 . -4) (undo-tree-id136 . -4) (undo-tree-id137 . -4) (undo-tree-id138 . -4) (undo-tree-id139 . -4) (undo-tree-id140 . -4) (undo-tree-id141 . -4) (undo-tree-id142 . -4) (undo-tree-id143 . -4) (undo-tree-id144 . -4) (undo-tree-id145 . -4) (undo-tree-id146 . -4) (undo-tree-id147 . -4) (undo-tree-id148 . -4) (undo-tree-id149 . -4) (undo-tree-id150 . -4) (undo-tree-id151 . -4) (undo-tree-id152 . -4) (undo-tree-id153 . -4) (undo-tree-id154 . -4) (undo-tree-id155 . -4) (undo-tree-id156 . -4) (undo-tree-id157 . -4) (undo-tree-id158 . -4) (undo-tree-id159 . -4) (undo-tree-id160 . -4) (undo-tree-id161 . -4) (undo-tree-id162 . -4) (undo-tree-id163 . -4) (undo-tree-id164 . -4) (undo-tree-id165 . -4) (undo-tree-id166 . -4) (undo-tree-id167 . -4) (undo-tree-id168 . -4) (undo-tree-id169 . -4) (undo-tree-id170 . -4) (undo-tree-id171 . -4) (undo-tree-id172 . -4) (undo-tree-id173 . -4) (undo-tree-id174 . -4) (undo-tree-id175 . -4) (undo-tree-id176 . -4) (undo-tree-id177 . -4) (undo-tree-id178 . -4) (undo-tree-id179 . -4) (undo-tree-id180 . -4) (undo-tree-id181 . -4) (undo-tree-id182 . -4) (undo-tree-id183 . -4) (undo-tree-id184 . -4) (undo-tree-id185 . -4) (undo-tree-id186 . -4) (undo-tree-id187 . -4) (undo-tree-id188 . -4) (undo-tree-id189 . -4) (undo-tree-id190 . -4) (undo-tree-id191 . -4) (undo-tree-id192 . -4) (undo-tree-id193 . -4) (undo-tree-id194 . -4) (undo-tree-id195 . -4) (undo-tree-id196 . -4) (undo-tree-id197 . -4) (undo-tree-id198 . -4) (undo-tree-id199 . -4) (undo-tree-id200 . -4) (undo-tree-id201 . -4) (undo-tree-id202 . -4) (undo-tree-id203 . -4) (undo-tree-id204 . -4) (undo-tree-id205 . -4) (undo-tree-id206 . -4) (undo-tree-id207 . -4) (undo-tree-id208 . -4) (undo-tree-id209 . -4) (undo-tree-id210 . -4) (undo-tree-id211 . -4) (undo-tree-id212 . -4) (undo-tree-id213 . -4) (undo-tree-id214 . -4) (undo-tree-id215 . -4) (undo-tree-id216 . -4) (undo-tree-id217 . -4) (undo-tree-id218 . -4) (undo-tree-id219 . -4) (undo-tree-id220 . -4) (undo-tree-id221 . -4) (undo-tree-id222 . -4) (undo-tree-id223 . -4) (undo-tree-id224 . -4) (undo-tree-id225 . -4) (undo-tree-id226 . -4) (undo-tree-id227 . -4) (undo-tree-id228 . -4) (undo-tree-id229 . -4) (undo-tree-id230 . -4) (undo-tree-id231 . -4) (undo-tree-id232 . -4) (undo-tree-id233 . -4) (undo-tree-id234 . -4) (undo-tree-id235 . -4) (undo-tree-id236 . -4) (undo-tree-id237 . -4) (undo-tree-id238 . -4) (undo-tree-id239 . -4) (undo-tree-id240 . -4) (undo-tree-id241 . -4) (undo-tree-id242 . -4) (undo-tree-id243 . -4) (undo-tree-id244 . -4) (undo-tree-id245 . -4) (undo-tree-id246 . -4) (undo-tree-id247 . -4) (undo-tree-id248 . -4) (undo-tree-id249 . -4) (undo-tree-id250 . -4) (undo-tree-id251 . -4) (undo-tree-id252 . -4) (undo-tree-id253 . -4) (undo-tree-id254 . -4) (undo-tree-id255 . -4) (undo-tree-id256 . -4) (undo-tree-id257 . -4) (undo-tree-id258 . -4) (undo-tree-id259 . -4) (undo-tree-id260 . -4) (undo-tree-id261 . -4) (undo-tree-id262 . -4) (undo-tree-id263 . -4) (undo-tree-id264 . -4) (undo-tree-id265 . -4) (undo-tree-id266 . -4) (undo-tree-id267 . -4) (undo-tree-id268 . -4) (undo-tree-id269 . -4) (undo-tree-id270 . -4) (undo-tree-id271 . -4) (undo-tree-id272 . -4) (undo-tree-id273 . -4) (undo-tree-id274 . -4) (undo-tree-id275 . -4) (undo-tree-id276 . -4) (undo-tree-id277 . -4) (undo-tree-id278 . -4) (undo-tree-id279 . -4) (undo-tree-id280 . -4) (undo-tree-id281 . -4) (undo-tree-id282 . -4) (undo-tree-id283 . -4) (undo-tree-id284 . -4) (undo-tree-id285 . -4) (undo-tree-id286 . -4) (undo-tree-id287 . -4) (undo-tree-id288 . -4) (undo-tree-id289 . -4) (undo-tree-id290 . -4) (undo-tree-id291 . -4) (undo-tree-id292 . -4) (undo-tree-id293 . -4) (undo-tree-id294 . -4) (undo-tree-id295 . -4) (undo-tree-id296 . -4) (undo-tree-id297 . -4) (undo-tree-id298 . -4) (undo-tree-id299 . -4) (undo-tree-id300 . -4) (undo-tree-id301 . -4) (undo-tree-id302 . -4) (undo-tree-id303 . -4) (undo-tree-id304 . -4) (undo-tree-id305 . -4) (undo-tree-id306 . -4) (undo-tree-id307 . -4) (undo-tree-id308 . -4) (undo-tree-id309 . -4) (undo-tree-id310 . -4) (undo-tree-id311 . -4) (undo-tree-id312 . -4) (undo-tree-id313 . -4) (undo-tree-id314 . -4) 330) ((nil ws-butler-chg delete 330 . 331) (326 . 330)) (25761 55997 180117 0) 0 nil])
([nil nil ((#("list" 0 4 (fontified t help-echo cider--help-echo cider-locals nil face font-lock-function-name-face)) . -237) (undo-tree-id902 . -4) 241 (t 25761 56011 304855 254000)) nil (25761 56515 506778 0) 0 nil])
nil
([nil nil ((#("( " 0 1 (fontified nil help-echo cider--help-echo cider-locals nil face (rainbow-delimiters-depth-7-face)) 1 2 (fontified nil help-echo cider--help-echo ws-butler-chg delete cider-locals nil)) . 236) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (#(")" 0 1 (fontified t help-echo cider--help-echo cider-locals nil face (rainbow-delimiters-depth-7-face))) . -243) 237) nil (25761 56515 506774 0) 0 nil])
([nil nil ((505 . 506) (t 25761 56515 509031 218000)) nil (25761 56530 702805 0) 0 nil])
([nil nil ((#("list " 0 4 (help-echo cider--help-echo fontified t cider-locals nil face font-lock-function-name-face) 4 5 (help-echo cider--help-echo fontified t ws-butler-chg chg cider-locals nil)) . -501) (undo-tree-id913 . -5) 506) nil (25761 56530 702804 0) 0 nil])
([nil nil ((501 . 506)) nil (25761 56530 702803 0) 0 nil])
([nil nil ((#("L" 0 1 (help-echo cider--help-echo fontified t ws-butler-chg chg cider-locals nil)) . -501) (undo-tree-id908 . -1) (#("u" 0 1 (help-echo cider--help-echo fontified t ws-butler-chg chg cider-locals nil)) . -502) (undo-tree-id909 . -1) (#("s" 0 1 (help-echo cider--help-echo fontified t ws-butler-chg chg cider-locals nil)) . -503) (undo-tree-id910 . -1) (#("e" 0 1 (help-echo cider--help-echo fontified t ws-butler-chg chg cider-locals nil)) . -504) (undo-tree-id911 . -1) (#("r" 0 1 (help-echo cider--help-echo fontified t ws-butler-chg chg cider-locals nil)) . -505) (undo-tree-id912 . -1) 506) nil (25761 56530 702802 0) 0 nil])
([nil nil ((#("(" 0 1 (help-echo cider--help-echo fontified nil cider-locals nil face (rainbow-delimiters-depth-6-face))) . -500) (undo-tree-id907 . -1) (#(")" 0 1 (help-echo cider--help-echo fontified t ws-butler-chg delete cider-locals nil face (rainbow-delimiters-depth-6-face))) . -501)) nil (25761 56530 702795 0) 0 nil])
([nil nil ((500 . 505)) nil (25761 56530 702793 0) 0 nil])
([nil nil ((#("u" 0 1 (help-echo cider--help-echo fontified t ws-butler-chg chg cider-locals nil face clojure-keyword-face)) . -501) (undo-tree-id903 . -1) (#("s" 0 1 (help-echo cider--help-echo fontified t ws-butler-chg chg cider-locals nil face clojure-keyword-face)) . -502) (undo-tree-id904 . -1) (#("e" 0 1 (help-echo cider--help-echo fontified t ws-butler-chg chg cider-locals nil face clojure-keyword-face)) . -503) (undo-tree-id905 . -1) (#("r" 0 1 (help-echo cider--help-echo fontified t ws-butler-chg chg cider-locals nil face clojure-keyword-face)) . -504) (undo-tree-id906 . -1) 505) nil (25761 56530 702792 0) 0 nil])
([nil nil ((501 . 505)) nil (25761 56530 702779 0) 0 nil])
([nil nil ((#(":user {:type (non-null :User)}" 0 1 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 1 5 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 5 6 (help-echo cider--help-echo fontified t cider-locals nil) 6 7 (help-echo cider--help-echo fontified t cider-locals nil face (rainbow-delimiters-depth-4-face)) 7 8 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 8 12 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 12 13 (help-echo cider--help-echo fontified t cider-locals nil) 13 14 (help-echo cider--help-echo fontified t cider-locals nil face (rainbow-delimiters-depth-5-face)) 14 23 (help-echo cider--help-echo fontified t cider-locals nil) 23 24 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 24 28 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 28 29 (help-echo cider--help-echo fontified t cider-locals nil face (rainbow-delimiters-depth-5-face)) 29 30 (help-echo cider--help-echo fontified t cider-locals nil face (rainbow-delimiters-depth-4-face))) . 477) (undo-tree-id1238 . -30) (t 25761 56530 705354 461000)) nil (25762 4758 93201 0) 0 nil])
([nil nil ((#("   " 0 3 (help-echo cider--help-echo fontified t cider-locals nil)) . 474) (undo-tree-id1105 . -3) (undo-tree-id1106 . -3) (undo-tree-id1107 . -3) (undo-tree-id1108 . -3) (undo-tree-id1109 . -3) (undo-tree-id1110 . -3) (undo-tree-id1111 . -3) (undo-tree-id1112 . -3) (undo-tree-id1113 . -3) (undo-tree-id1114 . -3) (undo-tree-id1115 . -3) (undo-tree-id1116 . -3) (undo-tree-id1117 . -3) (undo-tree-id1118 . -3) (undo-tree-id1119 . -3) (undo-tree-id1120 . -3) (undo-tree-id1121 . -3) (undo-tree-id1122 . -3) (undo-tree-id1123 . -3) (undo-tree-id1124 . -3) (undo-tree-id1125 . -3) (undo-tree-id1126 . -3) (undo-tree-id1127 . -3) (undo-tree-id1128 . -3) (undo-tree-id1129 . -3) (undo-tree-id1130 . -3) (undo-tree-id1131 . -3) (undo-tree-id1132 . -3) (undo-tree-id1133 . -3) (undo-tree-id1134 . -3) (undo-tree-id1135 . -3) (undo-tree-id1136 . -3) (undo-tree-id1137 . -3) (undo-tree-id1138 . -3) (undo-tree-id1139 . -3) (undo-tree-id1140 . -3) (undo-tree-id1141 . -3) (undo-tree-id1142 . -3) (undo-tree-id1143 . -3) (undo-tree-id1144 . -3) (undo-tree-id1145 . -3) (undo-tree-id1146 . -3) (undo-tree-id1147 . -3) (undo-tree-id1148 . -3) (undo-tree-id1149 . -3) (undo-tree-id1150 . -3) (undo-tree-id1151 . -3) (undo-tree-id1152 . -3) (undo-tree-id1153 . -3) (undo-tree-id1154 . -3) (undo-tree-id1155 . -3) (undo-tree-id1156 . -3) (undo-tree-id1157 . -3) (undo-tree-id1158 . -3) (undo-tree-id1159 . -3) (undo-tree-id1160 . -3) (undo-tree-id1161 . -3) (undo-tree-id1162 . -3) (undo-tree-id1163 . -3) (undo-tree-id1164 . -3) (undo-tree-id1165 . -3) (undo-tree-id1166 . -3) (undo-tree-id1167 . -3) (undo-tree-id1168 . -3) (undo-tree-id1169 . -3) (undo-tree-id1170 . -3) (undo-tree-id1171 . -3) (undo-tree-id1172 . -3) (undo-tree-id1173 . -3) (undo-tree-id1174 . -3) (undo-tree-id1175 . -3) (undo-tree-id1176 . -3) (undo-tree-id1177 . -3) (undo-tree-id1178 . -3) (undo-tree-id1179 . -3) (undo-tree-id1180 . -3) (undo-tree-id1181 . -3) (undo-tree-id1182 . -3) (undo-tree-id1183 . -3) (undo-tree-id1184 . -3) (undo-tree-id1185 . -3) (undo-tree-id1186 . -3) (undo-tree-id1187 . -3) (undo-tree-id1188 . -3) (undo-tree-id1189 . -3) (undo-tree-id1190 . -3) (undo-tree-id1191 . -3) (undo-tree-id1192 . -3) (undo-tree-id1193 . -3) (undo-tree-id1194 . -3) (undo-tree-id1195 . -3) (undo-tree-id1196 . -3) (undo-tree-id1197 . -3) (undo-tree-id1198 . -3) (undo-tree-id1199 . -3) (undo-tree-id1200 . -3) (undo-tree-id1201 . -3) (undo-tree-id1202 . -3) (undo-tree-id1203 . -3) (undo-tree-id1204 . -3) (undo-tree-id1205 . -3) (undo-tree-id1206 . -3) (undo-tree-id1207 . -3) (undo-tree-id1208 . -3) (undo-tree-id1209 . -3) (undo-tree-id1210 . -3) (undo-tree-id1211 . -3) (undo-tree-id1212 . -3) (undo-tree-id1213 . -3) (undo-tree-id1214 . -3) (undo-tree-id1215 . -3) (undo-tree-id1216 . -3) (undo-tree-id1217 . -3) (undo-tree-id1218 . -3) (undo-tree-id1219 . -3) (undo-tree-id1220 . -3) (undo-tree-id1221 . -3) (undo-tree-id1222 . -3) (undo-tree-id1223 . -3) (undo-tree-id1224 . -3) (undo-tree-id1225 . -3) (undo-tree-id1226 . -3) (undo-tree-id1227 . -3) (undo-tree-id1228 . -3) (undo-tree-id1229 . -3) (undo-tree-id1230 . -3) (undo-tree-id1231 . -3) (undo-tree-id1232 . -3) (undo-tree-id1233 . -3) (undo-tree-id1234 . -3) (undo-tree-id1235 . -3) (undo-tree-id1236 . -3) (undo-tree-id1237 . -3)) nil (25762 4758 93197 0) 0 nil])
([nil nil ((#("
" 0 1 (help-echo cider--help-echo fontified t cider-locals nil)) . -473) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) 474) nil (25762 8518 619540 0) 0 nil])
([nil nil ((608 . 613) (t 25762 4758 97239 227000)) nil (25762 8564 239411 0) 0 nil] [nil nil ((500 . 501) (t 25762 4758 97239 227000)) ((#("n" 0 1 (help-echo cider--help-echo fontified t ws-butler-chg chg cider-locals nil)) . 500)) (25762 8518 619182 0) 0 nil])
([nil nil ((613 . 626)) nil (25762 8564 239410 0) 0 nil])
nil
([nil nil ((626 . 631)) nil (25762 8564 239410 0) 0 nil])
([nil nil ((631 . 633)) nil (25762 8564 239409 0) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil ws-butler-chg delete help-echo cider--help-echo cider-locals nil face (rainbow-delimiters-depth-5-face))) . 631) (#("(" 0 1 (fontified t ws-butler-chg chg help-echo cider--help-echo cider-locals nil face (rainbow-delimiters-depth-5-face))) . -631) (undo-tree-id1245 . -1) 632) nil (25762 8564 239409 0) 0 nil])
([nil nil ((631 . 633)) nil (25762 8564 239408 0) 0 nil])
([nil nil ((632 . 635)) nil (25762 8564 239407 0) 0 nil])
([nil nil ((#("p" 0 1 (fontified t ws-butler-chg chg help-echo cider--help-echo cider-locals nil face clojure-keyword-face)) . -634) (undo-tree-id1244 . -1) 635) nil (25762 8564 239407 0) 0 nil])
([nil nil ((634 . 643)) nil (25762 8564 239406 0) 0 nil])
([nil nil ((643 . 649)) nil (25762 8564 239405 0) 0 nil])
([nil nil ((649 . 651)) nil (25762 8564 239405 0) 0 nil])
([nil nil ((#("D" 0 1 (fontified t ws-butler-chg chg help-echo cider--help-echo cider-locals nil face clojure-keyword-face)) . -650) (undo-tree-id1243 . -1) 651) nil (25762 8564 239404 0) 0 nil])
([nil nil ((650 . 662)) nil (25762 8564 239403 0) 0 nil])
([nil nil ((662 . 664)) nil (25762 8564 239403 0) 0 nil])
([nil nil ((663 . 664)) nil (25762 8564 239402 0) 0 nil])
([nil nil ((#("u" 0 1 (fontified t ws-butler-chg chg help-echo cider--help-echo cider-locals nil face font-lock-string-face)) . -663) (undo-tree-id1242 . -1) 664) nil (25762 8564 239402 0) 0 nil])
([nil nil ((663 . 684)) nil (25762 8564 239401 0) 0 nil])
([nil nil ((684 . 692)) nil (25762 8564 239400 0) 0 nil])
([nil nil ((692 . 697)) nil (25762 8564 239400 0) 0 nil])
([nil nil ((698 . 704)) nil (25762 8564 239399 0) 0 nil])
([nil nil ((704 . 709)) nil (25762 8564 239399 0) 0 nil])
([nil nil ((709 . 715)) nil (25762 8564 239398 0) 0 nil])
([nil nil ((715 . 717)) nil (25762 8564 239398 0) 0 nil])
([nil nil ((716 . 721)) nil (25762 8564 239397 0) 0 nil])
([nil nil ((#("token" 0 5 (fontified t ws-butler-chg chg help-echo cider--help-echo cider-locals nil)) . -716) (undo-tree-id1241 . -5) 721) nil (25762 8564 239397 0) 0 nil])
([nil nil ((716 . 720)) nil (25762 8564 239384 0) 0 nil])
([nil nil ((#("e" 0 1 (fontified t ws-butler-chg chg help-echo cider--help-echo cider-locals nil face clojure-keyword-face)) . -719) (undo-tree-id1240 . -1) 720) nil (25762 8564 239383 0) 0 nil])
([nil nil ((719 . 723)) nil (25762 8564 239382 0) 0 nil])
([nil nil ((723 . 725)) nil (25762 8564 239382 0) 0 nil])
([nil nil ((724 . 731)) nil (25762 8564 239381 0) 0 nil])
([nil nil ((#("s" 0 1 (fontified t ws-butler-chg chg help-echo cider--help-echo cider-locals nil)) . -730) (undo-tree-id1239 . -1) 731) nil (25762 8564 239380 0) 0 nil])
([nil nil ((730 . 736)) nil (25762 8564 239371 0) 0 nil])
([nil nil ((242 . 243) (236 . 237) (t 25762 8564 243779 73000)) nil (25762 20208 728656 0) 0 nil])
([nil nil ((237 . 242)) nil (25762 20208 728654 0) 0 nil])
([nil nil ((479 . 484) (t 25762 20208 731100 651000)) nil (25762 22343 467689 0) 0 nil])
([nil nil ((484 . 490)) nil (25762 22343 467688 0) 0 nil])
([nil nil ((490 . 492)) nil (25762 22343 467687 0) 0 nil])
([nil nil ((491 . 497)) nil (25762 22343 467686 0) 0 nil])
([nil nil ((497 . 499)) nil (25762 22343 467686 0) 0 nil])
([nil nil ((498 . 503)) nil (25762 22343 467685 0) 0 nil])
([nil nil ((503 . 507)) nil (25762 22343 467685 0) 0 nil])
([nil nil ((507 . 509)) nil (25762 22343 467684 0) 0 nil])
([nil nil ((508 . 518)) nil (25762 22343 467680 0) 0 nil])
([nil nil ((523 . 526) (t 25762 22343 470590 488000)) nil (25763 9358 792949 0) 0 nil])
([nil nil ((524 . 527) (#("  " 0 2 (ws-butler-chg chg cider-locals nil help-echo cider--help-echo fontified t)) . 524) (undo-tree-id14 . -2) 526) nil (25763 9358 792948 0) 0 nil])
([nil nil ((527 . 532)) nil (25763 9358 792947 0) 0 nil])
([nil nil ((#("O" 0 1 (face clojure-keyword-face ws-butler-chg chg cider-locals nil help-echo cider--help-echo fontified t)) . -529) (undo-tree-id11 . -1) (#("s" 0 1 (face clojure-keyword-face ws-butler-chg chg cider-locals nil help-echo cider--help-echo fontified t)) . -530) (undo-tree-id12 . -1) (#("t" 0 1 (face clojure-keyword-face ws-butler-chg chg cider-locals nil help-echo cider--help-echo fontified t)) . -531) (undo-tree-id13 . -1) 532) nil (25763 9358 792946 0) 0 nil])
([nil nil ((529 . 532)) nil (25763 9358 792944 0) 0 nil])
([nil nil ((532 . 535)) nil (25763 9358 792944 0) 0 nil])
([nil nil ((535 . 537)) nil (25763 9358 792944 0) 0 nil])
([nil nil ((536 . 549)) nil (25763 9358 792943 0) 0 nil])
([nil nil ((549 . 551)) nil (25763 9358 792943 0) 0 nil])
([nil nil ((550 . 557)) nil (25763 9358 792942 0) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -556) (undo-tree-id10 . -1) 557) nil (25763 9358 792942 0) 0 nil])
([nil nil ((556 . 563)) nil (25763 9358 792941 0) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-string-face ws-butler-chg chg fontified t)) . -562) (undo-tree-id9 . -1) 563) nil (25763 9358 792940 0) 0 nil])
([nil nil ((562 . 571)) nil (25763 9358 792939 0) 0 nil])
([nil nil ((572 . 576)) nil (25763 9358 792939 0) 0 nil])
([nil nil ((576 . 583)) nil (25763 9358 792938 0) 0 nil])
([nil nil ((583 . 587)) nil (25763 9358 792938 0) 0 nil])
([nil nil ((587 . 589)) nil (25763 9358 792937 0) 0 nil])
([nil nil ((588 . 589)) nil (25763 9358 792937 0) 0 nil])
([nil nil ((#(">" 0 1 (ws-butler-chg chg fontified t)) . -588) (undo-tree-id8 . -1) 589) nil (25763 9358 792936 0) 0 nil])
([nil nil ((588 . 590)) nil (25763 9358 792935 0) 0 nil])
([nil nil ((#("T" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -589) (undo-tree-id7 . -1) 590) nil (25763 9358 792935 0) 0 nil])
([nil nil ((589 . 595)) nil (25763 9358 792934 0) 0 nil])
([nil nil ((595 . 597)) nil (25763 9358 792934 0) 0 nil])
([nil nil ((596 . 602)) nil (25763 9358 792933 0) 0 nil])
([nil nil ((602 . 604)) nil (25763 9358 792933 0) 0 nil])
([nil nil ((603 . 618)) nil (25763 9358 792932 0) 0 nil])
([nil nil ((620 . 625)) nil (25763 9358 792932 0) 0 nil])
([nil nil ((625 . 629)) nil (25763 9358 792931 0) 0 nil])
([nil nil ((#("t" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -626) (undo-tree-id4 . -1) (#("e" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -627) (undo-tree-id5 . -1) (#("x" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -628) (undo-tree-id6 . -1) 629) nil (25763 9358 792931 0) 0 nil])
([nil nil ((626 . 631)) nil (25763 9358 792929 0) 0 nil])
([nil nil ((631 . 633)) nil (25763 9358 792928 0) 0 nil])
([nil nil ((632 . 638)) nil (25763 9358 792928 0) 0 nil])
([nil nil ((638 . 640)) nil (25763 9358 792928 0) 0 nil])
([nil nil ((639 . 654)) nil (25763 9358 792927 0) 0 nil])
([nil nil ((#("null " 0 5 (ws-butler-chg chg fontified t)) . -643) (undo-tree-id3 . -5) 648) nil (25763 9358 792926 0) 0 nil])
([nil nil ((#("non-" 0 4 (ws-butler-chg chg fontified t)) . -639) (undo-tree-id2 . -4) 643) nil (25763 9358 792925 0) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-6-face) ws-butler-chg chg fontified nil)) . -638) (undo-tree-id1 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-6-face) ws-butler-chg chg fontified t)) . -645) 639) nil (25763 9358 792924 0) 0 nil])
([nil nil ((645 . 650)) nil (25763 9358 792923 0) 0 nil])
([nil nil ((650 . 656)) nil (25763 9358 792922 0) 0 nil])
([nil nil ((656 . 658)) nil (25763 9358 792922 0) 0 nil])
([nil nil ((657 . 663)) nil (25763 9358 792922 0) 0 nil])
([nil nil ((663 . 665)) nil (25763 9358 792921 0) 0 nil])
([nil nil ((664 . 673)) nil (25763 9358 792921 0) 0 nil])
([nil nil ((673 . 675)) nil (25763 9358 792920 0) 0 nil])
([nil nil ((674 . 684)) nil (25763 9358 792920 0) 0 nil])
([nil nil ((#("user" 0 4 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -680) (undo-tree-id0 . -4) 684) nil (25763 9358 792919 0) 0 nil])
([nil nil ((680 . 684)) nil (25763 9358 792907 0) 0 nil])
([nil nil ((645 . 650)) nil (25763 9358 792907 0) 0 nil])
([nil nil ((650 . 661)) nil (25763 9358 792907 0) 0 nil])
([nil nil ((661 . 663)) nil (25763 9358 792906 0) 0 nil])
([nil nil ((662 . 674)) nil (25763 9358 792902 0) 0 nil])
([nil nil ((675 . 676) (668 . 669) (t 25763 9358 796775 272000)) nil (25763 9365 475797 0) 0 nil])
([nil nil ((669 . 678)) nil (25763 9365 475794 0) 0 nil])
([nil nil ((588 . 593) (t 25763 9365 479071 854000)) nil (25763 10715 267557 0) 0 nil])
([nil nil ((588 . 592)) nil (25763 10715 267556 0) 0 nil])
([nil nil ((592 . 594)) nil (25763 10715 267555 0) 0 nil])
([nil nil ((593 . 599)) nil (25763 10715 267555 0) 0 nil])
([nil nil ((599 . 601)) nil (25763 10715 267554 0) 0 nil])
([nil nil ((600 . 611)) nil (25763 10715 267551 0) 0 nil])
([nil nil ((760 . 763) (t 25763 10715 270113 22000)) nil (25763 10731 816181 0) 0 nil])
([nil nil ((761 . 764) (#("  " 0 2 (ws-butler-chg chg fontified t)) . 761) (undo-tree-id16 . -2) 763) nil (25763 10731 816180 0) 0 nil])
([nil nil ((764 . 765)) nil (25763 10731 816179 0) 0 nil])
([nil nil ((#("L" 0 1 (ws-butler-chg chg fontified t)) . -764) (undo-tree-id15 . -1) 765) nil (25763 10731 816178 0) 0 nil])
([nil nil ((764 . 772)) nil (25763 10731 816172 0) 0 nil])
([nil nil ((772 . 775)) nil (25763 10731 816172 0) 0 nil])
([nil nil ((775 . 777)) nil (25763 10731 816171 0) 0 nil])
([nil nil ((776 . 789)) nil (25763 10731 816171 0) 0 nil])
([nil nil ((789 . 791)) nil (25763 10731 816170 0) 0 nil])
([nil nil ((790 . 801)) nil (25763 10731 816169 0) 0 nil])
([nil nil ((801 . 809)) nil (25763 10731 816166 0) 0 nil])
([nil nil ((810 . 814) (t 25763 10731 818978 524000)) nil (25763 10795 989671 0) 0 nil])
([nil nil ((814 . 822)) nil (25763 10795 989670 0) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg fontified t)) . -821) (undo-tree-id27 . -1) 822) nil (25763 10795 989670 0) 0 nil])
([nil nil ((821 . 825)) nil (25763 10795 989669 0) 0 nil])
([nil nil ((825 . 827)) nil (25763 10795 989668 0) 0 nil])
([nil nil ((826 . 830)) nil (25763 10795 989668 0) 0 nil])
([nil nil ((830 . 832)) nil (25763 10795 989668 0) 0 nil])
([nil nil ((831 . 839)) nil (25763 10795 989667 0) 0 nil])
([nil nil ((#("non" 0 3 (ws-butler-chg chg fontified t)) . -836) (undo-tree-id26 . -3) 839) nil (25763 10795 989667 0) 0 nil])
([nil nil ((836 . 838)) nil (25763 10795 989666 0) 0 nil])
([nil nil ((837 . 849)) nil (25763 10795 989665 0) 0 nil])
([nil nil ((#("F" 0 1 (ws-butler-chg chg fontified t)) . -848) (undo-tree-id25 . -1) 849) nil (25763 10795 989665 0) 0 nil])
([nil nil ((850 . 855)) nil (25763 10795 989664 0) 0 nil])
([nil nil ((855 . 861)) nil (25763 10795 989664 0) 0 nil])
([nil nil ((861 . 863)) nil (25763 10795 989663 0) 0 nil])
([nil nil ((862 . 864)) nil (25763 10795 989663 0) 0 nil])
([nil nil ((864 . 867)) nil (25763 10795 989662 0) 0 nil])
([nil nil ((867 . 869)) nil (25763 10795 989662 0) 0 nil])
([nil nil ((868 . 883)) nil (25763 10795 989661 0) 0 nil])
([nil nil ((885 . 890)) nil (25763 10795 989661 0) 0 nil])
([nil nil ((890 . 901)) nil (25763 10795 989661 0) 0 nil])
([nil nil ((901 . 903)) nil (25763 10795 989660 0) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-5-face) ws-butler-chg delete fontified nil)) . 901) (#("(" 0 1 (face (rainbow-delimiters-depth-5-face) ws-butler-chg chg fontified t)) . -901) (undo-tree-id24 . -1) 902) nil (25763 10795 989660 0) 0 nil])
([nil nil ((901 . 903)) nil (25763 10795 989659 0) 0 nil])
([nil nil ((902 . 903)) nil (25763 10795 989658 0) 0 nil])
([nil nil ((903 . 908)) nil (25763 10795 989658 0) 0 nil])
([nil nil ((908 . 910)) nil (25763 10795 989658 0) 0 nil])
([nil nil ((909 . 924)) nil (25763 10795 989657 0) 0 nil])
([nil nil ((926 . 931)) nil (25763 10795 989657 0) 0 nil])
([nil nil ((931 . 937)) nil (25763 10795 989656 0) 0 nil])
([nil nil ((937 . 939)) nil (25763 10795 989656 0) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-5-face) ws-butler-chg delete fontified nil)) . 937) (#("(" 0 1 (face (rainbow-delimiters-depth-5-face) ws-butler-chg chg fontified t)) . -937) (undo-tree-id23 . -1) 938) nil (25763 10795 989655 0) 0 nil])
([nil nil ((937 . 939)) nil (25763 10795 989654 0) 0 nil])
([nil nil ((938 . 945)) nil (25763 10795 989654 0) 0 nil])
([nil nil ((#("e" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -943) (undo-tree-id21 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -944) (undo-tree-id22 . -1) 945) nil (25763 10795 989653 0) 0 nil])
([nil nil ((#("o" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -941) (undo-tree-id19 . -1) (#("p" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -942) (undo-tree-id20 . -1) 943) nil (25763 10795 989651 0) 0 nil])
([nil nil ((941 . 944)) nil (25763 10795 989650 0) 0 nil])
([nil nil ((944 . 946)) nil (25763 10795 989650 0) 0 nil])
([nil nil ((945 . 954)) nil (25763 10795 989649 0) 0 nil])
([nil nil ((954 . 956)) nil (25763 10795 989649 0) 0 nil])
([nil nil ((955 . 965)) nil (25763 10795 989648 0) 0 nil])
([nil nil ((#("user" 0 4 (face clojure-keyword-face ws-butler-chg chg fontified t)) . -961) (undo-tree-id18 . -4) 965) nil (25763 10795 989648 0) 0 nil])
([nil nil ((961 . 965)) nil (25763 10795 989647 0) 0 nil])
([nil nil ((968 . 973)) nil (25763 10795 989646 0) 0 nil])
([nil nil ((973 . 979)) nil (25763 10795 989646 0) 0 nil])
([nil nil ((979 . 981)) nil (25763 10795 989645 0) 0 nil])
([nil nil ((980 . 986)) nil (25763 10795 989645 0) 0 nil])
([nil nil ((986 . 988)) nil (25763 10795 989645 0) 0 nil])
([nil nil ((987 . 997)) nil (25763 10795 989644 0) 0 nil])
([nil nil ((#("*" 0 1 (ws-butler-chg chg fontified t)) . -996) (undo-tree-id17 . -1) 997) nil (25763 10795 989643 0) 0 nil])
([nil nil ((996 . 998)) nil (25763 10795 989636 0) 0 nil])
([nil nil ((997 . 998)) nil (25763 10795 989635 0) 0 nil])
([nil nil ((998 . 1007)) nil (25763 10795 989631 0) 0 nil])
([nil nil ((#("P" 0 1 (face clojure-keyword-face fontified t)) . -974) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) 975 (t 25763 10795 992257 886000)) nil (25763 11083 537714 0) 0 nil])
([nil nil ((974 . 975)) nil (25763 11083 537697 0) 0 nil])
([nil nil ((675 . 676) (668 . 669) (t 25763 11083 540909 328000)) nil (25763 19018 623877 0) 0 nil])
([nil nil ((669 . 678)) nil (25763 19018 623874 0) 0 nil])
([nil nil ((842 . 843) (t 25763 19018 628318 952000)) nil (25763 19220 7317 0) 0 nil])
([nil nil ((#("L" 0 1 (cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . -842) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) 843) nil (25763 19220 7315 0) 0 nil])
([nil nil ((842 . 843)) nil (25763 19220 7301 0) 0 nil])
([nil nil ((874 . 875)) nil (25763 19220 7296 0) 0 nil])
([nil nil ((1290 . 1295) (t 25763 19220 10565 40000)) nil (25763 19442 366880 0) 0 nil])
([nil nil ((1295 . 1303)) nil (25763 19442 366879 0) 0 nil])
([nil nil ((1303 . 1308)) nil (25763 19442 366879 0) 0 nil])
([nil nil ((1308 . 1310)) nil (25763 19442 366878 0) 0 nil])
([nil nil ((1309 . 1320)) nil (25763 19442 366878 0) 0 nil])
([nil nil ((1320 . 1326)) nil (25763 19442 366878 0) 0 nil])
([nil nil ((1326 . 1334)) nil (25763 19442 366877 0) 0 nil])
([nil nil ((#("t" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1331) (undo-tree-id72 . -1) (#("i" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1332) (undo-tree-id73 . -1) (#("p" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1333) (undo-tree-id74 . -1) 1334) nil (25763 19442 366877 0) 0 nil])
([nil nil ((1331 . 1332)) nil (25763 19442 366875 0) 0 nil])
([nil nil ((1332 . 1339)) nil (25763 19442 366874 0) 0 nil])
([nil nil ((1339 . 1341)) nil (25763 19442 366874 0) 0 nil])
([nil nil ((1340 . 1356)) nil (25763 19442 366873 0) 0 nil])
([nil nil ((1356 . 1357)) nil (25763 19442 366873 0) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1356) (undo-tree-id71 . -1) 1357) nil (25763 19442 366872 0) 0 nil])
([nil nil ((1357 . 1363)) nil (25763 19442 366871 0) 0 nil])
([nil nil ((1363 . 1367)) nil (25763 19442 366871 0) 0 nil])
([nil nil ((#("p" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1364) (undo-tree-id68 . -1) (#("o" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1365) (undo-tree-id69 . -1) (#("s" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1366) (undo-tree-id70 . -1) 1367) nil (25763 19442 366870 0) 0 nil])
([nil nil ((1364 . 1368)) nil (25763 19442 366863 0) 0 nil])
([nil nil ((1368 . 1374)) nil (25763 19442 366862 0) 0 nil])
([nil nil ((1374 . 1376)) nil (25763 19442 366862 0) 0 nil])
([nil nil ((1375 . 1379)) nil (25763 19442 366861 0) 0 nil])
([nil nil ((1379 . 1381)) nil (25763 19442 366860 0) 0 nil])
([nil nil ((1380 . 1388)) nil (25763 19453 151570 0) 0 nil])
([nil nil ((250 . 255) (t 25763 19442 370654 572000)) nil (25763 49739 597992 0) 0 nil] [nil nil ((1388 . 1391) (t 25763 19442 370654 572000)) ((#(" ()" 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t) 1 2 (face (rainbow-delimiters-depth-8-face) cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t) 2 3 (face (rainbow-delimiters-depth-8-face) cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . 1388) (undo-tree-id75 . -2) (undo-tree-id76 . -1) (undo-tree-id77 . -3)) (25763 19453 151154 0) 0 nil])
([nil nil ((255 . 262)) nil (25763 49739 597991 0) 0 nil])
nil
([nil nil ((262 . 264)) nil (25763 49739 597991 0) 0 nil])
([nil nil ((263 . 269)) nil (25763 49739 597990 0) 0 nil])
([nil nil ((269 . 271)) nil (25763 49739 597990 0) 0 nil])
([nil nil ((270 . 279)) nil (25763 49739 597989 0) 0 nil])
([nil nil ((279 . 281)) nil (25763 49739 597989 0) 0 nil])
([nil nil ((280 . 289)) nil (25763 49739 597988 0) 0 nil])
([nil nil ((#(":" 0 1 (ws-butler-chg chg fontified t)) . -284) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -285) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (#("P" 0 1 (ws-butler-chg chg fontified t)) . -286) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (#("o" 0 1 (ws-butler-chg chg fontified t)) . -287) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (#("s" 0 1 (ws-butler-chg chg fontified t)) . -288) (undo-tree-id296 . -1) 289) nil (25763 49739 597984 0) 0 nil])
([nil nil ((284 . 286)) nil (25763 49739 597905 0) 0 nil])
([nil nil ((#("P" 0 1 (ws-butler-chg chg fontified t)) . -285) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) 286) nil (25763 49739 597903 0) 0 nil])
([nil nil ((285 . 290)) nil (25763 49746 868677 0) 0 nil])
([nil nil ((#("null " 0 5 (fontified t)) . -274) (undo-tree-id300 . -5) 279 (t 25763 49739 602288 155000)) nil (25763 49843 826967 0) 0 nil] [nil nil ((290 . 291) (t 25763 49739 602288 155000)) ((#("y" 0 1 (face clojure-keyword-face ws-butler-chg chg fontified t)) . 290) (undo-tree-id297 . -1)) (25763 49746 868343 0) 0 nil])
([nil nil ((#("non-" 0 4 (fontified t)) . -270) (undo-tree-id299 . -4) 274) nil (25763 49843 826966 0) 0 nil])
nil
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-6-face) fontified nil)) . -269) (undo-tree-id298 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t)) . -282) 270) nil (25763 49843 826961 0) 0 nil])
([nil nil ((282 . 287) (t 25763 49843 830482 331000)) nil (25764 62968 655194 0) 0 nil])
([nil nil ((287 . 297)) nil (25764 62968 655193 0) 0 nil])
([nil nil ((297 . 299)) nil (25764 62968 655192 0) 0 nil])
([nil nil ((298 . 304)) nil (25764 62968 655191 0) 0 nil])
([nil nil ((304 . 306)) nil (25764 62968 655191 0) 0 nil])
([nil nil ((305 . 318)) nil (25764 62968 655187 0) 0 nil])
([nil nil ((#("I" 0 1 (fontified t help-echo cider--help-echo cider-locals nil)) . -87) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (#("D" 0 1 (fontified t help-echo cider--help-echo cider-locals nil)) . -88) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) 89 (t 25764 62968 660213 974000)) nil (25771 8615 984096 0) 0 nil])
([nil nil ((87 . 90)) nil (25771 8615 984042 0) 0 nil])
([nil nil ((385 . 390) (t 25771 8615 988127 437000)) nil (25771 8637 398536 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 410 . 411) (nil help-echo cider--help-echo 410 . 411) (nil fontified nil 410 . 411) (nil help-echo cider--help-echo 409 . 410) (nil fontified nil 409 . 410) (nil help-echo cider--help-echo 406 . 409) (nil fontified nil 406 . 409) (nil help-echo cider--help-echo 397 . 406) (nil fontified nil 397 . 406) (nil help-echo cider--help-echo 396 . 397) (nil fontified nil 396 . 397) (nil help-echo cider--help-echo 395 . 396) (nil fontified nil 395 . 396) (nil help-echo cider--help-echo 391 . 395) (nil fontified nil 391 . 395) (nil help-echo cider--help-echo 390 . 391) (nil fontified nil 390 . 391) (nil help-echo cider--help-echo 389 . 390) (nil fontified nil 389 . 390) (nil help-echo cider--help-echo 388 . 389) (nil fontified nil 388 . 389) (nil help-echo cider--help-echo 386 . 388) (nil fontified nil 386 . 388) (nil help-echo cider--help-echo 385 . 386) (nil fontified nil 385 . 386) (385 . 411)) nil (25771 8637 398532 0) 0 nil])
([nil nil ((#("ID" 0 2 (help-echo cider--help-echo fontified t cider-locals nil)) . -1488) (undo-tree-id114 . -2) 1490 (t 25771 8637 401822 259000)) nil (25771 8650 543633 0) 0 nil])
([nil nil ((1488 . 1491)) nil (25771 8650 543622 0) 0 nil])
([nil nil ((#("D" 0 1 (help-echo cider--help-echo fontified t cider-locals nil)) . -712) (undo-tree-id115 . -1) 713 (t 25771 8650 547310 887000)) nil (25771 8665 509156 0) 0 nil])
([nil nil ((712 . 714)) nil (25771 8665 509148 0) 0 nil])
([nil nil ((#("D" 0 1 (help-echo cider--help-echo fontified t cider-locals nil)) . -962) (undo-tree-id116 . -1) 963 (t 25771 8665 512301 331000)) nil (25771 8669 109676 0) 0 nil])
([nil nil ((962 . 964)) nil (25771 8669 109664 0) 0 nil])
([nil nil ((#("n" 0 1 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face)) . -142) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) 143 (t 25771 8669 112948 876000)) nil (25771 10714 627379 0) 0 nil])
([nil nil ((142 . 143)) nil (25771 10714 627370 0) 0 nil])
([nil nil ((#("n" 0 1 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face)) . -102) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) 103) nil (25771 10714 627368 0) 0 nil])
([nil nil ((102 . 103)) nil (25771 10714 627346 0) 0 nil])
([nil nil ((#("l" 0 1 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face)) . -458) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) 459 (t 25771 10714 632244 458000)) nil (25771 10719 655359 0) 0 nil])
([nil nil ((458 . 459)) nil (25771 10719 655351 0) 0 nil])
([nil nil ((#("p" 0 1 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face)) . -499) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) 500) nil (25771 10719 655350 0) 0 nil])
([nil nil ((499 . 500)) nil (25771 10719 655332 0) 0 nil])
([nil nil ((#("s" 0 1 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face)) . -799) (undo-tree-id273 . -1) 800 (t 25771 10719 657980 302000)) nil (25771 10728 744528 0) 0 nil])
([nil nil ((799 . 800)) nil (25771 10728 744526 0) 0 nil])
([nil nil ((#("s" 0 1 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face)) . -1012) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) 1013) nil (25771 10728 744524 0) 0 nil])
([nil nil ((1012 . 1013)) nil (25771 10728 744505 0) 0 nil])
([nil nil ((#("    :fullName {:type (non-null String)}" 0 4 (help-echo cider--help-echo fontified t cider-locals nil) 4 5 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 5 9 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 9 10 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 10 11 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 11 13 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 13 14 (help-echo cider--help-echo fontified t cider-locals nil) 14 15 (help-echo cider--help-echo fontified t cider-locals nil face (rainbow-delimiters-depth-5-face)) 15 16 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 16 20 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 20 21 (help-echo cider--help-echo fontified t cider-locals nil) 21 22 (help-echo cider--help-echo fontified t cider-locals nil face (rainbow-delimiters-depth-6-face)) 22 37 (help-echo cider--help-echo fontified t cider-locals nil) 37 38 (help-echo cider--help-echo fontified t cider-locals nil face (rainbow-delimiters-depth-6-face)) 38 39 (help-echo cider--help-echo fontified t cider-locals nil face (rainbow-delimiters-depth-5-face))) . 133) (undo-tree-id441 . -39) (undo-tree-id442 . -39) (undo-tree-id443 . -39) (undo-tree-id444 . -39) (undo-tree-id445 . -39) (undo-tree-id446 . -39) (undo-tree-id447 . -39) (undo-tree-id448 . -39) (undo-tree-id449 . -39) (undo-tree-id450 . -39) (undo-tree-id451 . -39) (undo-tree-id452 . -39) (undo-tree-id453 . -39) (undo-tree-id454 . -39) (undo-tree-id455 . -39) (undo-tree-id456 . -39) (undo-tree-id457 . -39) (undo-tree-id458 . 1) (undo-tree-id459 . -39) (undo-tree-id460 . 25) (undo-tree-id461 . -15) (undo-tree-id462 . -39) (undo-tree-id463 . -39) (undo-tree-id464 . -39) (undo-tree-id465 . -39) (undo-tree-id466 . -39) (undo-tree-id467 . -39) (undo-tree-id468 . -39) (undo-tree-id469 . -39) (undo-tree-id470 . -39) (undo-tree-id471 . -39) (undo-tree-id472 . -39) (undo-tree-id473 . -39) (undo-tree-id474 . -39) (undo-tree-id475 . -39) (undo-tree-id476 . -39) (undo-tree-id477 . -39) (undo-tree-id478 . -39) (undo-tree-id479 . -39) (undo-tree-id480 . -39) (undo-tree-id481 . -39) (undo-tree-id482 . -39) (undo-tree-id483 . -39) (undo-tree-id484 . -39) (undo-tree-id485 . -39) 172 (t 25771 10728 747457 948000)) nil (25771 10755 222598 0) 0 nil])
([nil nil ((#("
" 0 1 (help-echo cider--help-echo fontified t cider-locals nil)) . -132) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) 133) nil (25771 10755 222573 0) 0 nil])
([nil nil ((92 . 97)) nil (25771 10755 222503 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 135 . 136) (nil help-echo cider--help-echo 135 . 136) (nil fontified nil 135 . 136) (nil help-echo cider--help-echo 134 . 135) (nil fontified nil 134 . 135) (nil help-echo cider--help-echo 119 . 134) (nil fontified nil 119 . 134) (nil help-echo cider--help-echo 118 . 119) (nil fontified nil 118 . 119) (nil help-echo cider--help-echo 117 . 118) (nil fontified nil 117 . 118) (nil help-echo cider--help-echo 113 . 117) (nil fontified nil 113 . 117) (nil help-echo cider--help-echo 112 . 113) (nil fontified nil 112 . 113) (nil help-echo cider--help-echo 111 . 112) (nil fontified nil 111 . 112) (nil help-echo cider--help-echo 110 . 111) (nil fontified nil 110 . 111) (nil help-echo cider--help-echo 108 . 110) (nil fontified nil 108 . 110) (nil help-echo cider--help-echo 107 . 108) (nil fontified nil 107 . 108) (nil help-echo cider--help-echo 106 . 107) (nil fontified nil 106 . 107) (nil help-echo cider--help-echo 102 . 106) (nil fontified nil 102 . 106) (nil help-echo cider--help-echo 101 . 102) (nil fontified nil 101 . 102) (nil help-echo cider--help-echo 97 . 101) (nil fontified nil 97 . 101) (97 . 136)) nil (25771 10755 222502 0) 0 nil])
([nil nil ((#("    " 0 4 (ws-butler-chg chg fontified t help-echo cider--help-echo cider-locals nil)) . -97) 136) nil (25771 10755 222494 0) 0 nil])
([nil nil ((#(":posts {:type (list :Post)}" 0 1 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 1 6 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 6 7 (help-echo cider--help-echo fontified t cider-locals nil) 7 8 (help-echo cider--help-echo fontified t cider-locals nil face (rainbow-delimiters-depth-5-face)) 8 9 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 9 13 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 13 14 (help-echo cider--help-echo fontified t cider-locals nil) 14 15 (help-echo cider--help-echo fontified t cider-locals nil face (rainbow-delimiters-depth-6-face)) 15 19 (help-echo cider--help-echo fontified t cider-locals nil face font-lock-function-name-face) 19 20 (help-echo cider--help-echo fontified t cider-locals nil) 20 21 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 21 25 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 25 26 (help-echo cider--help-echo fontified t cider-locals nil face (rainbow-delimiters-depth-6-face)) 26 27 (help-echo cider--help-echo fontified t cider-locals nil face (rainbow-delimiters-depth-5-face))) . 256) (t 25771 10755 226093 564000)) nil (25771 10809 800589 0) 0 nil])
([nil nil ((#(":comments {:type (list :Comment)}" 0 1 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 1 9 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 9 10 (help-echo cider--help-echo fontified t cider-locals nil) 10 11 (help-echo cider--help-echo fontified t cider-locals nil face (rainbow-delimiters-depth-5-face)) 11 12 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 12 16 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 16 17 (help-echo cider--help-echo fontified t cider-locals nil) 17 18 (help-echo cider--help-echo fontified t cider-locals nil face (rainbow-delimiters-depth-6-face)) 18 22 (help-echo cider--help-echo fontified t cider-locals nil face font-lock-function-name-face) 22 23 (help-echo cider--help-echo fontified t cider-locals nil) 23 24 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 24 31 (help-echo cider--help-echo fontified t cider-locals nil face clojure-keyword-face) 31 32 (help-echo cider--help-echo fontified t cider-locals nil face (rainbow-delimiters-depth-6-face)) 32 33 (help-echo cider--help-echo fontified t cider-locals nil face (rainbow-delimiters-depth-5-face))) . 261) (undo-tree-id1412 . -33)) nil (25771 10809 800589 0) 0 nil])
([nil nil ((#("
" 0 1 (help-echo cider--help-echo fontified t ws-butler-chg delete cider-locals nil)) . -256) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals nil)) . -257) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals nil)) . -258) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals nil)) . -259) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (#(" " 0 1 (help-echo cider--help-echo fontified t cider-locals nil)) . -260) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) 261) nil (25771 10809 800580 0) 0 nil])
([nil nil ((#("    " 0 4 (help-echo cider--help-echo fontified t cider-locals nil)) . 252) (undo-tree-id764 . -4) (undo-tree-id765 . -4) (undo-tree-id766 . -4) (undo-tree-id767 . -4) (undo-tree-id768 . -4) (undo-tree-id769 . -4) (undo-tree-id770 . -4) (undo-tree-id771 . -4) (undo-tree-id772 . -4) (undo-tree-id773 . -4) (undo-tree-id774 . -4) (undo-tree-id775 . -4) (undo-tree-id776 . -4) (undo-tree-id777 . -4) (undo-tree-id778 . -4) (undo-tree-id779 . -4) (undo-tree-id780 . -4) (undo-tree-id781 . -4) (undo-tree-id782 . -4) (undo-tree-id783 . -4) (undo-tree-id784 . -4) (undo-tree-id785 . -4) (undo-tree-id786 . -4) (undo-tree-id787 . -4) (undo-tree-id788 . -4) (undo-tree-id789 . -4) (undo-tree-id790 . -4) (undo-tree-id791 . -4) (undo-tree-id792 . -4) (undo-tree-id793 . -4) (undo-tree-id794 . -4) (undo-tree-id795 . -4) (undo-tree-id796 . -4) (undo-tree-id797 . -4) (undo-tree-id798 . -4) (undo-tree-id799 . -4) (undo-tree-id800 . -4) (undo-tree-id801 . -4) (undo-tree-id802 . -4) (undo-tree-id803 . -4) (undo-tree-id804 . -4) (undo-tree-id805 . -4) (undo-tree-id806 . -4) (undo-tree-id807 . -4) (undo-tree-id808 . -4) (undo-tree-id809 . -4) (undo-tree-id810 . -4) (undo-tree-id811 . -4) (undo-tree-id812 . -4) (undo-tree-id813 . -4) (undo-tree-id814 . -4) (undo-tree-id815 . -4) (undo-tree-id816 . -4) (undo-tree-id817 . -4) (undo-tree-id818 . -4) (undo-tree-id819 . -4) (undo-tree-id820 . -4) (undo-tree-id821 . -4) (undo-tree-id822 . -4) (undo-tree-id823 . -4) (undo-tree-id824 . -4) (undo-tree-id825 . -4) (undo-tree-id826 . -4) (undo-tree-id827 . -4) (undo-tree-id828 . -4) (undo-tree-id829 . -4) (undo-tree-id830 . -4) (undo-tree-id831 . -4) (undo-tree-id832 . -4) (undo-tree-id833 . -4) (undo-tree-id834 . -4) (undo-tree-id835 . -4) (undo-tree-id836 . -4) (undo-tree-id837 . -4) (undo-tree-id838 . -4) (undo-tree-id839 . -4) (undo-tree-id840 . -4) (undo-tree-id841 . -4) (undo-tree-id842 . -4) (undo-tree-id843 . -4) (undo-tree-id844 . -4) (undo-tree-id845 . -4) (undo-tree-id846 . -4) (undo-tree-id847 . -4) (undo-tree-id848 . -4) (undo-tree-id849 . -4) (undo-tree-id850 . -4) (undo-tree-id851 . -4) (undo-tree-id852 . -4) (undo-tree-id853 . -4) (undo-tree-id854 . -4) (undo-tree-id855 . -4) (undo-tree-id856 . -4) (undo-tree-id857 . -4) (undo-tree-id858 . -4) (undo-tree-id859 . -4) (undo-tree-id860 . -4) (undo-tree-id861 . -4) (undo-tree-id862 . -4) (undo-tree-id863 . -4) (undo-tree-id864 . -4) (undo-tree-id865 . -4) (undo-tree-id866 . -4) (undo-tree-id867 . -4) (undo-tree-id868 . -4) (undo-tree-id869 . -4) (undo-tree-id870 . -4) (undo-tree-id871 . -4) (undo-tree-id872 . -4) (undo-tree-id873 . -4) (undo-tree-id874 . -4) (undo-tree-id875 . -4) (undo-tree-id876 . -4) (undo-tree-id877 . -4) (undo-tree-id878 . -4) (undo-tree-id879 . -4) (undo-tree-id880 . -4) (undo-tree-id881 . -4) (undo-tree-id882 . -4) (undo-tree-id883 . -4) (undo-tree-id884 . -4) (undo-tree-id885 . -4) (undo-tree-id886 . -4) (undo-tree-id887 . -4) (undo-tree-id888 . -4) (undo-tree-id889 . -4) (undo-tree-id890 . -4) (undo-tree-id891 . -4) (undo-tree-id892 . -4) (undo-tree-id893 . -4) (undo-tree-id894 . -4) (undo-tree-id895 . -4) (undo-tree-id896 . -4) (undo-tree-id897 . -4) (undo-tree-id898 . -4) (undo-tree-id899 . -4) (undo-tree-id900 . -4) (undo-tree-id901 . -4) (undo-tree-id902 . -4) (undo-tree-id903 . -4) (undo-tree-id904 . -4) (undo-tree-id905 . -4) (undo-tree-id906 . -4) (undo-tree-id907 . -4) (undo-tree-id908 . -4) (undo-tree-id909 . -4) (undo-tree-id910 . -4) (undo-tree-id911 . -4) (undo-tree-id912 . -4) (undo-tree-id913 . -4) (undo-tree-id914 . -4) (undo-tree-id915 . -4) (undo-tree-id916 . -4) (undo-tree-id917 . -4) (undo-tree-id918 . -4) (undo-tree-id919 . -4) (undo-tree-id920 . -4) (undo-tree-id921 . -4) (undo-tree-id922 . -4) (undo-tree-id923 . -4) (undo-tree-id924 . -4) (undo-tree-id925 . -4) (undo-tree-id926 . -4) (undo-tree-id927 . -4) (undo-tree-id928 . -4) (undo-tree-id929 . -4) (undo-tree-id930 . -4) (undo-tree-id931 . -4) (undo-tree-id932 . -4) (undo-tree-id933 . -4) (undo-tree-id934 . -4) (undo-tree-id935 . -4) (undo-tree-id936 . -4) (undo-tree-id937 . -4) (undo-tree-id938 . -4) (undo-tree-id939 . -4) (undo-tree-id940 . -4) (undo-tree-id941 . -4) (undo-tree-id942 . -4) (undo-tree-id943 . -4) (undo-tree-id944 . -4) (undo-tree-id945 . -4) (undo-tree-id946 . -4) (undo-tree-id947 . -4) (undo-tree-id948 . -4) (undo-tree-id949 . -4) (undo-tree-id950 . -4) (undo-tree-id951 . -4) (undo-tree-id952 . -4) (undo-tree-id953 . -4) (undo-tree-id954 . -4) (undo-tree-id955 . -4) (undo-tree-id956 . -4) (undo-tree-id957 . -4) (undo-tree-id958 . -4) (undo-tree-id959 . -4) (undo-tree-id960 . -4) (undo-tree-id961 . -4) (undo-tree-id962 . -4) (undo-tree-id963 . -4) (undo-tree-id964 . -4) (undo-tree-id965 . -4) (undo-tree-id966 . -4) (undo-tree-id967 . -4) (undo-tree-id968 . -4) (undo-tree-id969 . -4) (undo-tree-id970 . -4) (undo-tree-id971 . -4) (undo-tree-id972 . -4) (undo-tree-id973 . -4) (undo-tree-id974 . -4) (undo-tree-id975 . -4) (undo-tree-id976 . -4) (undo-tree-id977 . -4) (undo-tree-id978 . -4) (undo-tree-id979 . -4) (undo-tree-id980 . -4) (undo-tree-id981 . -4) (undo-tree-id982 . -4) (undo-tree-id983 . -4) (undo-tree-id984 . -4) (undo-tree-id985 . -4) (undo-tree-id986 . -4) (undo-tree-id987 . -4) (undo-tree-id988 . -4) (undo-tree-id989 . -4) (undo-tree-id990 . -4) (undo-tree-id991 . -4) (undo-tree-id992 . -4) (undo-tree-id993 . -4) (undo-tree-id994 . -4) (undo-tree-id995 . -4)) nil (25771 10809 800398 0) 0 nil])
([nil nil ((#("
" 0 1 (help-echo cider--help-echo fontified t cider-locals nil)) . -251) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) 252) nil (25771 10809 800280 0) 0 nil])
([nil nil ((#("    :user {:type (non-null (list :User))}" 0 4 (fontified t) 4 5 (face clojure-keyword-face fontified t) 5 9 (face clojure-keyword-face fontified t) 9 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-5-face) fontified t) 11 12 (face clojure-keyword-face fontified t) 12 16 (face clojure-keyword-face fontified t) 16 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-6-face) fontified t) 18 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-7-face) fontified t) 28 33 (fontified t) 33 34 (face clojure-keyword-face fontified t) 34 38 (face clojure-keyword-face fontified t) 38 39 (face (rainbow-delimiters-depth-7-face) fontified t) 39 40 (face (rainbow-delimiters-depth-6-face) fontified t) 40 41 (face (rainbow-delimiters-depth-5-face) fontified t)) . 974) (undo-tree-id122 . -41) (t 25771 10809 804787 240000)) nil (25774 11426 388895 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -973) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) 974) nil (25774 11426 388889 0) 0 nil])
([nil nil ((#("username" 0 8 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t)) . -1126) (undo-tree-id2 . -8) 1134 (t 25774 11426 393119 15000)) nil (25780 20090 111138 0) 0 nil])
([nil nil ((1126 . 1128)) nil (25780 20090 111137 0) 0 nil])
([nil nil ((#("String" 0 6 (cider-locals nil help-echo cider--help-echo fontified t)) . -1136) (undo-tree-id1 . -6) 1142) nil (25780 20090 111136 0) 0 nil])
([nil nil ((1136 . 1139)) nil (25780 20090 111135 0) 0 nil])
([nil nil ((#("non" 0 3 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -1136) (undo-tree-id0 . -3) 1139) nil (25780 20090 111133 0) 0 nil])
([nil nil ((1136 . 1139)) nil (25780 20517 963042 0) 0 nil])
([nil nil ((#("    :user {:type (non-null (list :User))}" 0 4 (cider-locals nil help-echo cider--help-echo fontified t) 4 5 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 5 7 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 7 9 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 9 10 (cider-locals nil help-echo cider--help-echo fontified t) 10 11 (face (rainbow-delimiters-depth-5-face) cider-locals nil help-echo cider--help-echo fontified t) 11 12 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 12 16 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 16 17 (cider-locals nil help-echo cider--help-echo fontified t) 17 18 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo fontified t) 18 27 (cider-locals nil help-echo cider--help-echo fontified t) 27 28 (face (rainbow-delimiters-depth-7-face) cider-locals nil help-echo cider--help-echo fontified t) 28 32 (face font-lock-function-name-face cider-locals nil help-echo cider--help-echo fontified t) 32 33 (cider-locals nil help-echo cider--help-echo fontified t) 33 34 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 34 38 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 38 39 (face (rainbow-delimiters-depth-7-face) cider-locals nil help-echo cider--help-echo fontified t) 39 40 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo fontified t) 40 41 (face (rainbow-delimiters-depth-5-face) cider-locals nil help-echo cider--help-echo fontified t)) . 512) (undo-tree-id79 . -4) (undo-tree-id80 . -4) (undo-tree-id81 . -41) (t 25780 20090 115973 439000)) nil (25780 20533 923322 0) 0 nil] [nil nil ((519 . 521) (t 25780 20090 115973 439000)) ((#(" m" 0 2 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . 519) (undo-tree-id3 . -2)) (25780 20517 962561 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . -511) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) 512) nil (25780 20533 923317 0) 0 nil])
nil
([nil nil ((#(":authProvider {:type (non-null String)
                   :description \"Auth provider\"}" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 1 13 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 13 14 (cider-locals nil help-echo cider--help-echo fontified t) 14 15 (face (rainbow-delimiters-depth-5-face) cider-locals nil help-echo cider--help-echo fontified t) 15 16 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 16 20 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 20 21 (cider-locals nil help-echo cider--help-echo fontified t) 21 22 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo fontified t) 22 37 (cider-locals nil help-echo cider--help-echo fontified t) 37 38 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo fontified t) 38 39 (cider-locals nil help-echo cider--help-echo fontified t) 39 58 (cider-locals nil help-echo cider--help-echo fontified t) 58 59 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 59 70 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 70 71 (cider-locals nil help-echo cider--help-echo fontified t) 71 86 (face font-lock-string-face cider-locals nil help-echo cider--help-echo fontified t) 86 87 (face (rainbow-delimiters-depth-5-face) cider-locals nil help-echo cider--help-echo fontified t)) . 424) (undo-tree-id358 . -87) (undo-tree-id359 . -87) (undo-tree-id360 . -87) (undo-tree-id361 . -87) (undo-tree-id362 . -87) (t 25780 20533 927637 88000)) nil (25780 20552 506581 0) 0 nil])
([nil nil ((#("    " 0 4 (cider-locals nil help-echo cider--help-echo fontified t)) . 420) (undo-tree-id243 . -4) (undo-tree-id244 . -4) (undo-tree-id245 . -4) (undo-tree-id246 . -4) (undo-tree-id247 . -4) (undo-tree-id248 . -4) (undo-tree-id249 . -4) (undo-tree-id250 . -4) (undo-tree-id251 . -4) (undo-tree-id252 . -4) (undo-tree-id253 . -4) (undo-tree-id254 . -4) (undo-tree-id255 . -4) (undo-tree-id256 . -4) (undo-tree-id257 . -4) (undo-tree-id258 . -4) (undo-tree-id259 . -4) (undo-tree-id260 . -4) (undo-tree-id261 . -4) (undo-tree-id262 . -4) (undo-tree-id263 . -4) (undo-tree-id264 . -4) (undo-tree-id265 . -4) (undo-tree-id266 . -4) (undo-tree-id267 . -4) (undo-tree-id268 . -4) (undo-tree-id269 . -4) (undo-tree-id270 . -4) (undo-tree-id271 . -4) (undo-tree-id272 . -4) (undo-tree-id273 . -4) (undo-tree-id274 . -4) (undo-tree-id275 . -4) (undo-tree-id276 . -4) (undo-tree-id277 . -4) (undo-tree-id278 . -4) (undo-tree-id279 . -4) (undo-tree-id280 . -4) (undo-tree-id281 . -4) (undo-tree-id282 . -4) (undo-tree-id283 . -4) (undo-tree-id284 . -4) (undo-tree-id285 . -4) (undo-tree-id286 . -4) (undo-tree-id287 . -4) (undo-tree-id288 . -4) (undo-tree-id289 . -4) (undo-tree-id290 . -4) (undo-tree-id291 . -4) (undo-tree-id292 . -4) (undo-tree-id293 . -4) (undo-tree-id294 . -4) (undo-tree-id295 . -4) (undo-tree-id296 . -4) (undo-tree-id297 . -4) (undo-tree-id298 . -4) (undo-tree-id299 . -4) (undo-tree-id300 . -4) (undo-tree-id301 . -4) (undo-tree-id302 . -4) (undo-tree-id303 . -4) (undo-tree-id304 . -4) (undo-tree-id305 . -4) (undo-tree-id306 . -4) (undo-tree-id307 . -4) (undo-tree-id308 . -4) (undo-tree-id309 . -4) (undo-tree-id310 . -4) (undo-tree-id311 . -4) (undo-tree-id312 . -4) (undo-tree-id313 . -4) (undo-tree-id314 . -4) (undo-tree-id315 . -4) (undo-tree-id316 . -4) (undo-tree-id317 . -4) (undo-tree-id318 . -4) (undo-tree-id319 . -4) (undo-tree-id320 . -4) (undo-tree-id321 . -4) (undo-tree-id322 . -4) (undo-tree-id323 . -4) (undo-tree-id324 . -4) (undo-tree-id325 . -4) (undo-tree-id326 . -4) (undo-tree-id327 . -4) (undo-tree-id328 . -4) (undo-tree-id329 . -4) (undo-tree-id330 . -4) (undo-tree-id331 . -4) (undo-tree-id332 . -4) (undo-tree-id333 . -4) (undo-tree-id334 . -4) (undo-tree-id335 . -4) (undo-tree-id336 . -4) (undo-tree-id337 . -4) (undo-tree-id338 . -4) (undo-tree-id339 . -4) (undo-tree-id340 . -4) (undo-tree-id341 . -4) (undo-tree-id342 . -4) (undo-tree-id343 . -4) (undo-tree-id344 . -4) (undo-tree-id345 . -4) (undo-tree-id346 . -4) (undo-tree-id347 . -4) (undo-tree-id348 . -4) (undo-tree-id349 . -4) (undo-tree-id350 . -4) (undo-tree-id351 . -4) (undo-tree-id352 . -4) (undo-tree-id353 . -4) (undo-tree-id354 . -4) (undo-tree-id355 . -4) (undo-tree-id356 . -4) (undo-tree-id357 . -4)) nil (25780 20552 506577 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . -419) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) 420) nil (25780 20552 506521 0) 0 nil])
([nil nil ((1241 . 1246) (t 25780 20552 510875 385000)) nil (25780 43339 153519 0) 0 nil])
([nil nil ((1246 . 1257)) nil (25780 43339 153518 0) 0 nil])
([nil nil ((1257 . 1262)) nil (25780 43339 153517 0) 0 nil])
([nil nil ((1262 . 1264)) nil (25780 43339 153517 0) 0 nil])
([nil nil ((1263 . 1277)) nil (25780 43339 153516 0) 0 nil])
([nil nil ((1277 . 1283)) nil (25780 43339 153516 0) 0 nil])
([nil nil ((1283 . 1290)) nil (25780 43339 153515 0) 0 nil])
([nil nil ((#("i" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1288) (undo-tree-id370 . -1) (#("r" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1289) (undo-tree-id371 . -1) 1290) nil (25780 43339 153515 0) 0 nil])
([nil nil ((1288 . 1296)) nil (25780 43339 153514 0) 0 nil])
([nil nil ((1296 . 1298)) nil (25780 43339 153513 0) 0 nil])
([nil nil ((1297 . 1311)) nil (25780 43339 153512 0) 0 nil])
([nil nil ((#("by " 0 3 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1308) (undo-tree-id369 . -3) 1311) nil (25780 43339 153512 0) 0 nil])
([nil nil ((#("psot " 0 5 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1303) (undo-tree-id368 . -5) 1308) nil (25780 43339 153511 0) 0 nil])
([nil nil ((1303 . 1314)) nil (25780 43339 153510 0) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1313) (undo-tree-id367 . -1) 1314) nil (25780 43339 153510 0) 0 nil])
([nil nil ((1313 . 1320)) nil (25780 43339 153508 0) 0 nil])
([nil nil ((#("Comment" 0 7 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1313) (undo-tree-id366 . -7) 1320) nil (25780 43339 153508 0) 0 nil])
([nil nil ((#("by " 0 3 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1310) (undo-tree-id365 . -3) 1313) nil (25780 43339 153507 0) 0 nil])
([nil nil ((#("a " 0 2 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1308) (undo-tree-id364 . -2) 1310) nil (25780 43339 153505 0) 0 nil])
([nil nil ((#("post " 0 5 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1303) (undo-tree-id363 . -5) 1308) nil (25780 43339 153503 0) 0 nil])
([nil nil ((1303 . 1316)) nil (25780 43339 153493 0) 0 nil])
([nil nil ((1317 . 1323) (t 25780 43339 158269 626000)) nil (25780 43351 9349 0) 0 nil])
([nil nil ((1323 . 1328)) nil (25780 43351 9348 0) 0 nil])
([nil nil ((1328 . 1334)) nil (25780 43351 9348 0) 0 nil])
([nil nil ((1334 . 1336)) nil (25780 43351 9347 0) 0 nil])
([nil nil ((1335 . 1339)) nil (25780 43351 9347 0) 0 nil])
([nil nil ((1339 . 1341)) nil (25780 43351 9346 0) 0 nil])
([nil nil ((1340 . 1348)) nil (25780 43351 9345 0) 0 nil])
([nil nil ((#("N" 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1347) (undo-tree-id372 . -1) 1348) nil (25780 43351 9344 0) 0 nil])
([nil nil ((1347 . 1349)) nil (25780 43351 9335 0) 0 nil])
([nil nil ((1008 . 1013) (t 25780 43351 13729 843000)) nil (25786 47577 772755 0) 0 nil])
([nil nil ((1013 . 1021)) nil (25786 47577 772754 0) 0 nil])
([nil nil ((1013 . 1026) (#(":GetAuth" 0 1 (fontified t help-echo cider--help-echo ws-butler-chg chg cider-locals nil face clojure-keyword-face) 1 8 (fontified t help-echo cider--help-echo ws-butler-chg chg cider-locals nil face clojure-keyword-face)) . -1013) (undo-tree-id8 . -8) 1021) nil (25786 47577 772753 0) 0 nil])
([nil nil ((#("L" 0 1 (fontified t ws-butler-chg chg help-echo cider--help-echo cider-locals nil face clojure-keyword-face)) . -1021) (undo-tree-id3 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg help-echo cider--help-echo cider-locals nil face clojure-keyword-face)) . -1022) (undo-tree-id4 . -1) (#("v" 0 1 (fontified t ws-butler-chg chg help-echo cider--help-echo cider-locals nil face clojure-keyword-face)) . -1023) (undo-tree-id5 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg help-echo cider--help-echo cider-locals nil face clojure-keyword-face)) . -1024) (undo-tree-id6 . -1) (#("l" 0 1 (fontified t ws-butler-chg chg help-echo cider--help-echo cider-locals nil face clojure-keyword-face)) . -1025) (undo-tree-id7 . -1) 1026) nil (25786 47577 772752 0) 0 nil])
([nil nil ((1021 . 1026)) nil (25786 47577 772749 0) 0 nil])
([nil nil ((1026 . 1028)) nil (25786 47577 772748 0) 0 nil])
([nil nil ((1027 . 1028)) nil (25786 47577 772748 0) 0 nil])
([nil nil ((#("L" 0 1 (fontified t ws-butler-chg chg help-echo cider--help-echo cider-locals nil)) . -1027) (undo-tree-id2 . -1) 1028) nil (25786 47577 772747 0) 0 nil])
([nil nil ((1027 . 1038)) nil (25786 47577 772746 0) 0 nil])
([nil nil ((1038 . 1044)) nil (25786 47577 772746 0) 0 nil])
([nil nil ((1044 . 1046)) nil (25786 47577 772745 0) 0 nil])
([nil nil ((#("D" 0 1 (fontified t ws-butler-chg chg help-echo cider--help-echo cider-locals nil face clojure-keyword-face)) . -1045) (undo-tree-id1 . -1) 1046) nil (25786 47577 772745 0) 0 nil])
([nil nil ((1045 . 1057)) nil (25786 47577 772744 0) 0 nil])
([nil nil ((1057 . 1059)) nil (25786 47577 772743 0) 0 nil])
([nil nil ((1058 . 1068)) nil (25786 47577 772743 0) 0 nil])
([nil nil ((1069 . 1075)) nil (25786 47577 772742 0) 0 nil])
([nil nil ((1075 . 1080)) nil (25786 47577 772734 0) 0 nil])
([nil nil ((1080 . 1086)) nil (25786 47577 772733 0) 0 nil])
([nil nil ((1086 . 1088)) nil (25786 47577 772733 0) 0 nil])
([nil nil ((1087 . 1089)) nil (25786 47577 772732 0) 0 nil])
([nil nil ((#("t" 0 1 (fontified t ws-butler-chg chg help-echo cider--help-echo cider-locals nil face clojure-keyword-face)) . -1088) (undo-tree-id0 . -1) 1089) nil (25786 47577 772731 0) 0 nil])
([nil nil ((1088 . 1091)) nil (25786 47577 772717 0) 0 nil])
([nil nil ((1091 . 1093)) nil (25786 47577 772716 0) 0 nil])
([nil nil ((1092 . 1101)) nil (25786 47577 772712 0) 0 nil])
([nil nil ((1450 . 1453) (t 25786 47577 779459 550000)) nil (25798 1355 410858 0) 0 nil])
([nil nil ((1451 . 1454) (#("  " 0 2 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . 1451) (undo-tree-id0 . -2) (undo-tree-id1 . -2) (undo-tree-id2 . -2) (undo-tree-id3 . -2) (undo-tree-id4 . -2) (undo-tree-id5 . -2) (undo-tree-id6 . -2) (undo-tree-id7 . -2) 1453) nil (25798 1355 410857 0) 0 nil])
([nil nil ((1454 . 1463)) nil (25798 1355 410841 0) 0 nil])
([nil nil ((1463 . 1466)) nil (25798 1355 410840 0) 0 nil])
([nil nil ((1466 . 1468)) nil (25798 1355 410840 0) 0 nil])
([nil nil ((1467 . 1474)) nil (25798 1355 410839 0) 0 nil])
([nil nil ((1474 . 1478)) nil (25798 1355 410835 0) 0 nil])
([nil nil ((1478 . 1480) (t 25798 1355 416904 293000)) nil (25798 1359 932850 0) 0 nil])
([nil nil ((1479 . 1480)) nil (25798 1359 932846 0) 0 nil])
([nil nil ((1480 . 1488) (t 25798 1359 936975 636000)) nil (25798 1376 93134 0) 0 nil])
([nil nil ((1488 . 1493) (t 25798 1376 97627 826000)) nil (25798 1381 977938 0) 0 nil])
([nil nil ((1493 . 1495)) nil (25798 1381 977937 0) 0 nil])
([nil nil ((1494 . 1500)) nil (25798 1381 977933 0) 0 nil])
([nil nil ((1500 . 1502) (t 25798 1381 982091 709000)) nil (25798 1384 319054 0) 0 nil])
([nil nil ((#("a" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -1501) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) 1502) nil (25798 1384 319052 0) 0 nil])
([nil nil ((1501 . 1505)) nil (25798 1384 319031 0) 0 nil])
([nil nil ((1505 . 1511) (t 25798 1384 323239 25000)) nil (25798 1395 3717 0) 0 nil])
([nil nil ((1511 . 1524)) nil (25798 1395 3716 0) 0 nil])
([nil nil ((1524 . 1526)) nil (25798 1395 3715 0) 0 nil])
([nil nil ((1525 . 1546)) nil (25798 1395 3715 0) 0 nil])
([nil nil ((1546 . 1548)) nil (25798 1395 3714 0) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1545) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (#("e" 0 1 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1546) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (#(" " 0 1 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1547) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) 1548) nil (25798 1395 3708 0) 0 nil])
([nil nil ((1545 . 1552)) nil (25798 1395 3591 0) 0 nil])
([nil nil ((1553 . 1559) (t 25798 1395 7914 725000)) nil (25798 1400 744861 0) 0 nil])
([nil nil ((1559 . 1561)) nil (25798 1400 744860 0) 0 nil])
([nil nil ((#("r" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -1560) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) 1561) nil (25798 1400 744859 0) 0 nil])
([nil nil ((1560 . 1564)) nil (25798 1400 744841 0) 0 nil])
([nil nil ((#("s" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -1562) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (#("g" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -1563) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) 1564) nil (25798 1400 744837 0) 0 nil])
([nil nil ((1562 . 1564)) nil (25798 1400 744768 0) 0 nil])
([nil nil ((1564 . 1570) (t 25798 1400 749281 739000)) nil (25798 1406 424362 0) 0 nil])
([nil nil ((1570 . 1572)) nil (25798 1406 424361 0) 0 nil])
([nil nil ((1571 . 1572)) nil (25798 1406 424356 0) 0 nil])
([nil nil ((1572 . 1576) (t 25798 1406 428855 653000)) nil (25798 1549 777686 0) 0 nil])
([nil nil ((#("user" 0 4 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -1572) (undo-tree-id498 . -4) (undo-tree-id499 . -4) (undo-tree-id500 . -4) (undo-tree-id501 . -4) (undo-tree-id502 . -4) (undo-tree-id503 . -4) (undo-tree-id504 . -4) (undo-tree-id505 . -4) (undo-tree-id506 . -4) (undo-tree-id507 . -4) (undo-tree-id508 . -4) (undo-tree-id509 . -4) (undo-tree-id510 . -4) (undo-tree-id511 . -4) (undo-tree-id512 . -4) (undo-tree-id513 . -4) (undo-tree-id514 . -4) (undo-tree-id515 . -4) (undo-tree-id516 . -4) (undo-tree-id517 . -4) 1576) nil (25798 1549 777684 0) 0 nil])
([nil nil ((1572 . 1578)) nil (25798 1549 777666 0) 0 nil])
([nil nil ((1578 . 1585) (t 25798 1549 782086 325000)) nil (25798 1570 614556 0) 0 nil])
([nil nil ((1585 . 1587)) nil (25798 1570 614555 0) 0 nil])
([nil nil ((#("x" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -1586) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) 1587) nil (25798 1570 892314 0) 0 nil])
([nil nil ((1578 . 1579)) nil (25798 1580 16914 0) 0 nil] [nil nil ((1578 . 1579)) ((#(" " 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . 1578)) (25798 1570 614753 0) 0 nil])
([nil nil ((1579 . 1581)) nil (25798 1580 16913 0) 0 nil])
([nil nil ((1588 . 1589)) ((#(":" 0 1 (cider-locals nil fontified t ws-butler-chg chg help-echo cider--help-echo)) . 1588) (undo-tree-id618 . -1)) (25798 1570 614507 0) 0 nil])
([nil nil ((1580 . 1586)) nil (25798 1580 16913 0) 0 nil])
nil
([nil nil ((1586 . 1588)) nil (25798 1580 16912 0) 0 nil])
([nil nil ((1587 . 1590)) nil (25798 1580 16912 0) 0 nil])
([nil nil ((1590 . 1598)) nil (25798 1580 16912 0) 0 nil])
([nil nil ((#("N" 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1597) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) 1598) nil (25798 1580 16910 0) 0 nil])
([nil nil ((1597 . 1599)) nil (25798 1580 16891 0) 0 nil])
([nil nil ((1609 . 1615) (t 25798 1580 21153 690000)) nil (25798 1598 6667 0) 0 nil])
([nil nil ((1615 . 1617)) nil (25798 1598 6666 0) 0 nil])
([nil nil ((1616 . 1622)) nil (25798 1598 6666 0) 0 nil])
([nil nil ((1622 . 1624)) nil (25798 1598 6665 0) 0 nil])
([nil nil ((1623 . 1638)) nil (25798 1598 6660 0) 0 nil])
([nil nil ((1640 . 1647) (t 25798 1598 10713 774000)) nil (25798 1601 240106 0) 0 nil])
([nil nil ((1647 . 1648)) nil (25798 1601 240102 0) 0 nil])
([nil nil ((1648 . 1658) (t 25798 1601 244433 89000)) nil (25798 1610 163971 0) 0 nil])
([nil nil ((1658 . 1660)) nil (25798 1610 163971 0) 0 nil])
([nil nil ((1659 . 1665)) nil (25798 1610 163970 0) 0 nil])
([nil nil ((1665 . 1667)) nil (25798 1610 163970 0) 0 nil])
([nil nil ((1666 . 1679)) nil (25798 1610 163965 0) 0 nil])
([nil nil ((#("s" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . -1677) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (#("t" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . -1678) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) 1679 (t 25798 1610 168545 313000)) nil (25798 1611 746737 0) 0 nil])
([nil nil ((1677 . 1678)) nil (25798 1611 746658 0) 0 nil])
([nil nil ((#("Int" 0 3 (cider-locals nil help-echo cider--help-echo fontified t)) . -1596) (undo-tree-id821 . -3) (undo-tree-id822 . -3) (undo-tree-id823 . -3) (undo-tree-id824 . -3) (undo-tree-id825 . -3) (undo-tree-id826 . -3) (undo-tree-id827 . -3) (undo-tree-id828 . -3) (undo-tree-id829 . -3) (undo-tree-id830 . -3) (undo-tree-id831 . -3) (undo-tree-id832 . -3) (undo-tree-id833 . -3) (undo-tree-id834 . -3) (undo-tree-id835 . -3) (undo-tree-id836 . -3) (undo-tree-id837 . -3) (undo-tree-id838 . -3) (undo-tree-id839 . -3) (undo-tree-id840 . -3) (undo-tree-id841 . -3) (undo-tree-id842 . -3) (undo-tree-id843 . -3) (undo-tree-id844 . -3) (undo-tree-id845 . -3) (undo-tree-id846 . -3) (undo-tree-id847 . -3) (undo-tree-id848 . -3) (undo-tree-id849 . -3) (undo-tree-id850 . -3) 1599 (t 25798 1611 751425 204000)) nil (25798 1621 305667 0) 0 nil])
([nil nil ((1596 . 1600)) nil (25798 1621 305645 0) 0 nil])
([nil nil ((#("user" 0 4 (cider-locals nil help-echo cider--help-echo fontified t)) . -1596) (undo-tree-id851 . -4) (undo-tree-id852 . -4) (undo-tree-id853 . -4) (undo-tree-id854 . -4) (undo-tree-id855 . -4) (undo-tree-id856 . -4) (undo-tree-id857 . -4) (undo-tree-id858 . -4) (undo-tree-id859 . -4) (undo-tree-id860 . -4) (undo-tree-id861 . -4) (undo-tree-id862 . -4) (undo-tree-id863 . -4) (undo-tree-id864 . -4) (undo-tree-id865 . -4) (undo-tree-id866 . -4) (undo-tree-id867 . -4) (undo-tree-id868 . -4) (undo-tree-id869 . -4) (undo-tree-id870 . -4) (undo-tree-id871 . -4) (undo-tree-id872 . -4) (undo-tree-id873 . -4) (undo-tree-id874 . -4) (undo-tree-id875 . -4) (undo-tree-id876 . -4) (undo-tree-id877 . -4) (undo-tree-id878 . -4) (undo-tree-id879 . -4) (undo-tree-id880 . -4) (undo-tree-id881 . -4) (undo-tree-id882 . -4) (undo-tree-id883 . -4) (undo-tree-id884 . -4) (undo-tree-id885 . -4) (undo-tree-id886 . -4) (undo-tree-id887 . -4) (undo-tree-id888 . -4) (undo-tree-id889 . -4) (undo-tree-id890 . -4) (undo-tree-id891 . -4) (undo-tree-id892 . -4) (undo-tree-id893 . -4) (undo-tree-id894 . -4) (undo-tree-id895 . -4) (undo-tree-id896 . -4) (undo-tree-id897 . -4) (undo-tree-id898 . -4) (undo-tree-id899 . -4) (undo-tree-id900 . -4) (undo-tree-id901 . -4) (undo-tree-id902 . -4) 1600 (t 25798 1621 310231 75000)) nil (25798 1622 905064 0) 0 nil])
([nil nil ((1596 . 1600)) nil (25798 1622 905030 0) 0 nil])
([nil nil ((1596 . 1597) (t 25798 1622 909802 948000)) nil (25798 1629 161254 0) 0 nil])
([nil nil ((#("a" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t)) . 1480) (t 25798 1629 165425 73000)) nil (25798 1675 938735 0) 0 nil])
([nil nil ((1480 . 1481)) nil (25798 1675 938731 0) 0 nil])
([nil nil ((#("{:AddToken
    {:type :Auth
     :description \"Add or update a users token\"
     :args
     {:userId {:type (non-null :User)}
      :token {:type (non-null String)}
      :authLevel {:type (non-null Int)}}}}" 0 1 (face (rainbow-delimiters-depth-4-face) cider-locals nil help-echo cider--help-echo fontified t) 1 2 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 2 3 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 3 4 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 4 10 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 10 11 (cider-locals nil help-echo cider--help-echo fontified t) 11 15 (cider-locals nil fontified t help-echo cider--help-echo) 15 16 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 16 17 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 17 21 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 21 22 (cider-locals nil fontified t help-echo cider--help-echo) 22 23 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 23 27 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 27 28 (cider-locals nil fontified t help-echo cider--help-echo) 28 33 (cider-locals nil fontified t help-echo cider--help-echo) 33 34 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 34 45 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 45 46 (cider-locals nil fontified t help-echo cider--help-echo) 46 74 (face font-lock-string-face cider-locals nil fontified t help-echo cider--help-echo) 74 75 (face font-lock-string-face cider-locals nil fontified t help-echo cider--help-echo) 75 76 (cider-locals nil fontified t help-echo cider--help-echo) 76 81 (cider-locals nil fontified t help-echo cider--help-echo) 81 82 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 82 86 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 86 87 (cider-locals nil fontified t help-echo cider--help-echo) 87 92 (cider-locals nil fontified t help-echo cider--help-echo) 92 93 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 93 94 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 94 100 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 100 101 (cider-locals nil fontified t help-echo cider--help-echo) 101 102 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 102 103 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 103 107 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 107 108 (cider-locals nil fontified t help-echo cider--help-echo) 108 109 (face (rainbow-delimiters-depth-8-face) cider-locals nil fontified t help-echo cider--help-echo) 109 118 (cider-locals nil fontified t help-echo cider--help-echo) 118 119 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 119 123 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 123 124 (face (rainbow-delimiters-depth-8-face) cider-locals nil fontified t help-echo cider--help-echo) 124 125 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 125 126 (cider-locals nil fontified t help-echo cider--help-echo) 126 132 (cider-locals nil fontified t help-echo cider--help-echo) 132 133 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 133 138 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 138 139 (cider-locals nil fontified t help-echo cider--help-echo) 139 140 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 140 141 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 141 145 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 145 146 (cider-locals nil fontified t help-echo cider--help-echo) 146 147 (face (rainbow-delimiters-depth-8-face) cider-locals nil fontified t help-echo cider--help-echo) 147 162 (cider-locals nil fontified t help-echo cider--help-echo) 162 163 (face (rainbow-delimiters-depth-8-face) cider-locals nil fontified t help-echo cider--help-echo) 163 164 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 164 165 (cider-locals nil fontified t help-echo cider--help-echo) 165 171 (cider-locals nil fontified t help-echo cider--help-echo) 171 172 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 172 181 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 181 182 (cider-locals nil fontified t help-echo cider--help-echo) 182 183 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 183 184 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 184 188 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 188 189 (cider-locals nil fontified t help-echo cider--help-echo) 189 190 (face (rainbow-delimiters-depth-8-face) cider-locals nil fontified t help-echo cider--help-echo) 190 201 (cider-locals nil fontified t help-echo cider--help-echo) 201 202 (cider-locals nil fontified t help-echo cider--help-echo) 202 203 (face (rainbow-delimiters-depth-8-face) cider-locals nil fontified t help-echo cider--help-echo) 203 204 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 204 205 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 205 206 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 206 207 (face (rainbow-delimiters-depth-4-face) cider-locals nil fontified t help-echo cider--help-echo)) . 1478) (undo-tree-id1021 . -94) (undo-tree-id1022 . -94) (undo-tree-id1023 . -118) (undo-tree-id1024 . -120) (undo-tree-id1025 . -3) (undo-tree-id1026 . -3) (undo-tree-id1027 . 207) (undo-tree-id1028 . -1) (undo-tree-id1029 . 1) (undo-tree-id1030 . -207) (t 25798 1675 943090 769000)) nil (25798 1801 397163 0) 0 nil])
([nil nil ((1478 . 1480)) nil (25798 1801 397159 0) 0 nil])
([nil nil ((1479 . 1482)) nil (25798 1801 397159 0) 0 nil])
([nil nil ((#("a" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1480) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (#("d" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1481) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) 1482) nil (25798 1801 397155 0) 0 nil])
([nil nil ((1480 . 1490)) nil (25798 1801 397100 0) 0 nil])
([nil nil ((1490 . 1495) (t 25798 1801 401908 725000)) nil (25798 1809 369404 0) 0 nil])
([nil nil ((1495 . 1497) (t 25798 1809 373942 120000)) nil (25798 1813 835692 0) 0 nil])
([nil nil ((1496 . 1506)) nil (25798 1813 835691 0) 0 nil])
([nil nil ((1502 . 1503)) nil (25798 1813 835688 0) 0 nil])
([nil nil ((1507 . 1513) (t 25798 1813 840017 314000)) nil (25798 1819 737865 0) 0 nil])
([nil nil ((1513 . 1526)) nil (25798 1819 737864 0) 0 nil])
([nil nil ((1526 . 1528)) nil (25798 1819 737863 0) 0 nil])
([nil nil ((1527 . 1537)) nil (25798 1819 737860 0) 0 nil])
([nil nil ((1538 . 1544) (t 25798 1819 742648 380000)) nil (25798 1828 353900 0) 0 nil])
([nil nil ((1544 . 1549)) nil (25798 1828 353900 0) 0 nil])
([nil nil ((1549 . 1555)) nil (25798 1828 353899 0) 0 nil])
([nil nil ((1555 . 1557)) nil (25798 1828 353896 0) 0 nil])
([nil nil ((1556 . 1557) (t 25798 1828 357921 511000)) nil (25798 1829 862449 0) 0 nil])
([nil nil ((1557 . 1563) (t 25798 1829 866842 257000)) nil (25798 1834 824043 0) 0 nil])
([nil nil ((1563 . 1564) (t 25798 1834 828322 344000)) nil (25798 1838 557493 0) 0 nil])
([nil nil ((1564 . 1566)) nil (25798 1838 557492 0) 0 nil])
([nil nil ((1565 . 1571)) nil (25798 1838 557489 0) 0 nil])
([nil nil ((1571 . 1573) (t 25798 1838 561739 497000)) nil (25798 1844 182492 0) 0 nil])
([nil nil ((1572 . 1576)) nil (25798 1844 182491 0) 0 nil])
([nil nil ((#("u" 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1575) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) 1576) nil (25798 1844 182490 0) 0 nil])
([nil nil ((1575 . 1577)) nil (25798 1844 182479 0) 0 nil])
([nil nil ((#("u" 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1576) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) 1577) nil (25798 1844 182478 0) 0 nil])
([nil nil ((1576 . 1586)) nil (25798 1844 182456 0) 0 nil])
([nil nil ((1588 . 1595) (t 25798 1844 187333 161000)) nil (25798 1847 433308 0) 0 nil])
([nil nil ((1595 . 1596)) nil (25798 1847 433305 0) 0 nil])
([nil nil ((1596 . 1598) (t 25798 1847 437592 244000)) nil (25798 1870 87873 0) 0 nil])
([nil nil ((1598 . 1601)) nil (25798 1870 87872 0) 0 nil])
([nil nil ((#("l" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -1598) (undo-tree-id1198 . -1) (#("t" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -1599) (undo-tree-id1199 . -1) (#("e" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -1600) (undo-tree-id1200 . -1) 1601) nil (25798 1870 87871 0) 0 nil])
([nil nil ((1598 . 1602)) nil (25798 1870 87869 0) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -1601) (undo-tree-id1197 . -1) 1602) nil (25798 1870 87869 0) 0 nil])
([nil nil ((1601 . 1602)) nil (25798 1870 87868 0) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -1601) (undo-tree-id1196 . -1) 1602) nil (25798 1870 87867 0) 0 nil])
([nil nil ((1601 . 1602)) nil (25798 1870 87867 0) 0 nil])
([nil nil ((1602 . 1604)) nil (25798 1870 87866 0) 0 nil])
([nil nil ((1603 . 1609)) nil (25798 1870 87866 0) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1608) (undo-tree-id1195 . -1) 1609) nil (25798 1870 87865 0) 0 nil])
([nil nil ((1608 . 1609)) nil (25798 1870 87864 0) 0 nil])
([nil nil ((1609 . 1611)) nil (25798 1870 87864 0) 0 nil])
([nil nil ((1610 . 1617)) nil (25798 1870 87864 0) 0 nil])
([nil nil ((1617 . 1621)) nil (25798 1870 87863 0) 0 nil])
([nil nil ((#("t" 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1619) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (#("e" 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1620) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) 1621) nil (25798 1870 87860 0) 0 nil])
([nil nil ((1619 . 1624)) nil (25798 1870 87815 0) 0 nil])
([nil nil ((1626 . 1633) (t 25798 1870 92166 251000)) nil (25798 1873 24031 0) 0 nil])
([nil nil ((1633 . 1635)) nil (25798 1875 158491 0) 0 nil] [nil nil ((1633 . 1641)) ((#(";
      " 0 2 (face font-lock-comment-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t) 2 8 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . 1633) (undo-tree-id1201 . -1)) (25798 1873 23835 0) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg delete fontified nil)) . 1633) (#("\"" 0 1 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1633) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) 1634) nil (25798 1875 158488 0) 0 nil])
nil
([nil nil ((1633 . 1634)) nil (25798 1875 158450 0) 0 nil])
([nil nil ((1634 . 1639) (t 25798 1875 162939 357000)) nil (25798 1877 367168 0) 0 nil])
([nil nil ((1639 . 1641) (t 25798 1877 372073 656000)) nil (25798 1891 93680 0) 0 nil])
([nil nil ((1640 . 1647)) nil (25798 1891 93679 0) 0 nil])
([nil nil ((#("o" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1643) (undo-tree-id1271 . -1) (#("p" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1644) (undo-tree-id1272 . -1) (#("e" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1645) (undo-tree-id1273 . -1) (#(" " 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1646) (undo-tree-id1274 . -1) 1647) nil (25798 1891 93679 0) 0 nil])
([nil nil ((1643 . 1646)) nil (25798 1891 93677 0) 0 nil])
([nil nil ((1646 . 1648)) nil (25798 1891 93676 0) 0 nil])
([nil nil ((1647 . 1659)) nil (25798 1891 93676 0) 0 nil])
([nil nil ((#("t" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1657) (undo-tree-id1269 . -1) (#("e" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1658) (undo-tree-id1270 . -1) 1659) nil (25798 1891 93675 0) 0 nil])
([nil nil ((1657 . 1659)) nil (25798 1891 93674 0) 0 nil])
([nil nil ((#("T" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1657) (undo-tree-id1267 . -1) (#("e" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1658) (undo-tree-id1268 . -1) 1659) nil (25798 1891 93673 0) 0 nil])
([nil nil ((1657 . 1659)) nil (25798 1891 93672 0) 0 nil])
([nil nil ((#(":" 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1656) (undo-tree-id1264 . -1) (#("t" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1657) (undo-tree-id1265 . -1) (#("e" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1658) (undo-tree-id1266 . -1) 1659) nil (25798 1891 93671 0) 0 nil])
([nil nil ((1656 . 1657)) nil (25798 1891 93669 0) 0 nil])
([nil nil ((1657 . 1660)) nil (25798 1891 93669 0) 0 nil])
([nil nil ((#("Text" 0 4 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t)) . -1620) (undo-tree-id1263 . -4) 1624) nil (25798 1891 93668 0) 0 nil])
([nil nil ((#(":" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . -1619) (undo-tree-id1262 . -1) 1620) nil (25798 1891 93666 0) 0 nil])
([nil nil ((1619 . 1623)) nil (25798 1891 93653 0) 0 nil])
([nil nil ((#("text" 0 4 (cider-locals nil help-echo cider--help-echo fontified t)) . -1619) (undo-tree-id1298 . -4) (undo-tree-id1299 . -4) (undo-tree-id1300 . -4) (undo-tree-id1301 . -4) (undo-tree-id1302 . -4) (undo-tree-id1303 . -4) (undo-tree-id1304 . -4) (undo-tree-id1305 . -4) (undo-tree-id1306 . -4) (undo-tree-id1307 . -4) (undo-tree-id1308 . -4) (undo-tree-id1309 . -4) (undo-tree-id1310 . -4) (undo-tree-id1311 . -4) (undo-tree-id1312 . -4) (undo-tree-id1313 . -4) (undo-tree-id1314 . -4) (undo-tree-id1315 . -4) (undo-tree-id1316 . -4) (undo-tree-id1317 . -4) (undo-tree-id1318 . -4) (undo-tree-id1319 . -4) (undo-tree-id1320 . -4) (undo-tree-id1321 . -4) (undo-tree-id1322 . -4) (undo-tree-id1323 . -4) (undo-tree-id1324 . -4) (undo-tree-id1325 . -4) (undo-tree-id1326 . -4) (undo-tree-id1327 . -4) (undo-tree-id1328 . -4) (undo-tree-id1329 . -4) (undo-tree-id1330 . -4) (undo-tree-id1331 . -4) (undo-tree-id1332 . -4) (undo-tree-id1333 . -4) (undo-tree-id1334 . -4) (undo-tree-id1335 . -4) (undo-tree-id1336 . -4) (undo-tree-id1337 . -4) (undo-tree-id1338 . -4) (undo-tree-id1339 . -4) (undo-tree-id1340 . -4) (undo-tree-id1341 . -4) (undo-tree-id1342 . -4) (undo-tree-id1343 . -4) (undo-tree-id1344 . -4) (undo-tree-id1345 . -4) (undo-tree-id1346 . -4) (undo-tree-id1347 . -4) (undo-tree-id1348 . -4) (undo-tree-id1349 . -4) (undo-tree-id1350 . -4) (undo-tree-id1351 . -4) (undo-tree-id1352 . -4) (undo-tree-id1353 . -4) (undo-tree-id1354 . -4) (undo-tree-id1355 . -4) (undo-tree-id1356 . -4) (undo-tree-id1357 . -4) (undo-tree-id1358 . -4) (undo-tree-id1359 . -4) (undo-tree-id1360 . -4) (undo-tree-id1361 . -4) (undo-tree-id1362 . -4) (undo-tree-id1363 . -4) (undo-tree-id1364 . -4) (undo-tree-id1365 . -4) (undo-tree-id1366 . -4) (undo-tree-id1367 . -4) (undo-tree-id1368 . -4) (undo-tree-id1369 . -4) (undo-tree-id1370 . -4) (undo-tree-id1371 . -4) (undo-tree-id1372 . -4) (undo-tree-id1373 . -4) (undo-tree-id1374 . -4) (undo-tree-id1375 . -4) (undo-tree-id1376 . -4) (undo-tree-id1377 . -4) (undo-tree-id1378 . -4) (undo-tree-id1379 . -4) (undo-tree-id1380 . -4) (undo-tree-id1381 . -4) (undo-tree-id1382 . -4) (undo-tree-id1383 . -4) (undo-tree-id1384 . -4) (undo-tree-id1385 . -4) (undo-tree-id1386 . -4) (undo-tree-id1387 . -4) (undo-tree-id1388 . -4) (undo-tree-id1389 . -4) (undo-tree-id1390 . -4) (undo-tree-id1391 . -4) (undo-tree-id1392 . -4) (undo-tree-id1393 . -4) (undo-tree-id1394 . -4) (undo-tree-id1395 . -4) (undo-tree-id1396 . -4) (undo-tree-id1397 . -4) (undo-tree-id1398 . -4) (undo-tree-id1399 . -4) (undo-tree-id1400 . -4) (undo-tree-id1401 . -4) (undo-tree-id1402 . -4) (undo-tree-id1403 . -4) (undo-tree-id1404 . -4) (undo-tree-id1405 . -4) (undo-tree-id1406 . -4) (undo-tree-id1407 . -4) (undo-tree-id1408 . -4) (undo-tree-id1409 . -4) 1623 (t 25798 1891 98903 990000)) nil (25798 1898 749164 0) 0 nil])
([nil nil ((1619 . 1625)) nil (25798 1898 749123 0) 0 nil])
([nil nil ((#("text" 0 4 (cider-locals nil fontified t help-echo cider--help-echo)) . -1657) (undo-tree-id1275 . -4) (undo-tree-id1276 . -4) (undo-tree-id1277 . -4) (undo-tree-id1278 . -4) (undo-tree-id1279 . -4) (undo-tree-id1280 . -4) (undo-tree-id1281 . -4) (undo-tree-id1282 . -4) (undo-tree-id1283 . -4) (undo-tree-id1284 . -4) (undo-tree-id1285 . -4) (undo-tree-id1286 . -4) (undo-tree-id1287 . -4) (undo-tree-id1288 . -4) (undo-tree-id1289 . -4) (undo-tree-id1290 . -4) (undo-tree-id1291 . -4) (undo-tree-id1292 . -4) (undo-tree-id1293 . -4) (undo-tree-id1294 . -4) (undo-tree-id1295 . -4) (undo-tree-id1296 . -4) (undo-tree-id1297 . -4) 1661) nil (25798 1898 749121 0) 0 nil])
([nil nil ((1657 . 1663)) nil (25798 1898 749104 0) 0 nil])
([nil nil ((1587 . 1588) (1581 . 1582) (t 25798 1898 754207 496000)) nil (25798 2603 844797 0) 0 nil])
([nil nil ((1582 . 1587)) nil (25798 2603 844794 0) 0 nil])
([nil nil ((#("list" 0 4 (face font-lock-function-name-face cider-locals nil help-echo cider--help-echo fontified t)) . -1582) (undo-tree-id1813 . -4) (undo-tree-id1814 . -3) (undo-tree-id1815 . -4) (undo-tree-id1816 . -4) (undo-tree-id1817 . -4) (undo-tree-id1818 . -4) (undo-tree-id1819 . -4) (undo-tree-id1820 . -4) (undo-tree-id1821 . -4) (undo-tree-id1822 . -4) (undo-tree-id1823 . -4) (undo-tree-id1824 . -4) (undo-tree-id1825 . -4) (undo-tree-id1826 . -4) (undo-tree-id1827 . -4) (undo-tree-id1828 . -4) (undo-tree-id1829 . -4) (undo-tree-id1830 . -4) (undo-tree-id1831 . -4) (undo-tree-id1832 . -4) (undo-tree-id1833 . -4) (undo-tree-id1834 . -4) (undo-tree-id1835 . -4) (undo-tree-id1836 . -4) (undo-tree-id1837 . -4) (undo-tree-id1838 . -4) (undo-tree-id1839 . -4) (undo-tree-id1840 . -4) (undo-tree-id1841 . -4) (undo-tree-id1842 . -4) (undo-tree-id1843 . -4) (undo-tree-id1844 . -4) (undo-tree-id1845 . -4) (undo-tree-id1846 . -4) (undo-tree-id1847 . -4) (undo-tree-id1848 . -4) (undo-tree-id1849 . -4) (undo-tree-id1850 . -4) (undo-tree-id1851 . -4) (undo-tree-id1852 . -4) (undo-tree-id1853 . -4) (undo-tree-id1854 . -4) (undo-tree-id1855 . -4) (undo-tree-id1856 . -4) (undo-tree-id1857 . -4) (undo-tree-id1858 . -4) (undo-tree-id1859 . -4) (undo-tree-id1860 . -4) (undo-tree-id1861 . -4) (undo-tree-id1862 . -4) (undo-tree-id1863 . -4) (undo-tree-id1864 . -4) (undo-tree-id1865 . -4) (undo-tree-id1866 . -4) (undo-tree-id1867 . -4) (undo-tree-id1868 . -4) (undo-tree-id1869 . -4) 1586 (t 25798 2603 849953 497000)) nil (25798 2837 968614 0) 0 nil])
([nil nil ((#("( " 0 1 (face (rainbow-delimiters-depth-9-face) cider-locals nil help-echo cider--help-echo fontified nil) 1 2 (cider-locals nil ws-butler-chg delete help-echo cider--help-echo fontified nil)) . 1581) (undo-tree-id1711 . -2) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -2) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-9-face) cider-locals nil help-echo cider--help-echo fontified t)) . -1588) 1582) nil (25798 2837 968588 0) 0 nil])
([nil nil ((#("User" 0 4 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t)) . -1582) (undo-tree-id1680 . -4) (undo-tree-id1681 . -4) (undo-tree-id1682 . -4) (undo-tree-id1683 . -4) (undo-tree-id1684 . -4) (undo-tree-id1685 . -4) (undo-tree-id1686 . -4) (undo-tree-id1687 . -4) (undo-tree-id1688 . -4) (undo-tree-id1689 . -4) (undo-tree-id1690 . -4) (undo-tree-id1691 . -4) (undo-tree-id1692 . -4) (undo-tree-id1693 . -4) (undo-tree-id1694 . -4) (undo-tree-id1695 . -4) (undo-tree-id1696 . -4) (undo-tree-id1697 . -4) (undo-tree-id1698 . -4) (undo-tree-id1699 . -4) (undo-tree-id1700 . -4) (undo-tree-id1701 . -4) (undo-tree-id1702 . -4) (undo-tree-id1703 . -4) (undo-tree-id1704 . -4) (undo-tree-id1705 . -4) (undo-tree-id1706 . -4) (undo-tree-id1707 . -4) (undo-tree-id1708 . -4) (undo-tree-id1709 . -4) (undo-tree-id1710 . -4) 1586) nil (25798 2837 968548 0) 0 nil])
([nil nil ((#(":" 0 1 (cider-locals nil ws-butler-chg delete help-echo cider--help-echo fontified t)) . -1581) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) 1582) nil (25798 2837 968535 0) 0 nil])
([nil nil ((1581 . 1584)) nil (25798 2837 968508 0) 0 nil])
([nil nil ((#("i" 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -1581) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (#("n" 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -1582) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (#("t" 0 1 (face font-lock-function-name-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -1583) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) 1584) nil (25798 2837 968503 0) 0 nil])
([nil nil ((1581 . 1584)) nil (25798 2852 197650 0) 0 nil])
([nil nil ((1556 . 1563) (t 25798 2837 973722 384000)) nil (25798 41851 680424 0) 0 nil] [nil nil ((1584 . 1616) (t 25798 2837 973722 384000)) ((#("
                               " 0 32 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . 1584) (undo-tree-id1870 . -32) (undo-tree-id1871 . -32) (undo-tree-id1872 . -1)) (25798 2852 197202 0) 0 nil])
([nil nil ((1556 . 1564)) nil (25798 41851 680423 0) 0 nil])
nil
([nil nil ((1564 . 1566)) nil (25798 41851 680422 0) 0 nil])
([nil nil ((1565 . 1571)) nil (25798 41851 680421 0) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1570) (undo-tree-id1876 . -1) 1571) nil (25798 41851 680420 0) 0 nil])
([nil nil ((1571 . 1574)) nil (25798 41851 680419 0) 0 nil])
([nil nil ((#("n" 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1571) (undo-tree-id1873 . -1) (#("o" 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1572) (undo-tree-id1874 . -1) (#("n" 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1573) (undo-tree-id1875 . -1) 1574) nil (25798 41851 680418 0) 0 nil])
([nil nil ((1570 . 1571)) nil (25798 41851 680408 0) 0 nil])
([nil nil ((1571 . 1573)) nil (25798 41851 680407 0) 0 nil])
([nil nil ((1572 . 1583)) nil (25798 41851 680407 0) 0 nil])
([nil nil ((1583 . 1584)) nil (25798 49821 688018 0) 0 nil])
([nil nil ((apply -3 1556 1590 undo--wrap-and-run-primitive-undo 1556 1590 (("      " . 1556) (1556 . 1565) 1586)) (t 25798 41851 686836 60000)) nil (25798 50442 332174 0) 0 nil] [nil nil ((93 . 95) (t 25798 41851 686836 60000)) ((#("sh" 0 2 (fontified t help-echo cider--help-echo ws-butler-chg chg cider-locals nil)) . 93) (undo-tree-id0 . -2)) (25798 49821 687184 0) 0 nil])
([nil nil ((1705 . 1710) (t 25798 50442 338708 362000)) nil (25799 2188 501622 0) 0 nil])
nil
([nil nil ((1706 . 1711) (#("    " 0 4 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . 1706) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) (undo-tree-id5 . -4) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (undo-tree-id10 . -4) (undo-tree-id11 . -4) (undo-tree-id12 . -4) (undo-tree-id13 . -4) (undo-tree-id14 . -4) (undo-tree-id15 . -4) (undo-tree-id16 . -4) (undo-tree-id17 . -4) (undo-tree-id18 . -4) (undo-tree-id19 . -4) (undo-tree-id20 . -4) (undo-tree-id21 . -4) (undo-tree-id22 . -4) (undo-tree-id23 . -4) (undo-tree-id24 . -4) (undo-tree-id25 . -4) (undo-tree-id26 . -4) (undo-tree-id27 . -4) (undo-tree-id28 . -4) (undo-tree-id29 . -4) (undo-tree-id30 . -4) (undo-tree-id31 . -4) (undo-tree-id32 . -4) (undo-tree-id33 . -4) (undo-tree-id34 . -4) (undo-tree-id35 . -4) (undo-tree-id36 . -4) (undo-tree-id37 . -4) (undo-tree-id38 . -4) (undo-tree-id39 . -4) (undo-tree-id40 . -4) (undo-tree-id41 . -4) (undo-tree-id42 . -4) (undo-tree-id43 . -4) (undo-tree-id44 . -4) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -4) (undo-tree-id48 . -4) (undo-tree-id49 . -4) (undo-tree-id50 . -4) 1710) nil (25799 2188 501619 0) 0 nil])
([nil nil ((1711 . 1717)) nil (25799 2188 501577 0) 0 nil])
([nil nil ((1717 . 1722) (t 25799 2188 508533 834000)) nil (25799 2194 338484 0) 0 nil])
([nil nil ((1722 . 1724)) nil (25799 2194 338484 0) 0 nil])
([nil nil ((1723 . 1734)) nil (25799 2194 338480 0) 0 nil])
([nil nil ((1734 . 1740) (t 25799 2194 343339 166000)) nil (25799 2201 294073 0) 0 nil])
([nil nil ((1740 . 1753)) nil (25799 2201 294072 0) 0 nil])
([nil nil ((1753 . 1755)) nil (25799 2201 294071 0) 0 nil])
([nil nil ((1754 . 1765)) nil (25799 2201 294071 0) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1764) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) 1765) nil (25799 2201 294069 0) 0 nil])
([nil nil ((1764 . 1775)) nil (25799 2201 294051 0) 0 nil])
([nil nil ((1776 . 1782) (t 25799 2201 298813 159000)) nil (25799 2227 15086 0) 0 nil])
([nil nil ((1782 . 1787)) nil (25799 2227 15082 0) 0 nil])
([nil nil ((1787 . 1793) (t 25799 2227 19895 942000)) nil (25799 2231 169651 0) 0 nil])
([nil nil ((1793 . 1795)) nil (25799 2231 169646 0) 0 nil])
([nil nil ((1794 . 1795) (t 25799 2231 174879 390000)) nil (25799 2236 252910 0) 0 nil])
([nil nil ((1795 . 1803)) nil (25799 2236 252906 0) 0 nil])
([nil nil ((1803 . 1810) (t 25799 2236 258032 876000)) nil (25799 2239 398826 0) 0 nil])
([nil nil ((1810 . 1819)) nil (25799 2239 398822 0) 0 nil])
([nil nil ((1803 . 1804) (t 25799 2239 404010 475000)) nil (25799 2257 385339 0) 0 nil])
([nil nil ((1804 . 1806)) nil (25799 2257 385338 0) 0 nil])
([nil nil ((1805 . 1811)) nil (25799 2257 385337 0) 0 nil])
([nil nil ((1811 . 1813)) nil (25799 2257 385337 0) 0 nil])
([nil nil ((1812 . 1827)) nil (25799 2257 385336 0) 0 nil])
([nil nil ((1845 . 1846)) nil (25799 2257 385335 0) 0 nil])
([nil nil ((1846 . 1848)) nil (25799 2257 385335 0) 0 nil])
([nil nil ((1847 . 1853)) nil (25799 2257 385334 0) 0 nil])
([nil nil ((1853 . 1855)) nil (25799 2257 385333 0) 0 nil])
([nil nil ((1854 . 1857)) nil (25799 2257 385332 0) 0 nil])
([nil nil ((1857 . 1869)) nil (25799 2257 385329 0) 0 nil])
([nil nil ((1871 . 1878) (t 25799 2257 391396 104000)) nil (25799 2258 729538 0) 0 nil])
([nil nil ((#("      " 0 6 (cider-locals nil help-echo cider--help-echo fontified t)) . 1872) (undo-tree-id401 . -6) (undo-tree-id402 . -6) (undo-tree-id403 . -6) (undo-tree-id404 . -6) (undo-tree-id405 . -6) (undo-tree-id406 . -6) (undo-tree-id407 . -6) (undo-tree-id408 . -6) (undo-tree-id409 . -6) (undo-tree-id410 . -6) (undo-tree-id411 . -6) (undo-tree-id412 . -6) (undo-tree-id413 . -6) (undo-tree-id414 . -6) (undo-tree-id415 . -6) (undo-tree-id416 . -6) (undo-tree-id417 . -6) (undo-tree-id418 . -6) (undo-tree-id419 . -6) (undo-tree-id420 . -6) (undo-tree-id421 . -6) (undo-tree-id422 . -6) (undo-tree-id423 . -6) (undo-tree-id424 . -6) (undo-tree-id425 . -6) (undo-tree-id426 . -6) (undo-tree-id427 . -6) (undo-tree-id428 . -6) (undo-tree-id429 . -6) (undo-tree-id430 . -6) (undo-tree-id431 . -6) (undo-tree-id432 . -6) (undo-tree-id433 . -6) (undo-tree-id434 . -6) (undo-tree-id435 . -6) (undo-tree-id436 . -6) (undo-tree-id437 . -6) (undo-tree-id438 . -6) (undo-tree-id439 . -6) (undo-tree-id440 . -6) (undo-tree-id441 . -6) (undo-tree-id442 . -6) (undo-tree-id443 . -6) (undo-tree-id444 . -6) (undo-tree-id445 . -6) (undo-tree-id446 . -6) (undo-tree-id447 . -6) (undo-tree-id448 . -6) (undo-tree-id449 . -6) (undo-tree-id450 . -6) (undo-tree-id451 . -6) (undo-tree-id452 . -6) (undo-tree-id453 . -6) (undo-tree-id454 . -6) (undo-tree-id455 . -6) (undo-tree-id456 . -6) (undo-tree-id457 . -6) (undo-tree-id458 . -6) (undo-tree-id459 . -6) (undo-tree-id460 . -6) (undo-tree-id461 . -6) (undo-tree-id462 . -6) (undo-tree-id463 . -6) (undo-tree-id464 . -6) (undo-tree-id465 . -6) (undo-tree-id466 . -6) (undo-tree-id467 . -6) (undo-tree-id468 . -6) (undo-tree-id469 . -6) (undo-tree-id470 . -6) (undo-tree-id471 . -6) (undo-tree-id472 . -6) (undo-tree-id473 . -6) (undo-tree-id474 . -6) (undo-tree-id475 . -6) (undo-tree-id476 . -6) (undo-tree-id477 . -6) (undo-tree-id478 . -6) (undo-tree-id479 . -6) (undo-tree-id480 . -6) (undo-tree-id481 . -6) (undo-tree-id482 . -6) (undo-tree-id483 . -6) (undo-tree-id484 . -6) (undo-tree-id485 . -6) (undo-tree-id486 . -6) (undo-tree-id487 . -6) (undo-tree-id488 . -6) (undo-tree-id489 . -6) (undo-tree-id490 . -6) (undo-tree-id491 . -6) (undo-tree-id492 . -6) (undo-tree-id493 . -6) (undo-tree-id494 . -6) (undo-tree-id495 . -6) (undo-tree-id496 . -6) (undo-tree-id497 . -6) (undo-tree-id498 . -6) (undo-tree-id499 . -6) (undo-tree-id500 . -6) (undo-tree-id501 . -6) (undo-tree-id502 . -6) (undo-tree-id503 . -6) (undo-tree-id504 . -6) (undo-tree-id505 . -6) (undo-tree-id506 . -6) (undo-tree-id507 . -6) (undo-tree-id508 . -6) (undo-tree-id509 . -6) (undo-tree-id510 . -6) (undo-tree-id511 . -6) (undo-tree-id512 . -6) (undo-tree-id513 . -6) (undo-tree-id514 . -6) (undo-tree-id515 . -6) (undo-tree-id516 . -6) (undo-tree-id517 . -6) (undo-tree-id518 . -6) (undo-tree-id519 . -6) (undo-tree-id520 . -6) (undo-tree-id521 . -6) (undo-tree-id522 . -6) (undo-tree-id523 . -6) (undo-tree-id524 . -6) (undo-tree-id525 . -6) (undo-tree-id526 . -6) (undo-tree-id527 . -6) (undo-tree-id528 . -6) (undo-tree-id529 . -6) (undo-tree-id530 . -6) (undo-tree-id531 . -6) (undo-tree-id532 . -6) (undo-tree-id533 . -6) (undo-tree-id534 . -6) (undo-tree-id535 . -6) (undo-tree-id536 . -6) (undo-tree-id537 . -6) (undo-tree-id538 . -6) (undo-tree-id539 . -6) (undo-tree-id540 . -6) (undo-tree-id541 . -6) (undo-tree-id542 . -6) (undo-tree-id543 . -6) (undo-tree-id544 . -6) (undo-tree-id545 . -6) (undo-tree-id546 . -6) (undo-tree-id547 . -6) (undo-tree-id548 . -6) (undo-tree-id549 . -6) (undo-tree-id550 . -6) (undo-tree-id551 . -6) (undo-tree-id552 . -6) (undo-tree-id553 . -6) (undo-tree-id554 . -6) (undo-tree-id555 . -6) (undo-tree-id556 . -6) (undo-tree-id557 . -6) (undo-tree-id558 . -6) (undo-tree-id559 . -6) (undo-tree-id560 . -6) (undo-tree-id561 . -6) (undo-tree-id562 . -6) (undo-tree-id563 . -6) (undo-tree-id564 . -6) (undo-tree-id565 . -6) (undo-tree-id566 . -6) (undo-tree-id567 . -6) (undo-tree-id568 . -6) (undo-tree-id569 . -6) (undo-tree-id570 . -6) (undo-tree-id571 . -6) (undo-tree-id572 . -6) (undo-tree-id573 . -6) (undo-tree-id574 . -6) (undo-tree-id575 . -6) (undo-tree-id576 . -6) (undo-tree-id577 . -6) (undo-tree-id578 . -6) (undo-tree-id579 . -6) (undo-tree-id580 . -6) (undo-tree-id581 . -6) (undo-tree-id582 . -6) (undo-tree-id583 . -6) (undo-tree-id584 . -6) (undo-tree-id585 . -6) (undo-tree-id586 . -6) (undo-tree-id587 . -6) (undo-tree-id588 . -6) (undo-tree-id589 . -6) (undo-tree-id590 . -6) (undo-tree-id591 . -6) (undo-tree-id592 . -6) (undo-tree-id593 . -6) (undo-tree-id594 . -6) (undo-tree-id595 . -6) (undo-tree-id596 . -6) (undo-tree-id597 . -6) (undo-tree-id598 . -6) (undo-tree-id599 . -6) (undo-tree-id600 . -6) (undo-tree-id601 . -6) (undo-tree-id602 . -6) (undo-tree-id603 . -6) (undo-tree-id604 . -6) (undo-tree-id605 . -6) (undo-tree-id606 . -6) (undo-tree-id607 . -6) (undo-tree-id608 . -6) (undo-tree-id609 . -6) (undo-tree-id610 . -6) (undo-tree-id611 . -6) (undo-tree-id612 . -6) (undo-tree-id613 . -6) (undo-tree-id614 . -6) (undo-tree-id615 . -6) (undo-tree-id616 . -6) (undo-tree-id617 . -6) (undo-tree-id618 . -6) (undo-tree-id619 . -6) (undo-tree-id620 . -6) (undo-tree-id621 . -6) (undo-tree-id622 . -6) (undo-tree-id623 . -6) (undo-tree-id624 . -6) (undo-tree-id625 . -6) (undo-tree-id626 . -6) (undo-tree-id627 . -6) (undo-tree-id628 . -6) (undo-tree-id629 . -6) (undo-tree-id630 . -6) (undo-tree-id631 . -6) (undo-tree-id632 . -6) (undo-tree-id633 . -6) (undo-tree-id634 . -6) (undo-tree-id635 . -6) (undo-tree-id636 . -6) (undo-tree-id637 . -6) (undo-tree-id638 . -6) (undo-tree-id639 . -6) (undo-tree-id640 . -6) (undo-tree-id641 . -6) (undo-tree-id642 . -6) (undo-tree-id643 . -6) (undo-tree-id644 . -6) (undo-tree-id645 . -6) (undo-tree-id646 . -6) (undo-tree-id647 . -6) (undo-tree-id648 . -6) (undo-tree-id649 . -6) (undo-tree-id650 . -6) (undo-tree-id651 . -6) (undo-tree-id652 . -6) (undo-tree-id653 . -6) (undo-tree-id654 . -6) (undo-tree-id655 . -6) (undo-tree-id656 . -6) (undo-tree-id657 . -6) (undo-tree-id658 . -6) (undo-tree-id659 . -6) (undo-tree-id660 . -6) (t 25799 2258 734732 925000)) nil (25799 2272 844519 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . -1871) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) 1872) nil (25799 2272 844421 0) 0 nil])
([nil nil ((909 . 914) (t 25799 2272 849620 540000)) nil (25799 2489 976148 0) 0 nil])
([nil nil ((910 . 915) (#("    " 0 4 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . 910) (undo-tree-id901 . -4) 914) nil (25799 2489 976147 0) 0 nil])
([nil nil ((909 . 927)) nil (25799 2489 976146 0) 0 nil])
([nil nil ((#("e" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -925) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (#("m" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -926) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) 927) nil (25799 2489 976144 0) 0 nil])
([nil nil ((925 . 927)) nil (25799 2489 976106 0) 0 nil])
([nil nil ((#("," 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -925) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (#("e" 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -926) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) 927) nil (25799 2489 976103 0) 0 nil])
([nil nil ((925 . 927)) nil (25799 2489 976064 0) 0 nil])
([nil nil ((927 . 932)) nil (25799 2489 976063 0) 0 nil])
([nil nil ((932 . 934)) nil (25799 2489 976063 0) 0 nil])
([nil nil ((933 . 940)) nil (25799 2489 976062 0) 0 nil])
([nil nil ((#("U" 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -939) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) 940) nil (25799 2489 976060 0) 0 nil])
([nil nil ((939 . 944)) nil (25799 2489 976043 0) 0 nil])
([nil nil ((944 . 950)) nil (25799 2489 976043 0) 0 nil])
([nil nil ((950 . 963)) nil (25799 2489 976042 0) 0 nil])
([nil nil ((963 . 965)) nil (25799 2489 976041 0) 0 nil])
([nil nil ((964 . 985)) nil (25799 2489 976040 0) 0 nil])
([nil nil ((985 . 986)) nil (25799 2489 976037 0) 0 nil])
([nil nil ((987 . 993) (t 25799 2489 981420 600000)) nil (25799 2500 144354 0) 0 nil])
([nil nil ((993 . 998)) nil (25799 2500 144353 0) 0 nil])
([nil nil ((998 . 1004)) nil (25799 2500 144352 0) 0 nil])
([nil nil ((1004 . 1006)) nil (25799 2500 144351 0) 0 nil])
([nil nil ((1005 . 1015)) nil (25799 2500 144350 0) 0 nil])
([nil nil ((1015 . 1017)) nil (25799 2500 144349 0) 0 nil])
([nil nil ((1016 . 1028)) nil (25799 2500 144345 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . -1031) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) 1032 (t 25799 2500 150490 913000)) nil (25799 2501 534220 0) 0 nil])
([nil nil ((#("n" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t)) . -1010) (undo-tree-id949 . -1) (undo-tree-id950 . -1) 1011 (t 25799 2501 539515 287000)) nil (25799 2510 911051 0) 0 nil])
([nil nil ((1010 . 1011)) nil (25799 2714 767746 0) 0 nil])
([nil nil ((#(":GetUserbyUsername" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 1 18 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t)) . 909) (undo-tree-id1005 . -8) (undo-tree-id1006 . -8) (undo-tree-id1007 . -8) (undo-tree-id1008 . -8) (undo-tree-id1009 . -8) (undo-tree-id1010 . -8) (undo-tree-id1011 . -8) (undo-tree-id1012 . -8) (undo-tree-id1013 . -8) (undo-tree-id1014 . -8) (undo-tree-id1015 . -8) (undo-tree-id1016 . -8) (undo-tree-id1017 . -8) (undo-tree-id1018 . -8) (undo-tree-id1019 . -18) (undo-tree-id1020 . -18) (undo-tree-id1021 . -18) (undo-tree-id1022 . -18) (undo-tree-id1023 . -18) (undo-tree-id1024 . -18) (undo-tree-id1025 . -18) (undo-tree-id1026 . -18) (undo-tree-id1027 . -18) (undo-tree-id1028 . -18) (undo-tree-id1029 . -18) (undo-tree-id1030 . -18) (undo-tree-id1031 . -18) (undo-tree-id1032 . -18) (undo-tree-id1033 . -18) (undo-tree-id1034 . -18) (undo-tree-id1035 . -18) (undo-tree-id1036 . -18) (undo-tree-id1037 . -18) (undo-tree-id1038 . -18) (undo-tree-id1039 . -18) (undo-tree-id1040 . -18) (undo-tree-id1041 . -18) (undo-tree-id1042 . -18) (undo-tree-id1043 . -18) (undo-tree-id1044 . -18) (undo-tree-id1045 . -18) (undo-tree-id1046 . -18) (undo-tree-id1047 . -18) (undo-tree-id1048 . -18) (undo-tree-id1049 . -18) (undo-tree-id1050 . -18) (undo-tree-id1051 . -18) (undo-tree-id1052 . -18) (undo-tree-id1053 . -18) (undo-tree-id1054 . -18) (undo-tree-id1055 . -18) (undo-tree-id1056 . -18) (undo-tree-id1057 . -18) (undo-tree-id1058 . -18) (undo-tree-id1059 . -18) (undo-tree-id1060 . -18) (undo-tree-id1061 . -18) (undo-tree-id1062 . -18) (undo-tree-id1063 . -18) (undo-tree-id1064 . -18) (undo-tree-id1065 . -18) (undo-tree-id1066 . -18) (undo-tree-id1067 . -18) (undo-tree-id1068 . -18) (undo-tree-id1069 . -18) (undo-tree-id1070 . -18) (undo-tree-id1071 . -18) (undo-tree-id1072 . -18) (undo-tree-id1073 . -18) (undo-tree-id1074 . -18) (undo-tree-id1075 . -18) (undo-tree-id1076 . -18) (undo-tree-id1077 . -18) (undo-tree-id1078 . -18) (undo-tree-id1079 . -18) (undo-tree-id1080 . -18) (undo-tree-id1081 . -18) (undo-tree-id1082 . -18) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -18) (t 25799 2510 916450 763000)) nil (25799 2721 805952 0) 0 nil] [nil nil ((#("   {:GetUserbyUsername
    {:type :User
     :description \"get a user by username\"
     :args
     {:userName {:type String}}}
    :GetUser
    {:type :User
     :description \"Get a user by name\"
     :args
     {:id {:type Int}}}
    :GetAuth
    {:type :Auth
     :description \"Auth by id\"
     :args
     {:id {:type Int}}}
    :GetAuthLevel
    {:type :Auth
     :description \"Query an Auth Level based on token\"
     :args
     {:token {:type String}}}
    :GetPost
    {:type :Post
     :description \"Get a post by ID\"
     :args
     {:id {:type Int}}}
    :GetComment
    {:type :Comment
     :description \"Get a comment by ID\"
     :args
     {:id {:type Int}}}}" 0 3 (cider-locals nil help-echo cider--help-echo fontified t) 3 4 (face (rainbow-delimiters-depth-4-face) cider-locals nil help-echo cider--help-echo fontified t) 4 5 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 5 22 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 22 23 (cider-locals nil help-echo cider--help-echo fontified t) 23 27 (cider-locals nil help-echo cider--help-echo fontified t) 27 28 (face (rainbow-delimiters-depth-5-face) cider-locals nil help-echo cider--help-echo fontified t) 28 29 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 29 33 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 33 34 (cider-locals nil help-echo cider--help-echo fontified t) 34 35 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 35 39 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 39 40 (cider-locals nil help-echo cider--help-echo fontified t) 40 45 (cider-locals nil help-echo cider--help-echo fontified t) 45 46 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 46 57 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 57 58 (cider-locals nil help-echo cider--help-echo fontified t) 58 81 (face font-lock-string-face cider-locals nil help-echo cider--help-echo fontified t) 81 82 (face font-lock-string-face cider-locals nil help-echo cider--help-echo fontified t) 82 83 (cider-locals nil help-echo cider--help-echo fontified t) 83 88 (cider-locals nil help-echo cider--help-echo fontified t) 88 89 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 89 93 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 93 94 (cider-locals nil help-echo cider--help-echo fontified t) 94 99 (cider-locals nil help-echo cider--help-echo fontified t) 99 100 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo fontified t) 100 101 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 101 105 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 105 106 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 106 107 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 107 109 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 109 110 (cider-locals nil help-echo cider--help-echo fontified t) 110 111 (face (rainbow-delimiters-depth-7-face) cider-locals nil help-echo cider--help-echo fontified t) 111 112 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 112 116 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 116 123 (cider-locals nil help-echo cider--help-echo fontified t) 123 124 (face (rainbow-delimiters-depth-7-face) cider-locals nil help-echo cider--help-echo fontified t) 124 125 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo fontified t) 125 126 (face (rainbow-delimiters-depth-5-face) cider-locals nil help-echo cider--help-echo fontified t) 126 127 (cider-locals nil fontified t help-echo cider--help-echo) 127 131 (cider-locals nil fontified t help-echo cider--help-echo) 131 132 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 132 139 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 139 140 (cider-locals nil fontified t help-echo cider--help-echo) 140 144 (cider-locals nil fontified t help-echo cider--help-echo) 144 145 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 145 146 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 146 150 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 150 151 (cider-locals nil fontified t help-echo cider--help-echo) 151 152 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 152 156 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 156 162 (cider-locals nil fontified t help-echo cider--help-echo) 162 163 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 163 174 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 174 175 (cider-locals nil fontified t help-echo cider--help-echo) 175 195 (face font-lock-string-face cider-locals nil fontified t help-echo cider--help-echo) 195 201 (cider-locals nil fontified t help-echo cider--help-echo) 201 202 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 202 206 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 206 212 (cider-locals nil fontified t help-echo cider--help-echo) 212 213 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 213 214 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 214 216 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 216 217 (cider-locals nil fontified t help-echo cider--help-echo) 217 218 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 218 219 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 219 223 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 223 227 (cider-locals nil fontified t help-echo cider--help-echo) 227 228 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 228 229 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 229 230 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 230 235 (cider-locals nil fontified t help-echo cider--help-echo) 235 236 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 236 243 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 243 248 (cider-locals nil fontified t help-echo cider--help-echo) 248 249 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 249 250 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 250 254 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 254 255 (cider-locals nil fontified t help-echo cider--help-echo) 255 256 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 256 260 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 260 266 (cider-locals nil fontified t help-echo cider--help-echo) 266 267 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 267 278 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 278 279 (cider-locals nil fontified t help-echo cider--help-echo) 279 291 (face font-lock-string-face cider-locals nil fontified t help-echo cider--help-echo) 291 297 (cider-locals nil fontified t help-echo cider--help-echo) 297 298 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 298 302 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 302 308 (cider-locals nil fontified t help-echo cider--help-echo) 308 309 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 309 310 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 310 312 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 312 313 (cider-locals nil fontified t help-echo cider--help-echo) 313 314 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 314 315 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 315 319 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 319 323 (cider-locals nil fontified t help-echo cider--help-echo) 323 324 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 324 325 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 325 326 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 326 331 (cider-locals nil fontified t help-echo cider--help-echo) 331 332 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 332 344 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 344 349 (cider-locals nil fontified t help-echo cider--help-echo) 349 350 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 350 351 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 351 355 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 355 356 (cider-locals nil fontified t help-echo cider--help-echo) 356 357 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 357 361 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 361 367 (cider-locals nil fontified t help-echo cider--help-echo) 367 368 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 368 379 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 379 380 (cider-locals nil fontified t help-echo cider--help-echo) 380 416 (face font-lock-string-face cider-locals nil fontified t help-echo cider--help-echo) 416 422 (cider-locals nil fontified t help-echo cider--help-echo) 422 423 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 423 427 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 427 433 (cider-locals nil fontified t help-echo cider--help-echo) 433 434 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 434 435 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 435 440 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 440 441 (cider-locals nil fontified t help-echo cider--help-echo) 441 442 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 442 443 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 443 447 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 447 454 (cider-locals nil fontified t help-echo cider--help-echo) 454 455 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 455 456 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 456 457 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 457 462 (cider-locals nil fontified t help-echo cider--help-echo) 462 463 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 463 470 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 470 475 (cider-locals nil fontified t help-echo cider--help-echo) 475 476 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 476 477 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 477 481 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 481 482 (cider-locals nil fontified t help-echo cider--help-echo) 482 483 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 483 487 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 487 493 (cider-locals nil fontified t help-echo cider--help-echo) 493 494 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 494 505 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 505 506 (cider-locals nil fontified t help-echo cider--help-echo) 506 524 (face font-lock-string-face cider-locals nil fontified t help-echo cider--help-echo) 524 530 (cider-locals nil fontified t help-echo cider--help-echo) 530 531 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 531 535 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 535 541 (cider-locals nil fontified t help-echo cider--help-echo) 541 542 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 542 543 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 543 545 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 545 546 (cider-locals nil fontified t help-echo cider--help-echo) 546 547 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 547 548 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 548 552 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 552 556 (cider-locals nil fontified t help-echo cider--help-echo) 556 557 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 557 558 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 558 559 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 559 564 (cider-locals nil fontified t help-echo cider--help-echo) 564 565 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 565 575 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 575 580 (cider-locals nil fontified t help-echo cider--help-echo) 580 581 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 581 582 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 582 586 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 586 587 (cider-locals nil fontified t help-echo cider--help-echo) 587 588 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 588 595 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 595 601 (cider-locals nil fontified t help-echo cider--help-echo) 601 602 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 602 613 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 613 614 (cider-locals nil fontified t help-echo cider--help-echo) 614 635 (face font-lock-string-face cider-locals nil fontified t help-echo cider--help-echo) 635 641 (cider-locals nil fontified t help-echo cider--help-echo) 641 642 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 642 646 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 646 652 (cider-locals nil fontified t help-echo cider--help-echo) 652 653 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 653 654 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 654 656 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 656 657 (cider-locals nil fontified t help-echo cider--help-echo) 657 658 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 658 659 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 659 663 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 663 667 (cider-locals nil fontified t help-echo cider--help-echo) 667 668 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 668 669 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 669 670 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 670 671 (face (rainbow-delimiters-depth-4-face) cider-locals nil fontified t help-echo cider--help-echo)) . 905) (undo-tree-id951 . -105) (undo-tree-id952 . -106) (undo-tree-id953 . -106) (undo-tree-id954 . -106) (undo-tree-id955 . -106) (undo-tree-id956 . -35) (undo-tree-id957 . -35) (undo-tree-id958 . -35) (undo-tree-id959 . -35) (undo-tree-id960 . -35) (undo-tree-id961 . -35) (undo-tree-id962 . -35) (undo-tree-id963 . -35) (undo-tree-id964 . -35) (undo-tree-id965 . -35) (undo-tree-id966 . -35) (undo-tree-id967 . -35) (undo-tree-id968 . -35) (undo-tree-id969 . -12) (undo-tree-id970 . -12) (undo-tree-id971 . -12) (undo-tree-id972 . -12) (undo-tree-id973 . -12) (undo-tree-id974 . -12) (undo-tree-id975 . -12) (undo-tree-id976 . -12) (undo-tree-id977 . -12) (undo-tree-id978 . -12) (undo-tree-id979 . -12) (undo-tree-id980 . -12) (undo-tree-id981 . -12) (undo-tree-id982 . -12) (undo-tree-id983 . -671) (t 25799 2510 916450 763000)) ((nil ws-butler-chg delete 1576 . 1577) (905 . 1576)) (25799 2714 766072 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil ws-butler-chg delete help-echo cider--help-echo fontified t)) . 909) (undo-tree-id1004 . -1)) nil (25799 2721 805916 0) 0 nil])
nil
([nil nil ((#("    {:type :User
     :description \"get a user by username\"
     :args
     {:userName {:type String}}}" 0 1 (cider-locals nil ws-butler-chg delete fontified t help-echo cider--help-echo) 1 4 (cider-locals nil fontified t help-echo cider--help-echo) 4 5 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 5 6 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 6 10 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 10 11 (cider-locals nil fontified t help-echo cider--help-echo) 11 12 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 12 16 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 16 17 (cider-locals nil fontified t help-echo cider--help-echo) 17 22 (cider-locals nil fontified t help-echo cider--help-echo) 22 23 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 23 34 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 34 35 (cider-locals nil fontified t help-echo cider--help-echo) 35 58 (face font-lock-string-face cider-locals nil fontified t help-echo cider--help-echo) 58 59 (face font-lock-string-face cider-locals nil fontified t help-echo cider--help-echo) 59 60 (cider-locals nil fontified t help-echo cider--help-echo) 60 65 (cider-locals nil fontified t help-echo cider--help-echo) 65 66 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 66 70 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 70 71 (cider-locals nil fontified t help-echo cider--help-echo) 71 76 (cider-locals nil fontified t help-echo cider--help-echo) 76 77 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 77 78 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 78 82 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 82 83 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 83 84 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 84 86 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 86 87 (cider-locals nil fontified t help-echo cider--help-echo) 87 88 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 88 89 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 89 93 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 93 100 (cider-locals nil fontified t help-echo cider--help-echo) 100 101 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 101 102 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 102 103 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo)) . 909) (undo-tree-id985 . -82) (undo-tree-id986 . -83) (undo-tree-id987 . -83) (undo-tree-id988 . -83) (undo-tree-id989 . -83) (undo-tree-id990 . -12) (undo-tree-id991 . -12) (undo-tree-id992 . -12) (undo-tree-id993 . -12) (undo-tree-id994 . -12) (undo-tree-id995 . -12) (undo-tree-id996 . -12) (undo-tree-id997 . -12) (undo-tree-id998 . -12) (undo-tree-id999 . -12) (undo-tree-id1000 . -12) (undo-tree-id1001 . -12) (undo-tree-id1002 . -12) (undo-tree-id1003 . -103)) nil (25799 2721 805914 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil ws-butler-chg delete fontified t help-echo cider--help-echo)) . 909) (undo-tree-id984 . -1)) nil (25799 2721 805903 0) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals nil ws-butler-chg delete fontified t help-echo cider--help-echo)) . 909) (#(" " 0 1 (cider-locals nil ws-butler-chg delete fontified t help-echo cider--help-echo)) . 909) (#(" " 0 1 (cider-locals nil ws-butler-chg delete fontified t help-echo cider--help-echo)) . 909) (#(" " 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 909) (t 25799 2721 813523 639000)) nil (25799 2723 481818 0) 0 nil])
([nil nil ((#("    :authLevel {:type (non-null String)}" 0 4 (fontified t help-echo cider--help-echo cider-locals nil) 4 5 (fontified t help-echo cider--help-echo cider-locals nil face clojure-keyword-face) 5 14 (fontified t help-echo cider--help-echo cider-locals nil face clojure-keyword-face) 14 15 (fontified t help-echo cider--help-echo cider-locals nil) 15 16 (fontified t help-echo cider--help-echo cider-locals nil face (rainbow-delimiters-depth-5-face)) 16 17 (fontified t help-echo cider--help-echo cider-locals nil face clojure-keyword-face) 17 21 (fontified t help-echo cider--help-echo cider-locals nil face clojure-keyword-face) 21 22 (fontified t help-echo cider--help-echo cider-locals nil) 22 23 (fontified t help-echo cider--help-echo cider-locals nil face (rainbow-delimiters-depth-6-face)) 23 38 (fontified t help-echo cider--help-echo cider-locals nil) 38 39 (fontified t help-echo cider--help-echo cider-locals nil face (rainbow-delimiters-depth-6-face)) 39 40 (fontified t help-echo cider--help-echo cider-locals nil face (rainbow-delimiters-depth-5-face))) . 379) (undo-tree-id109 . -10) (undo-tree-id110 . -10) (undo-tree-id111 . -10) (undo-tree-id112 . -10) (undo-tree-id113 . -10) (undo-tree-id114 . -10) (undo-tree-id115 . -10) (undo-tree-id116 . -10) (undo-tree-id117 . -10) (undo-tree-id118 . -10) (undo-tree-id119 . -10) (undo-tree-id120 . -10) (undo-tree-id121 . -10) (undo-tree-id122 . -10) (undo-tree-id123 . -10) (undo-tree-id124 . -10) (undo-tree-id125 . -10) (undo-tree-id126 . -10) (undo-tree-id127 . -10) (undo-tree-id128 . -10) (undo-tree-id129 . -10) (undo-tree-id130 . -10) (undo-tree-id131 . -10) (undo-tree-id132 . -10) (undo-tree-id133 . -10) (undo-tree-id134 . -10) (undo-tree-id135 . -10) (undo-tree-id136 . -10) (undo-tree-id137 . -40) (t 25799 2723 487465 124000)) nil (25799 4990 58736 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t help-echo cider--help-echo cider-locals nil)) . -378) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) 379) nil (25799 4990 58722 0) 0 nil])
([nil nil ((#("token" 0 5 (fontified t help-echo cider--help-echo cider-locals nil face clojure-keyword-face)) . 347) (undo-tree-id138 . -5) (t 25799 4990 66316 416000)) nil (25799 5001 979504 0) 0 nil])
([nil nil ((347 . 355)) nil (25799 5001 979495 0) 0 nil])
([nil nil ((#("String" 0 6 (fontified t help-echo cider--help-echo cider-locals nil)) . -373) (undo-tree-id139 . -6) (undo-tree-id140 . -6) (undo-tree-id141 . -6) (undo-tree-id142 . -6) (undo-tree-id143 . -6) (undo-tree-id144 . -6) (undo-tree-id145 . -6) (undo-tree-id146 . -6) (undo-tree-id147 . -6) (undo-tree-id148 . -6) (undo-tree-id149 . -6) (undo-tree-id150 . -6) (undo-tree-id151 . -6) (undo-tree-id152 . -6) (undo-tree-id153 . -6) (undo-tree-id154 . -6) (undo-tree-id155 . -6) (undo-tree-id156 . -6) (undo-tree-id157 . -6) (undo-tree-id158 . -6) (undo-tree-id159 . -6) (undo-tree-id160 . -6) (undo-tree-id161 . -6) 379 (t 25799 5001 985238 490000)) nil (25799 5112 573021 0) 0 nil])
([nil nil ((373 . 377)) nil (25799 5112 573003 0) 0 nil])
([nil nil ((377 . 380) (t 25799 5112 578952 838000)) nil (25799 5117 243731 0) 0 nil])
([nil nil ((872 . 877) (t 25799 5117 249891 324000)) nil (25799 7201 423728 0) 0 nil])
([nil nil ((873 . 878) (#("    " 0 4 (help-echo cider--help-echo fontified t ws-butler-chg chg cider-locals nil)) . 873) (undo-tree-id166 . -4) 877) nil (25799 7201 423727 0) 0 nil])
([nil nil ((872 . 877)) nil (25799 7201 423725 0) 0 nil])
([nil nil ((#("G" 0 1 (help-echo cider--help-echo fontified t ws-butler-chg chg cider-locals nil face clojure-keyword-face)) . -873) (undo-tree-id162 . -1) (#("e" 0 1 (help-echo cider--help-echo fontified t ws-butler-chg chg cider-locals nil face clojure-keyword-face)) . -874) (undo-tree-id163 . -1) (#("t" 0 1 (help-echo cider--help-echo fontified t ws-butler-chg chg cider-locals nil face clojure-keyword-face)) . -875) (undo-tree-id164 . -1) (#("U" 0 1 (help-echo cider--help-echo fontified t ws-butler-chg chg cider-locals nil face clojure-keyword-face)) . -876) (undo-tree-id165 . -1) 877) nil (25799 7201 423724 0) 0 nil])
([nil nil ((873 . 887)) nil (25799 7201 423716 0) 0 nil])
([nil nil ((887 . 892)) nil (25799 7201 423716 0) 0 nil])
([nil nil ((892 . 894)) nil (25799 7201 423715 0) 0 nil])
([nil nil ((893 . 904)) nil (25799 7201 423712 0) 0 nil])
([nil nil ((904 . 910) (t 25799 7201 429324 441000)) nil (25799 7220 713781 0) 0 nil])
([nil nil ((910 . 916)) nil (25799 7220 713781 0) 0 nil])
([nil nil ((#("r" 0 1 (fontified t help-echo cider--help-echo ws-butler-chg chg cider-locals nil face clojure-keyword-face)) . -915) (undo-tree-id167 . -1) 916) nil (25799 7220 713780 0) 0 nil])
([nil nil ((915 . 922)) nil (25799 7220 713774 0) 0 nil])
([nil nil ((922 . 924)) nil (25799 7220 713773 0) 0 nil])
([nil nil ((923 . 943)) nil (25799 7220 713773 0) 0 nil])
([nil nil ((943 . 945)) nil (25799 7220 713773 0) 0 nil])
([nil nil ((946 . 952)) nil (25799 7220 713772 0) 0 nil])
([nil nil ((952 . 957)) nil (25799 7220 713772 0) 0 nil])
([nil nil ((957 . 963)) nil (25799 7220 713771 0) 0 nil])
([nil nil ((963 . 965)) nil (25799 7220 713771 0) 0 nil])
([nil nil ((964 . 974)) nil (25799 7220 713770 0) 0 nil])
([nil nil ((974 . 976)) nil (25799 7220 713770 0) 0 nil])
([nil nil ((975 . 987)) nil (25799 7220 713767 0) 0 nil])
([nil nil ((#("
" 0 1 (help-echo cider--help-echo fontified t cider-locals nil)) . -990) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) 991 (t 25799 7220 719695 155000)) nil (25799 7223 573750 0) 0 nil])
([nil nil ((172 . 177) (t 25799 7223 579619 514000)) nil (25799 8542 695572 0) 0 nil])
([nil nil ((177 . 187)) nil (25799 8542 695571 0) 0 nil])
([nil nil ((187 . 189)) nil (25799 8542 695571 0) 0 nil])
([nil nil ((188 . 194)) nil (25799 8542 695570 0) 0 nil])
([nil nil ((194 . 196)) nil (25799 8542 695570 0) 0 nil])
([nil nil ((195 . 204)) nil (25799 8542 695568 0) 0 nil])
([nil nil ((204 . 210)) nil (25799 8542 695564 0) 0 nil])
([nil nil ((#("User" 0 4 (fontified t help-echo cider--help-echo cider-locals nil face clojure-keyword-face)) . -1856) (undo-tree-id4 . -4) 1860 (t 25799 8542 701980 316000)) nil (25799 9920 934209 0) 0 nil])
([nil nil ((#(":" 0 1 (fontified t help-echo cider--help-echo cider-locals nil)) . -1855) (undo-tree-id3 . -1) 1856) nil (25799 9920 934207 0) 0 nil])
([nil nil ((1855 . 1858)) nil (25799 9920 934206 0) 0 nil])
([nil nil ((#("V" 0 1 (fontified t help-echo cider--help-echo ws-butler-chg chg cider-locals nil)) . -1855) (undo-tree-id0 . -1) (#("o" 0 1 (fontified t help-echo cider--help-echo ws-butler-chg chg cider-locals nil)) . -1856) (undo-tree-id1 . -1) (#("o" 0 1 (fontified t help-echo cider--help-echo ws-butler-chg chg cider-locals nil)) . -1857) (undo-tree-id2 . -1) 1858) nil (25799 9920 934204 0) 0 nil])
([nil nil ((1855 . 1862)) nil (25799 9920 934185 0) 0 nil])
([nil nil ((#("Boolean" 0 7 (fontified t help-echo cider--help-echo cider-locals nil)) . -1855) (undo-tree-id5 . -7) (undo-tree-id6 . -7) (undo-tree-id7 . -7) (undo-tree-id8 . -7) (undo-tree-id9 . -7) (undo-tree-id10 . -7) (undo-tree-id11 . -7) (undo-tree-id12 . -7) (undo-tree-id13 . -7) (undo-tree-id14 . -7) (undo-tree-id15 . -7) (undo-tree-id16 . -7) (undo-tree-id17 . -7) (undo-tree-id18 . -7) (undo-tree-id19 . -7) (undo-tree-id20 . -7) (undo-tree-id21 . -7) (undo-tree-id22 . -7) (undo-tree-id23 . -7) (undo-tree-id24 . -7) (undo-tree-id25 . -7) (undo-tree-id26 . -7) (undo-tree-id27 . -7) (undo-tree-id28 . -7) (undo-tree-id29 . -7) (undo-tree-id30 . -7) (undo-tree-id31 . -7) (undo-tree-id32 . -7) (undo-tree-id33 . -7) (undo-tree-id34 . -7) 1862 (t 25799 9920 941283 97000)) nil (25799 10029 666410 0) 0 nil])
([nil nil ((1855 . 1861)) nil (25799 10029 666391 0) 0 nil])
([nil nil ((1574 . 1579) (t 25799 10029 672428 22000)) nil (25799 26726 491725 0) 0 nil])
([nil nil ((1579 . 1580)) nil (25799 26726 491721 0) 0 nil])
([nil nil ((1580 . 1586) (t 25799 26726 499785 346000)) nil (25799 26742 223208 0) 0 nil])
([nil nil ((#("Create" 0 6 (fontified t help-echo cider--help-echo ws-butler-chg chg cider-locals nil face clojure-keyword-face)) . -1580) (undo-tree-id404 . -6) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -2) (undo-tree-id449 . -2) (undo-tree-id450 . -2) (undo-tree-id451 . -2) (undo-tree-id452 . -2) (undo-tree-id453 . -2) (undo-tree-id454 . -2) (undo-tree-id455 . -2) (undo-tree-id456 . -3) (undo-tree-id457 . -3) (undo-tree-id458 . -3) (undo-tree-id459 . -3) (undo-tree-id460 . -3) (undo-tree-id461 . -3) (undo-tree-id462 . -3) (undo-tree-id463 . -3) (undo-tree-id464 . -4) (undo-tree-id465 . -4) (undo-tree-id466 . -4) (undo-tree-id467 . -4) (undo-tree-id468 . -4) (undo-tree-id469 . -4) (undo-tree-id470 . -4) (undo-tree-id471 . -4) (undo-tree-id472 . -4) (undo-tree-id473 . -4) (undo-tree-id474 . -4) (undo-tree-id475 . -4) (undo-tree-id476 . -4) (undo-tree-id477 . -4) (undo-tree-id478 . -4) (undo-tree-id479 . -5) (undo-tree-id480 . -5) (undo-tree-id481 . -5) (undo-tree-id482 . -5) (undo-tree-id483 . -5) (undo-tree-id484 . -5) (undo-tree-id485 . -5) (undo-tree-id486 . -5) (undo-tree-id487 . -6) (undo-tree-id488 . -6) (undo-tree-id489 . -6) (undo-tree-id490 . -6) (undo-tree-id491 . -6) (undo-tree-id492 . -6) (undo-tree-id493 . -6) (undo-tree-id494 . -6) (undo-tree-id495 . -6) (undo-tree-id496 . -6) (undo-tree-id497 . -6) (undo-tree-id498 . -6) (undo-tree-id499 . -6) (undo-tree-id500 . -6) (undo-tree-id501 . -6) (undo-tree-id502 . -6) (undo-tree-id503 . -6) (undo-tree-id504 . -6) (undo-tree-id505 . -6) (undo-tree-id506 . -6) (undo-tree-id507 . -6) (undo-tree-id508 . -6) (undo-tree-id509 . -6) (undo-tree-id510 . -6) (undo-tree-id511 . -6) (undo-tree-id512 . -6) (undo-tree-id513 . -6) (undo-tree-id514 . -6) (undo-tree-id515 . -6) (undo-tree-id516 . -6) (undo-tree-id517 . -6) (undo-tree-id518 . -6) (undo-tree-id519 . -6) (undo-tree-id520 . -6) (undo-tree-id521 . -6) (undo-tree-id522 . -6) (undo-tree-id523 . -6) (undo-tree-id524 . -6) (undo-tree-id525 . -6) (undo-tree-id526 . -6) (undo-tree-id527 . -6) (undo-tree-id528 . -6) (undo-tree-id529 . -6) (undo-tree-id530 . -6) (undo-tree-id531 . -6) (undo-tree-id532 . -6) (undo-tree-id533 . -6) (undo-tree-id534 . -6) (undo-tree-id535 . -6) (undo-tree-id536 . -6) (undo-tree-id537 . -6) (undo-tree-id538 . -6) (undo-tree-id539 . -6) (undo-tree-id540 . -6) (undo-tree-id541 . -6) (undo-tree-id542 . -6) (undo-tree-id543 . -6) (undo-tree-id544 . -6) (undo-tree-id545 . -6) (undo-tree-id546 . -6) (undo-tree-id547 . -6) (undo-tree-id548 . -6) (undo-tree-id549 . -6) (undo-tree-id550 . -6) (undo-tree-id551 . -6) (undo-tree-id552 . -6) (undo-tree-id553 . -6) (undo-tree-id554 . -6) (undo-tree-id555 . -6) (undo-tree-id556 . -6) (undo-tree-id557 . -6) (undo-tree-id558 . -6) (undo-tree-id559 . -6) (undo-tree-id560 . -6) (undo-tree-id561 . -6) (undo-tree-id562 . -6) (undo-tree-id563 . -6) (undo-tree-id564 . -6) (undo-tree-id565 . -6) (undo-tree-id566 . -6) (undo-tree-id567 . -6) (undo-tree-id568 . -6) (undo-tree-id569 . -6) (undo-tree-id570 . -6) (undo-tree-id571 . -6) (undo-tree-id572 . -6) (undo-tree-id573 . -6) (undo-tree-id574 . -6) (undo-tree-id575 . -6) (undo-tree-id576 . -6) (undo-tree-id577 . -6) (undo-tree-id578 . -6) (undo-tree-id579 . -6) (undo-tree-id580 . -6) (undo-tree-id581 . -6) (undo-tree-id582 . -6) (undo-tree-id583 . -6) (undo-tree-id584 . -6) (undo-tree-id585 . -6) (undo-tree-id586 . -6) (undo-tree-id587 . -6) (undo-tree-id588 . -6) (undo-tree-id589 . -6) (undo-tree-id590 . -6) (undo-tree-id591 . -6) (undo-tree-id592 . -6) (undo-tree-id593 . -6) (undo-tree-id594 . -6) (undo-tree-id595 . -6) (undo-tree-id596 . -6) (undo-tree-id597 . -6) (undo-tree-id598 . -6) (undo-tree-id599 . -6) (undo-tree-id600 . -6) (undo-tree-id601 . -6) (undo-tree-id602 . -6) (undo-tree-id603 . -6) (undo-tree-id604 . -6) (undo-tree-id605 . -6) (undo-tree-id606 . -6) (undo-tree-id607 . -6) (undo-tree-id608 . -6) (undo-tree-id609 . -6) (undo-tree-id610 . -6) (undo-tree-id611 . -6) (undo-tree-id612 . -6) (undo-tree-id613 . -6) (undo-tree-id614 . -6) (undo-tree-id615 . -6) (undo-tree-id616 . -6) (undo-tree-id617 . -6) 1586) nil (25799 26742 223204 0) 0 nil])
([nil nil ((1580 . 1581)) nil (25799 26742 223130 0) 0 nil])
([nil nil ((1581 . 1583)) nil (25799 26742 223129 0) 0 nil])
([nil nil ((#("G" 0 1 (fontified t help-echo cider--help-echo ws-butler-chg chg cider-locals nil face clojure-keyword-face)) . -1580) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (#("e" 0 1 (fontified t help-echo cider--help-echo ws-butler-chg chg cider-locals nil face clojure-keyword-face)) . -1581) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (#("t" 0 1 (fontified t help-echo cider--help-echo ws-butler-chg chg cider-locals nil face clojure-keyword-face)) . -1582) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) 1583) nil (25799 26742 223121 0) 0 nil])
([nil nil ((1580 . 1584)) nil (25799 26742 222965 0) 0 nil])
([nil nil ((1584 . 1589) (t 25799 26742 229111 54000)) nil (25799 26761 394748 0) 0 nil])
([nil nil ((1589 . 1591)) nil (25799 26761 394747 0) 0 nil])
([nil nil ((1590 . 1601)) nil (25799 26761 394747 0) 0 nil])
([nil nil ((1601 . 1607)) nil (25799 26761 394746 0) 0 nil])
([nil nil ((1607 . 1615)) nil (25799 26761 394746 0) 0 nil])
([nil nil ((1615 . 1620)) nil (25799 26761 394745 0) 0 nil])
([nil nil ((1620 . 1622)) nil (25799 26761 394745 0) 0 nil])
([nil nil ((1621 . 1640)) nil (25799 26761 394742 0) 0 nil])
([nil nil ((1641 . 1647) (t 25799 26761 400933 48000)) nil (25799 26771 754567 0) 0 nil])
([nil nil ((1647 . 1648)) nil (25799 26771 754566 0) 0 nil])
([nil nil ((1648 . 1653)) nil (25799 26771 754565 0) 0 nil])
([nil nil ((1653 . 1655)) nil (25799 26771 754560 0) 0 nil])
([nil nil ((2 . 3) (1765 . 1766) (1 . 2) (t 25799 26771 761388 219000)) nil (25806 51994 390590 0) 0 nil])
([nil nil ((1 . 3)) nil (25806 51994 390589 0) 0 nil])
([nil nil ((2 . 13)) nil (25806 51994 390588 0) 0 nil])
([nil nil ((13 . 17)) nil (25806 51994 390587 0) 0 nil])
([nil nil ((17 . 19)) nil (25806 51994 390586 0) 0 nil])
([nil nil ((19 . 21)) nil (25806 51994 390585 0) 0 nil])
([nil nil ((20 . 21)) nil (25806 51994 390584 0) 0 nil])
([nil nil ((#("\\" 0 1 (face clojure-character-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -21) (undo-tree-id7 . -1) (21 . 22)) nil (25806 51994 390583 0) 0 nil])
([nil nil ((#(">" 0 1 (face font-lock-function-name-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -20) (undo-tree-id6 . -1) 21) nil (25806 51994 390581 0) 0 nil])
([nil nil ((20 . 27)) nil (25806 51994 390579 0) 0 nil])
([nil nil ((27 . 30)) nil (25806 51994 390578 0) 0 nil])
([nil nil ((30 . 32)) nil (25806 51994 390577 0) 0 nil])
([nil nil ((31 . 32)) nil (25806 51994 390576 0) 0 nil])
([nil nil ((32 . 43)) nil (25806 51994 390575 0) 0 nil])
([nil nil ((43 . 45)) nil (25806 51994 390574 0) 0 nil])
([nil nil ((44 . 61)) nil (25806 51994 390573 0) 0 nil])
([nil nil ((62 . 66)) nil (25806 51994 390572 0) 0 nil])
([nil nil ((66 . 71)) nil (25806 51994 390571 0) 0 nil])
([nil nil ((71 . 72)) nil (25806 51994 390570 0) 0 nil])
([nil nil ((72 . 74)) nil (25806 51994 390570 0) 0 nil])
([nil nil ((73 . 79)) nil (25806 51994 390569 0) 0 nil])
([nil nil ((79 . 81)) nil (25806 51994 390568 0) 0 nil])
([nil nil ((80 . 86)) nil (25806 51994 390567 0) 0 nil])
([nil nil ((#("e" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -83) (undo-tree-id3 . -1) (#("p" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -84) (undo-tree-id4 . -1) (#(" " 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -85) (undo-tree-id5 . -1) 86) nil (25806 51994 390565 0) 0 nil])
([nil nil ((83 . 86)) nil (25806 51994 390561 0) 0 nil])
([nil nil ((85 . 86)) nil (25806 51994 390560 0) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -83) (undo-tree-id0 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo ws-butler-chg delete fontified nil)) . 84) (#("[" 0 1 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -84) (undo-tree-id1 . -1) (#("e" 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -85) (undo-tree-id2 . -1) 86) nil (25806 51994 390558 0) 0 nil])
([nil nil ((83 . 86)) nil (25806 51994 390538 0) 0 nil])
([nil nil ((86 . 88)) nil (25806 51994 390536 0) 0 nil])
([nil nil ((87 . 102)) nil (25806 52029 766192 0) 0 nil])
([nil nil ((1053 . 1059) (t 25806 51994 411944 445000)) nil (25807 3344 503177 0) 0 nil] [nil nil ((#(")}}}}}

{:objects
 {:User
  {:description \"A user object\"
   :fields
   {:id {:type (non-null Int)}
    :fullName {:type (non-null String)}
    :userName {:type (non-null String)}
    :password {:type (non-null String)}
    :email {:type (non-null String)}
    :auth {:type (non-null (list :Auth))}}}

  :Auth
  {:description \"A users auth level\"
   :fields
   {:id {:type (non-null Int)}
    :loggedIn {:type (non-null Boolean)}}}

  :Post
  {:description \"A text post by a user\"
   :fields
   {:id {:type (non-null Int)}
    :title {:type (non-null String)}
    :body {:type (non-null String)}
    :timeStamp {:type (non-null String)}
    :user {:type (non-null (list :User))}}}

  :Comment
  {:description \"a comment on a post\"
   :fields
   {:id {:type (non-null Int)}
    :body {:type (non-null String)}
    :timeStamp {:type (non-null String)}
    :post {:type (non-null (list :Post))}}}

  :Query
  {:fields
   {:UserbyUsername
    {:type :User
     :desciption \"Get a user by username\"
     :args
     {:username {:type String}}}
    :GetUser
    {:type :User
     :description \"Get a user by name\"
     :args
" 0 1 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo fontified t) 1 2 (face (rainbow-delimiters-depth-5-face) cider-locals nil help-echo cider--help-echo fontified t) 2 3 (face (rainbow-delimiters-depth-4-face) cider-locals nil help-echo cider--help-echo fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) cider-locals nil help-echo cider--help-echo fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) cider-locals nil help-echo cider--help-echo fontified t) 5 6 (face (rainbow-delimiters-depth-1-face) cider-locals nil help-echo cider--help-echo fontified t) 6 7 (cider-locals nil help-echo cider--help-echo fontified t) 7 8 (cider-locals nil fontified t help-echo cider--help-echo) 8 9 (face (rainbow-delimiters-depth-1-face) cider-locals nil fontified t help-echo cider--help-echo) 9 10 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 10 17 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 17 18 (cider-locals nil fontified t help-echo cider--help-echo) 18 19 (cider-locals nil fontified t help-echo cider--help-echo) 19 20 (face (rainbow-delimiters-depth-2-face) cider-locals nil fontified t help-echo cider--help-echo) 20 21 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 21 25 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 25 28 (cider-locals nil fontified t help-echo cider--help-echo) 28 29 (face (rainbow-delimiters-depth-3-face) cider-locals nil fontified t help-echo cider--help-echo) 29 30 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 30 41 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 41 42 (cider-locals nil fontified t help-echo cider--help-echo) 42 57 (face font-lock-string-face cider-locals nil fontified t help-echo cider--help-echo) 57 61 (cider-locals nil fontified t help-echo cider--help-echo) 61 62 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 62 68 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 68 72 (cider-locals nil fontified t help-echo cider--help-echo) 72 73 (face (rainbow-delimiters-depth-4-face) cider-locals nil fontified t help-echo cider--help-echo) 73 74 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 74 76 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 76 77 (cider-locals nil fontified t help-echo cider--help-echo) 77 78 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 78 79 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 79 83 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 83 84 (cider-locals nil fontified t help-echo cider--help-echo) 84 85 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 85 97 (cider-locals nil fontified t help-echo cider--help-echo) 97 98 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 98 99 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 99 104 (cider-locals nil fontified t help-echo cider--help-echo) 104 105 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 105 113 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 113 114 (cider-locals nil fontified t help-echo cider--help-echo) 114 115 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 115 116 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 116 120 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 120 121 (cider-locals nil fontified t help-echo cider--help-echo) 121 122 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 122 137 (cider-locals nil fontified t help-echo cider--help-echo) 137 138 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 138 139 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 139 144 (cider-locals nil fontified t help-echo cider--help-echo) 144 145 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 145 153 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 153 154 (cider-locals nil fontified t help-echo cider--help-echo) 154 155 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 155 156 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 156 160 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 160 161 (cider-locals nil fontified t help-echo cider--help-echo) 161 162 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 162 177 (cider-locals nil fontified t help-echo cider--help-echo) 177 178 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 178 179 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 179 184 (cider-locals nil fontified t help-echo cider--help-echo) 184 185 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 185 193 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 193 194 (cider-locals nil fontified t help-echo cider--help-echo) 194 195 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 195 196 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 196 200 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 200 201 (cider-locals nil fontified t help-echo cider--help-echo) 201 202 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 202 217 (cider-locals nil fontified t help-echo cider--help-echo) 217 218 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 218 219 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 219 224 (cider-locals nil fontified t help-echo cider--help-echo) 224 225 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 225 230 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 230 231 (cider-locals nil fontified t help-echo cider--help-echo) 231 232 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 232 233 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 233 237 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 237 238 (cider-locals nil fontified t help-echo cider--help-echo) 238 239 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 239 254 (cider-locals nil fontified t help-echo cider--help-echo) 254 255 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 255 256 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 256 261 (cider-locals nil fontified t help-echo cider--help-echo) 261 262 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 262 266 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 266 267 (cider-locals nil fontified t help-echo cider--help-echo) 267 268 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 268 269 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 269 273 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 273 274 (cider-locals nil fontified t help-echo cider--help-echo) 274 275 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 275 284 (cider-locals nil fontified t help-echo cider--help-echo) 284 285 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 285 289 (face font-lock-function-name-face cider-locals nil fontified t help-echo cider--help-echo) 289 290 (cider-locals nil fontified t help-echo cider--help-echo) 290 291 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 291 295 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 295 296 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 296 297 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 297 298 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 298 299 (face (rainbow-delimiters-depth-4-face) cider-locals nil fontified t help-echo cider--help-echo) 299 300 (face (rainbow-delimiters-depth-3-face) cider-locals nil fontified t help-echo cider--help-echo) 300 304 (cider-locals nil fontified t help-echo cider--help-echo) 304 305 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 305 309 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 309 312 (cider-locals nil fontified t help-echo cider--help-echo) 312 313 (face (rainbow-delimiters-depth-3-face) cider-locals nil fontified t help-echo cider--help-echo) 313 314 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 314 325 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 325 326 (cider-locals nil fontified t help-echo cider--help-echo) 326 346 (face font-lock-string-face cider-locals nil fontified t help-echo cider--help-echo) 346 350 (cider-locals nil fontified t help-echo cider--help-echo) 350 351 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 351 357 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 357 361 (cider-locals nil fontified t help-echo cider--help-echo) 361 362 (face (rainbow-delimiters-depth-4-face) cider-locals nil fontified t help-echo cider--help-echo) 362 363 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 363 365 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 365 366 (cider-locals nil fontified t help-echo cider--help-echo) 366 367 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 367 368 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 368 372 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 372 373 (cider-locals nil fontified t help-echo cider--help-echo) 373 374 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 374 386 (cider-locals nil fontified t help-echo cider--help-echo) 386 387 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 387 388 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 388 393 (cider-locals nil fontified t help-echo cider--help-echo) 393 394 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 394 402 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 402 403 (cider-locals nil fontified t help-echo cider--help-echo) 403 404 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 404 405 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 405 409 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 409 410 (cider-locals nil fontified t help-echo cider--help-echo) 410 411 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 411 427 (cider-locals nil fontified t help-echo cider--help-echo) 427 428 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 428 429 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 429 430 (face (rainbow-delimiters-depth-4-face) cider-locals nil fontified t help-echo cider--help-echo) 430 431 (face (rainbow-delimiters-depth-3-face) cider-locals nil fontified t help-echo cider--help-echo) 431 435 (cider-locals nil fontified t help-echo cider--help-echo) 435 436 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 436 440 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 440 443 (cider-locals nil fontified t help-echo cider--help-echo) 443 444 (face (rainbow-delimiters-depth-3-face) cider-locals nil fontified t help-echo cider--help-echo) 444 445 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 445 456 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 456 457 (cider-locals nil fontified t help-echo cider--help-echo) 457 480 (face font-lock-string-face cider-locals nil fontified t help-echo cider--help-echo) 480 484 (cider-locals nil fontified t help-echo cider--help-echo) 484 485 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 485 491 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 491 495 (cider-locals nil fontified t help-echo cider--help-echo) 495 496 (face (rainbow-delimiters-depth-4-face) cider-locals nil fontified t help-echo cider--help-echo) 496 497 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 497 499 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 499 500 (cider-locals nil fontified t help-echo cider--help-echo) 500 501 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 501 502 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 502 506 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 506 507 (cider-locals nil fontified t help-echo cider--help-echo) 507 508 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 508 520 (cider-locals nil fontified t help-echo cider--help-echo) 520 521 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 521 522 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 522 527 (cider-locals nil fontified t help-echo cider--help-echo) 527 528 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 528 533 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 533 534 (cider-locals nil fontified t help-echo cider--help-echo) 534 535 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 535 536 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 536 540 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 540 541 (cider-locals nil fontified t help-echo cider--help-echo) 541 542 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 542 557 (cider-locals nil fontified t help-echo cider--help-echo) 557 558 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 558 559 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 559 564 (cider-locals nil fontified t help-echo cider--help-echo) 564 565 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 565 569 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 569 570 (cider-locals nil fontified t help-echo cider--help-echo) 570 571 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 571 572 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 572 576 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 576 577 (cider-locals nil fontified t help-echo cider--help-echo) 577 578 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 578 593 (cider-locals nil fontified t help-echo cider--help-echo) 593 594 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 594 595 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 595 600 (cider-locals nil fontified t help-echo cider--help-echo) 600 601 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 601 610 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 610 611 (cider-locals nil fontified t help-echo cider--help-echo) 611 612 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 612 613 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 613 617 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 617 618 (cider-locals nil fontified t help-echo cider--help-echo) 618 619 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 619 634 (cider-locals nil fontified t help-echo cider--help-echo) 634 635 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 635 636 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 636 641 (cider-locals nil fontified t help-echo cider--help-echo) 641 642 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 642 646 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 646 647 (cider-locals nil fontified t help-echo cider--help-echo) 647 648 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 648 649 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 649 653 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 653 654 (cider-locals nil fontified t help-echo cider--help-echo) 654 655 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 655 664 (cider-locals nil fontified t help-echo cider--help-echo) 664 665 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 665 669 (face font-lock-function-name-face cider-locals nil fontified t help-echo cider--help-echo) 669 670 (cider-locals nil fontified t help-echo cider--help-echo) 670 671 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 671 675 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 675 676 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 676 677 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 677 678 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 678 679 (face (rainbow-delimiters-depth-4-face) cider-locals nil fontified t help-echo cider--help-echo) 679 680 (face (rainbow-delimiters-depth-3-face) cider-locals nil fontified t help-echo cider--help-echo) 680 684 (cider-locals nil fontified t help-echo cider--help-echo) 684 685 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 685 692 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 692 695 (cider-locals nil fontified t help-echo cider--help-echo) 695 696 (face (rainbow-delimiters-depth-3-face) cider-locals nil fontified t help-echo cider--help-echo) 696 697 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 697 708 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 708 709 (cider-locals nil fontified t help-echo cider--help-echo) 709 730 (face font-lock-string-face cider-locals nil fontified t help-echo cider--help-echo) 730 734 (cider-locals nil fontified t help-echo cider--help-echo) 734 735 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 735 741 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 741 745 (cider-locals nil fontified t help-echo cider--help-echo) 745 746 (face (rainbow-delimiters-depth-4-face) cider-locals nil fontified t help-echo cider--help-echo) 746 747 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 747 749 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 749 750 (cider-locals nil fontified t help-echo cider--help-echo) 750 751 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 751 752 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 752 756 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 756 757 (cider-locals nil fontified t help-echo cider--help-echo) 757 758 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 758 770 (cider-locals nil fontified t help-echo cider--help-echo) 770 771 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 771 772 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 772 777 (cider-locals nil fontified t help-echo cider--help-echo) 777 778 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 778 782 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 782 783 (cider-locals nil fontified t help-echo cider--help-echo) 783 784 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 784 785 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 785 789 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 789 790 (cider-locals nil fontified t help-echo cider--help-echo) 790 791 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 791 806 (cider-locals nil fontified t help-echo cider--help-echo) 806 807 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 807 808 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 808 813 (cider-locals nil fontified t help-echo cider--help-echo) 813 814 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 814 823 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 823 824 (cider-locals nil fontified t help-echo cider--help-echo) 824 825 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 825 826 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 826 830 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 830 831 (cider-locals nil fontified t help-echo cider--help-echo) 831 832 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 832 847 (cider-locals nil fontified t help-echo cider--help-echo) 847 848 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 848 849 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 849 854 (cider-locals nil fontified t help-echo cider--help-echo) 854 855 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 855 859 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 859 860 (cider-locals nil fontified t help-echo cider--help-echo) 860 861 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 861 862 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 862 866 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 866 867 (cider-locals nil fontified t help-echo cider--help-echo) 867 868 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 868 877 (cider-locals nil fontified t help-echo cider--help-echo) 877 878 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 878 882 (face font-lock-function-name-face cider-locals nil fontified t help-echo cider--help-echo) 882 883 (cider-locals nil fontified t help-echo cider--help-echo) 883 884 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 884 888 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 888 889 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 889 890 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 890 891 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 891 892 (face (rainbow-delimiters-depth-4-face) cider-locals nil fontified t help-echo cider--help-echo) 892 893 (face (rainbow-delimiters-depth-3-face) cider-locals nil fontified t help-echo cider--help-echo) 893 897 (cider-locals nil fontified t help-echo cider--help-echo) 897 898 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 898 903 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 903 906 (cider-locals nil fontified t help-echo cider--help-echo) 906 907 (face (rainbow-delimiters-depth-3-face) cider-locals nil fontified t help-echo cider--help-echo) 907 908 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 908 914 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 914 918 (cider-locals nil fontified t help-echo cider--help-echo) 918 919 (face (rainbow-delimiters-depth-4-face) cider-locals nil fontified t help-echo cider--help-echo) 919 920 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 920 934 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 934 939 (cider-locals nil fontified t help-echo cider--help-echo) 939 940 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 940 941 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 941 945 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 945 946 (cider-locals nil fontified t help-echo cider--help-echo) 946 947 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 947 951 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 951 957 (cider-locals nil fontified t help-echo cider--help-echo) 957 958 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 958 968 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 968 969 (cider-locals nil fontified t help-echo cider--help-echo) 969 993 (face font-lock-string-face cider-locals nil fontified t help-echo cider--help-echo) 993 999 (cider-locals nil fontified t help-echo cider--help-echo) 999 1000 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 1000 1004 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 1004 1010 (cider-locals nil fontified t help-echo cider--help-echo) 1010 1011 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 1011 1012 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 1012 1020 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 1020 1021 (cider-locals nil fontified t help-echo cider--help-echo) 1021 1022 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 1022 1023 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 1023 1027 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 1027 1034 (cider-locals nil fontified t help-echo cider--help-echo) 1034 1035 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 1035 1036 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 1036 1037 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 1037 1042 (cider-locals nil fontified t help-echo cider--help-echo) 1042 1043 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 1043 1050 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 1050 1055 (cider-locals nil fontified t help-echo cider--help-echo) 1055 1056 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 1056 1057 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 1057 1061 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 1061 1062 (cider-locals nil fontified t help-echo cider--help-echo) 1062 1063 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 1063 1067 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 1067 1073 (cider-locals nil fontified t help-echo cider--help-echo) 1073 1074 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 1074 1085 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 1085 1086 (cider-locals nil fontified t help-echo cider--help-echo) 1086 1106 (face font-lock-string-face cider-locals nil fontified t help-echo cider--help-echo) 1106 1112 (cider-locals nil fontified t help-echo cider--help-echo) 1112 1113 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 1113 1117 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 1117 1118 (cider-locals nil fontified t help-echo cider--help-echo)) . 102) (undo-tree-id8 . -21) (undo-tree-id9 . -21) (undo-tree-id10 . -742) (undo-tree-id11 . 1118) (undo-tree-id12 . -21) (undo-tree-id13 . -1118) 1220 (t 25806 51994 411944 445000)) ((nil ws-butler-chg delete 1220 . 1221) (102 . 1220)) (25806 52029 765243 0) 0 nil])
([nil nil ((1059 . 1067)) nil (25807 3344 503176 0) 0 nil])
nil
([nil nil ((#("t" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . -1065) (undo-tree-id15 . -1) (#("v" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . -1066) (undo-tree-id16 . -1) 1067) nil (25807 3344 503175 0) 0 nil])
([nil nil ((1065 . 1071)) nil (25807 3344 503172 0) 0 nil])
([nil nil ((1071 . 1073)) nil (25807 3344 503171 0) 0 nil])
([nil nil ((1072 . 1074)) nil (25807 3344 503170 0) 0 nil])
([nil nil ((1073 . 1092)) nil (25807 3344 503169 0) 0 nil])
([nil nil ((#("s" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1091) (undo-tree-id14 . -1) 1092) nil (25807 3344 503167 0) 0 nil])
([nil nil ((1091 . 1096)) nil (25807 3344 503159 0) 0 nil])
([nil nil ((1096 . 1116)) nil (25807 3344 503158 0) 0 nil])
([nil nil ((1116 . 1132)) nil (25807 3344 503157 0) 0 nil])
([nil nil ((1132 . 1134)) nil (25807 3344 503156 0) 0 nil])
([nil nil ((1133 . 1138)) nil (25807 3344 503156 0) 0 nil])
([nil nil ((1138 . 1139)) nil (25807 3344 503155 0) 0 nil])
([nil nil ((1139 . 1141)) nil (25807 3344 503153 0) 0 nil])
([nil nil ((1140 . 1145)) nil (25807 3483 257237 0) 0 nil])
([nil nil ((apply -12 1 121 undo--wrap-and-run-primitive-undo 1 121 ((72 . 75) (34 . 37) (21 . 24) (1 . 4) 108))) nil (25807 3485 473636 0) 0 nil] [nil nil ((1 . 2) (t 25807 3344 525383 338000)) ((#("
" 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . 1) (undo-tree-id0 . -1) (undo-tree-id1 . -1)) (25807 3483 256869 0) 0 nil])
([nil nil ((apply -6 1071 1168 undo--wrap-and-run-primitive-undo 1071 1168 (("     " . 1071) (1122 . 1125) (1071 . 1079) 1161))) nil (25807 3494 325635 0) 0 nil])
nil
([nil nil ((apply 12 1 108 undo--wrap-and-run-primitive-undo 1 108 ((#(";; " 0 3 (face font-lock-comment-delimiter-face cider-locals nil help-echo cider--help-echo fontified t)) . -63) (#(";; " 0 3 (face font-lock-comment-delimiter-face cider-locals nil help-echo cider--help-echo fontified t)) . -28) (#(";; " 0 3 (face font-lock-comment-delimiter-face cider-locals nil help-echo cider--help-echo fontified t)) . -18) (#(";; " 0 3 (face font-lock-comment-delimiter-face cider-locals nil help-echo cider--help-echo fontified t)) . -1) 120))) nil (25807 3540 474413 0) 0 nil])
([nil nil ((#("{:directive-defs
 {:access
  {:locations #{:field-definition}
   :args {:role {:type (non-null String)}}}}}" 0 1 (face (rainbow-delimiters-depth-1-face) cider-locals nil help-echo cider--help-echo fontified t) 1 2 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 2 16 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 16 17 (cider-locals nil help-echo cider--help-echo fontified t) 17 18 (cider-locals nil fontified t help-echo cider--help-echo) 18 19 (face (rainbow-delimiters-depth-2-face) cider-locals nil fontified t help-echo cider--help-echo) 19 20 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 20 26 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 26 27 (cider-locals nil fontified t help-echo cider--help-echo) 27 29 (cider-locals nil fontified t help-echo cider--help-echo) 29 30 (face (rainbow-delimiters-depth-3-face) cider-locals nil fontified t help-echo cider--help-echo) 30 31 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 31 40 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 40 42 (cider-locals nil fontified t help-echo cider--help-echo) 42 43 (face (rainbow-delimiters-depth-4-face) cider-locals nil fontified t help-echo cider--help-echo) 43 44 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 44 60 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 60 61 (face (rainbow-delimiters-depth-4-face) cider-locals nil fontified t help-echo cider--help-echo) 61 62 (cider-locals nil fontified t help-echo cider--help-echo) 62 65 (cider-locals nil fontified t help-echo cider--help-echo) 65 66 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 66 70 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 70 71 (cider-locals nil fontified t help-echo cider--help-echo) 71 72 (face (rainbow-delimiters-depth-4-face) cider-locals nil fontified t help-echo cider--help-echo) 72 73 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 73 77 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 77 78 (cider-locals nil fontified t help-echo cider--help-echo) 78 79 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 79 80 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 80 84 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 84 85 (cider-locals nil fontified t help-echo cider--help-echo) 85 86 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 86 101 (cider-locals nil fontified t help-echo cider--help-echo) 101 102 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 102 103 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 103 104 (face (rainbow-delimiters-depth-4-face) cider-locals nil fontified t help-echo cider--help-echo) 104 105 (face (rainbow-delimiters-depth-3-face) cider-locals nil fontified t help-echo cider--help-echo) 105 106 (face (rainbow-delimiters-depth-2-face) cider-locals nil fontified t help-echo cider--help-echo) 106 107 (face (rainbow-delimiters-depth-1-face) cider-locals nil fontified t help-echo cider--help-echo)) . 1) (undo-tree-id36 . -107) (undo-tree-id37 . -107) (undo-tree-id38 . -107) (undo-tree-id39 . -107) (undo-tree-id40 . -107) (undo-tree-id41 . -107) 108 (t 25807 3540 494935 342000)) nil (25807 3777 184688 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil ws-butler-chg delete fontified t help-echo cider--help-echo)) . -1) (undo-tree-id35 . -1) 2) nil (25807 3777 184681 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil ws-butler-chg delete fontified t help-echo cider--help-echo)) . -1) (undo-tree-id34 . -1) 2) nil (25807 3777 184679 0) 0 nil])
([nil nil ((2 . 4)) nil (25807 3777 184677 0) 0 nil])
([nil nil ((3 . 5) (#(" " 0 1 (cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . 3) (undo-tree-id33 . -1) 4) nil (25807 3777 184676 0) 0 nil])
([nil nil ((4 . 6) (#(" " 0 1 (cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . 4) (undo-tree-id32 . -1) 5) nil (25807 3777 184673 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 108 . 109) (nil help-echo cider--help-echo 108 . 109) (nil fontified nil 108 . 109) (nil help-echo cider--help-echo 107 . 108) (nil fontified nil 107 . 108) (nil help-echo cider--help-echo 106 . 107) (nil fontified nil 106 . 107) (nil help-echo cider--help-echo 105 . 106) (nil fontified nil 105 . 106) (nil help-echo cider--help-echo 104 . 105) (nil fontified nil 104 . 105) (nil help-echo cider--help-echo 103 . 104) (nil fontified nil 103 . 104) (nil help-echo cider--help-echo 88 . 103) (nil fontified nil 88 . 103) (nil help-echo cider--help-echo 87 . 88) (nil fontified nil 87 . 88) (nil help-echo cider--help-echo 86 . 87) (nil fontified nil 86 . 87) (nil help-echo cider--help-echo 82 . 86) (nil fontified nil 82 . 86) (nil help-echo cider--help-echo 81 . 82) (nil fontified nil 81 . 82) (nil help-echo cider--help-echo 80 . 81) (nil fontified nil 80 . 81) (nil help-echo cider--help-echo 79 . 80) (nil fontified nil 79 . 80) (nil help-echo cider--help-echo 75 . 79) (nil fontified nil 75 . 79) (nil help-echo cider--help-echo 74 . 75) (nil fontified nil 74 . 75) (nil help-echo cider--help-echo 73 . 74) (nil fontified nil 73 . 74) (nil help-echo cider--help-echo 72 . 73) (nil fontified nil 72 . 73) (nil help-echo cider--help-echo 68 . 72) (nil fontified nil 68 . 72) (nil help-echo cider--help-echo 67 . 68) (nil fontified nil 67 . 68) (nil help-echo cider--help-echo 64 . 67) (nil fontified nil 64 . 67) (nil help-echo cider--help-echo 63 . 64) (nil fontified nil 63 . 64) (nil help-echo cider--help-echo 62 . 63) (nil fontified nil 62 . 63) (nil help-echo cider--help-echo 46 . 62) (nil fontified nil 46 . 62) (nil help-echo cider--help-echo 45 . 46) (nil fontified nil 45 . 46) (nil help-echo cider--help-echo 44 . 45) (nil fontified nil 44 . 45) (nil help-echo cider--help-echo 42 . 44) (nil fontified nil 42 . 44) (nil help-echo cider--help-echo 33 . 42) (nil fontified nil 33 . 42) (nil help-echo cider--help-echo 32 . 33) (nil fontified nil 32 . 33) (nil help-echo cider--help-echo 31 . 32) (nil fontified nil 31 . 32) (nil help-echo cider--help-echo 29 . 31) (nil fontified nil 29 . 31) (nil help-echo cider--help-echo 28 . 29) (nil fontified nil 28 . 29) (nil help-echo cider--help-echo 22 . 28) (nil fontified nil 22 . 28) (nil help-echo cider--help-echo 21 . 22) (nil fontified nil 21 . 22) (nil help-echo cider--help-echo 20 . 21) (nil fontified nil 20 . 21) (nil help-echo cider--help-echo 19 . 20) (nil fontified nil 19 . 20) (nil help-echo cider--help-echo 18 . 19) (nil fontified nil 18 . 19) (nil help-echo cider--help-echo 4 . 18) (nil fontified nil 4 . 18) (nil help-echo cider--help-echo 3 . 4) (nil fontified nil 3 . 4) (nil help-echo cider--help-echo 2 . 3) (nil fontified nil 2 . 3) (2 . 109)) nil (25807 3777 184667 0) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-2-face) cider-locals nil help-echo cider--help-echo fontified t ws-butler-chg chg)) . -2) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) cider-locals nil help-echo cider--help-echo rear-nonsticky t fontified t ws-butler-chg chg)) . -108) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) 3) nil (25807 3777 184643 0) 0 nil])
([nil nil ((apply 6 1054 1149 undo--wrap-and-run-primitive-undo 1054 1149 ((#(";; " 0 3 (face font-lock-comment-delimiter-face cider-locals nil fontified t help-echo cider--help-echo)) . -1102) (#(";; " 0 3 (face font-lock-comment-delimiter-face cider-locals nil fontified t help-echo cider--help-echo)) . -1059) 1155))) nil (25807 3850 435026 0) 0 nil])
([nil nil ((#("     :directives [{:directive-type :access
                   :directive-args {:role \"thing\"}}]" 0 5 (cider-locals nil fontified t help-echo cider--help-echo) 5 6 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 6 16 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 16 17 (cider-locals nil fontified t help-echo cider--help-echo) 17 18 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 18 19 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 19 20 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 20 34 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 34 35 (cider-locals nil fontified t help-echo cider--help-echo) 35 36 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 36 42 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 42 43 (cider-locals nil fontified t help-echo cider--help-echo) 43 48 (cider-locals nil fontified t help-echo cider--help-echo) 48 62 (cider-locals nil fontified t help-echo cider--help-echo) 62 63 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 63 77 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 77 78 (cider-locals nil fontified t help-echo cider--help-echo) 78 79 (face (rainbow-delimiters-depth-8-face) cider-locals nil fontified t help-echo cider--help-echo) 79 80 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 80 84 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 84 85 (cider-locals nil fontified t help-echo cider--help-echo) 85 92 (face font-lock-string-face cider-locals nil fontified t help-echo cider--help-echo) 92 93 (face (rainbow-delimiters-depth-8-face) cider-locals nil fontified t help-echo cider--help-echo) 93 94 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 94 95 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo)) . 1054) (undo-tree-id51 . -95) (undo-tree-id52 . -95) (undo-tree-id53 . -5) (undo-tree-id54 . -95) (undo-tree-id55 . -95) (undo-tree-id56 . -95) (undo-tree-id57 . -95) (t 25807 3850 456024 576000)) nil (25807 4113 548078 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . -1053) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) 1054) nil (25807 4113 548070 0) 0 nil])
([nil nil ((1169 . 1175)) nil (25807 4113 548042 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1269 . 1270) (nil help-echo cider--help-echo 1269 . 1270) (nil fontified nil 1269 . 1270) (nil help-echo cider--help-echo 1268 . 1269) (nil fontified nil 1268 . 1269) (nil help-echo cider--help-echo 1267 . 1268) (nil fontified nil 1267 . 1268) (nil help-echo cider--help-echo 1260 . 1267) (nil fontified nil 1260 . 1267) (nil help-echo cider--help-echo 1259 . 1260) (nil fontified nil 1259 . 1260) (nil help-echo cider--help-echo 1255 . 1259) (nil fontified nil 1255 . 1259) (nil help-echo cider--help-echo 1254 . 1255) (nil fontified nil 1254 . 1255) (nil help-echo cider--help-echo 1253 . 1254) (nil fontified nil 1253 . 1254) (nil help-echo cider--help-echo 1252 . 1253) (nil fontified nil 1252 . 1253) (nil help-echo cider--help-echo 1238 . 1252) (nil fontified nil 1238 . 1252) (nil help-echo cider--help-echo 1237 . 1238) (nil fontified nil 1237 . 1238) (nil help-echo cider--help-echo 1223 . 1237) (nil fontified nil 1223 . 1237) (nil help-echo cider--help-echo 1218 . 1223) (nil fontified nil 1218 . 1223) (nil help-echo cider--help-echo 1217 . 1218) (nil fontified nil 1217 . 1218) (nil help-echo cider--help-echo 1211 . 1217) (nil fontified nil 1211 . 1217) (nil help-echo cider--help-echo 1210 . 1211) (nil fontified nil 1210 . 1211) (nil help-echo cider--help-echo 1209 . 1210) (nil fontified nil 1209 . 1210) (nil help-echo cider--help-echo 1195 . 1209) (nil fontified nil 1195 . 1209) (nil help-echo cider--help-echo 1194 . 1195) (nil fontified nil 1194 . 1195) (nil help-echo cider--help-echo 1193 . 1194) (nil fontified nil 1193 . 1194) (nil help-echo cider--help-echo 1192 . 1193) (nil fontified nil 1192 . 1193) (nil help-echo cider--help-echo 1191 . 1192) (nil fontified nil 1191 . 1192) (nil help-echo cider--help-echo 1181 . 1191) (nil fontified nil 1181 . 1191) (nil help-echo cider--help-echo 1180 . 1181) (nil fontified nil 1180 . 1181) (nil help-echo cider--help-echo 1175 . 1180) (nil fontified nil 1175 . 1180) (1175 . 1270)) nil (25807 4113 548036 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 109) (#("   " 0 3 (cider-locals nil fontified t help-echo cider--help-echo)) . 1170) (#("  " 0 2 (cider-locals nil help-echo cider--help-echo fontified t)) . 1178) (#(" " 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . 1974) 1223 (t 25807 4113 570453 451000)) nil (25807 4116 837464 0) 0 nil])
([nil nil ((#("     :directives [{:directive-type :access
                   :directive-args {:role \"thing\"}}]" 0 2 (cider-locals nil fontified t help-echo cider--help-echo) 2 5 (cider-locals nil help-echo cider--help-echo fontified t) 5 6 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 6 16 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 16 17 (cider-locals nil help-echo cider--help-echo fontified t) 17 18 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo fontified t) 18 19 (face (rainbow-delimiters-depth-7-face) cider-locals nil help-echo cider--help-echo fontified t) 19 20 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 20 34 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 34 35 (cider-locals nil help-echo cider--help-echo fontified t) 35 36 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 36 42 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 42 43 (cider-locals nil help-echo cider--help-echo fontified t) 43 48 (cider-locals nil help-echo cider--help-echo fontified t) 48 62 (cider-locals nil help-echo cider--help-echo fontified t) 62 63 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 63 77 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 77 78 (cider-locals nil help-echo cider--help-echo fontified t) 78 79 (face (rainbow-delimiters-depth-8-face) cider-locals nil help-echo cider--help-echo fontified t) 79 80 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 80 84 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 84 85 (cider-locals nil help-echo cider--help-echo fontified t) 85 92 (face font-lock-string-face cider-locals nil help-echo cider--help-echo fontified t) 92 93 (face (rainbow-delimiters-depth-8-face) cider-locals nil help-echo cider--help-echo fontified t) 93 94 (face (rainbow-delimiters-depth-7-face) cider-locals nil help-echo cider--help-echo fontified t) 94 95 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo rear-nonsticky t fontified t)) . 1169) (undo-tree-id65 . -95) (undo-tree-id66 . -62) (undo-tree-id67 . -95) (undo-tree-id68 . -2) (undo-tree-id69 . -95) (undo-tree-id70 . -62) (t 25807 4116 858913 437000)) nil (25807 5232 854236 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . -1168) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) 1169) nil (25807 5232 854229 0) 0 nil])
([nil nil ((1240 . 1247)) nil (25807 5232 854216 0) 0 nil])
([nil nil ((nil help-echo cider--help-echo 1341 . 1342) (nil fontified nil 1341 . 1342) (nil help-echo cider--help-echo 1340 . 1341) (nil fontified nil 1340 . 1341) (nil help-echo cider--help-echo 1339 . 1340) (nil fontified nil 1339 . 1340) (nil help-echo cider--help-echo 1332 . 1339) (nil fontified nil 1332 . 1339) (nil help-echo cider--help-echo 1331 . 1332) (nil fontified nil 1331 . 1332) (nil help-echo cider--help-echo 1327 . 1331) (nil fontified nil 1327 . 1331) (nil help-echo cider--help-echo 1326 . 1327) (nil fontified nil 1326 . 1327) (nil help-echo cider--help-echo 1325 . 1326) (nil fontified nil 1325 . 1326) (nil help-echo cider--help-echo 1324 . 1325) (nil fontified nil 1324 . 1325) (nil help-echo cider--help-echo 1310 . 1324) (nil fontified nil 1310 . 1324) (nil help-echo cider--help-echo 1309 . 1310) (nil fontified nil 1309 . 1310) (nil help-echo cider--help-echo 1295 . 1309) (nil fontified nil 1295 . 1309) (nil help-echo cider--help-echo 1290 . 1295) (nil fontified nil 1290 . 1295) (nil help-echo cider--help-echo 1289 . 1290) (nil fontified nil 1289 . 1290) (nil help-echo cider--help-echo 1283 . 1289) (nil fontified nil 1283 . 1289) (nil help-echo cider--help-echo 1282 . 1283) (nil fontified nil 1282 . 1283) (nil help-echo cider--help-echo 1281 . 1282) (nil fontified nil 1281 . 1282) (nil help-echo cider--help-echo 1267 . 1281) (nil fontified nil 1267 . 1281) (nil help-echo cider--help-echo 1266 . 1267) (nil fontified nil 1266 . 1267) (nil help-echo cider--help-echo 1265 . 1266) (nil fontified nil 1265 . 1266) (nil help-echo cider--help-echo 1264 . 1265) (nil fontified nil 1264 . 1265) (nil help-echo cider--help-echo 1263 . 1264) (nil fontified nil 1263 . 1264) (nil help-echo cider--help-echo 1253 . 1263) (nil fontified nil 1253 . 1263) (nil help-echo cider--help-echo 1252 . 1253) (nil fontified nil 1252 . 1253) (nil help-echo cider--help-echo 1249 . 1252) (nil fontified nil 1249 . 1252) (nil help-echo cider--help-echo 1247 . 1249) (nil fontified nil 1247 . 1249) (1247 . 1342)) nil (25807 5232 854211 0) 0 nil])
([nil nil ((#("     " 0 2 (cider-locals nil help-echo cider--help-echo fontified t) 2 5 (cider-locals nil help-echo cider--help-echo fontified t)) . 1247) (1290 . 1291) 1241 (t 25807 5232 877305 692000)) nil (25807 5235 287536 0) 0 nil])
([nil nil ((#("definition" 0 10 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo)) . -51) (undo-tree-id76 . -10) 61 (t 25807 5235 309567 343000)) nil (25807 5252 300242 0) 0 nil])
([nil nil ((#("field-" 0 6 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo)) . -45) (undo-tree-id75 . -6) 51) nil (25807 5252 300240 0) 0 nil])
([nil nil ((45 . 53)) nil (25807 5252 300238 0) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . -49) (undo-tree-id71 . -1) (#("e" 0 1 (cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . -50) (undo-tree-id72 . -1) (#("n" 0 1 (cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . -51) (undo-tree-id73 . -1) (#("t" 0 1 (cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . -52) (undo-tree-id74 . -1) 53) nil (25807 5252 300236 0) 0 nil])
([nil nil ((49 . 64)) nil (25807 5252 300221 0) 0 nil])
([nil nil ((#("      :directives [{:directive-type :access
                    :directive-args {:role \"thing\"}}]" 0 6 (cider-locals nil fontified t help-echo cider--help-echo) 6 7 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 7 17 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 17 18 (cider-locals nil fontified t help-echo cider--help-echo) 18 19 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 19 20 (face (rainbow-delimiters-depth-8-face) cider-locals nil fontified t help-echo cider--help-echo) 20 21 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 21 35 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 35 36 (cider-locals nil fontified t help-echo cider--help-echo) 36 37 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 37 43 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 43 44 (cider-locals nil fontified t help-echo cider--help-echo) 44 45 (cider-locals nil fontified t help-echo cider--help-echo) 45 50 (cider-locals nil fontified t help-echo cider--help-echo) 50 64 (cider-locals nil fontified t help-echo cider--help-echo) 64 65 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 65 79 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 79 80 (cider-locals nil fontified t help-echo cider--help-echo) 80 81 (face (rainbow-delimiters-depth-9-face) cider-locals nil fontified t help-echo cider--help-echo) 81 82 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 82 86 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 86 87 (cider-locals nil fontified t help-echo cider--help-echo) 87 94 (face font-lock-string-face cider-locals nil fontified t help-echo cider--help-echo) 94 95 (face (rainbow-delimiters-depth-9-face) cider-locals nil fontified t help-echo cider--help-echo) 95 96 (face (rainbow-delimiters-depth-8-face) cider-locals nil fontified t help-echo cider--help-echo) 96 97 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo rear-nonsticky t)) . 1244) (undo-tree-id121 . -6) (undo-tree-id122 . -97) (undo-tree-id123 . -97) 1341 (t 25807 5252 322055 96000)) nil (25807 5609 917692 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . -1243) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) 1244) nil (25807 5609 917826 0) 0 nil])
([nil nil ((1139 . 1146) (t 25807 5614 845650 242000)) nil (25808 4869 882449 0) 0 nil] [nil nil ((1221 . 1227)) ((#("
     " 0 6 (cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . 1221) (undo-tree-id124 . -1) (undo-tree-id125 . -6)) (25807 5609 917634 0) 0 nil])
([nil nil ((1146 . 1151)) nil (25808 4869 882448 0) 0 nil])
nil
([nil nil ((#("L" 0 1 (cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . -1146) (undo-tree-id126 . -1) (#("d" 0 1 (cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . -1147) (undo-tree-id127 . -1) (#("i" 0 1 (cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . -1148) (undo-tree-id128 . -1) (#("r" 0 1 (cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . -1149) (undo-tree-id129 . -1) (#("e" 0 1 (cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . -1150) (undo-tree-id130 . -1) 1151) nil (25808 4869 882446 0) 0 nil])
([nil nil ((1146 . 1158)) nil (25808 4869 882434 0) 0 nil])
([nil nil ((1158 . 1160)) nil (25808 4869 882432 0) 0 nil])
([nil nil ((1159 . 1161)) nil (25808 4869 882431 0) 0 nil])
([nil nil ((1160 . 1165)) nil (25808 4869 882429 0) 0 nil])
([nil nil ((1165 . 1183)) nil (25808 4869 882425 0) 0 nil])
([nil nil ((1183 . 1204) (t 25808 4869 905378 561000)) nil (25808 4879 752688 0) 0 nil])
([nil nil ((1204 . 1220)) nil (25808 4879 752687 0) 0 nil])
([nil nil ((1220 . 1222)) nil (25808 4879 752686 0) 0 nil])
([nil nil ((1221 . 1227)) nil (25808 4879 752685 0) 0 nil])
([nil nil ((1227 . 1229)) nil (25808 4879 752684 0) 0 nil])
([nil nil ((1228 . 1233)) nil (25808 4879 752680 0) 0 nil])
([nil nil ((#("      :directives [{:directive-type :access
                    :directive-args {:role \"stuff\"}}]" 0 6 (cider-locals nil fontified t help-echo cider--help-echo) 6 7 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 7 17 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 17 18 (cider-locals nil fontified t help-echo cider--help-echo) 18 19 (face (rainbow-delimiters-depth-7-face) cider-locals nil help-echo cider--help-echo fontified t) 19 20 (face (rainbow-delimiters-depth-8-face) cider-locals nil help-echo cider--help-echo fontified t) 20 21 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 21 35 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 35 36 (cider-locals nil help-echo cider--help-echo fontified t) 36 37 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 37 43 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 43 44 (cider-locals nil help-echo cider--help-echo fontified t) 44 64 (cider-locals nil help-echo cider--help-echo fontified t) 64 65 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 65 79 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 79 80 (cider-locals nil help-echo cider--help-echo fontified t) 80 81 (face (rainbow-delimiters-depth-9-face) cider-locals nil help-echo cider--help-echo fontified t) 81 82 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 82 86 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 86 87 (cider-locals nil help-echo cider--help-echo fontified t) 87 93 (face font-lock-string-face cider-locals nil help-echo cider--help-echo fontified t) 93 94 (face font-lock-string-face cider-locals nil help-echo cider--help-echo fontified t) 94 95 (face (rainbow-delimiters-depth-9-face) cider-locals nil help-echo cider--help-echo fontified t) 95 96 (face (rainbow-delimiters-depth-8-face) cider-locals nil help-echo cider--help-echo fontified t) 96 97 (face (rainbow-delimiters-depth-7-face) cider-locals nil help-echo cider--help-echo fontified t)) . 1140) (undo-tree-id230 . -93) (undo-tree-id231 . 4) (undo-tree-id232 . -44) (undo-tree-id233 . -97) (undo-tree-id234 . -97) (undo-tree-id235 . -97) (undo-tree-id236 . -97) (undo-tree-id237 . -97) (undo-tree-id238 . -97) (undo-tree-id239 . -97) (undo-tree-id240 . -97) (undo-tree-id241 . -97) (undo-tree-id242 . -97) (undo-tree-id243 . -97) (undo-tree-id244 . -97) (undo-tree-id245 . -97) (undo-tree-id246 . -97) (undo-tree-id247 . -97) (undo-tree-id248 . -97) (undo-tree-id249 . -97) (undo-tree-id250 . -97) (undo-tree-id251 . -97) (undo-tree-id252 . -97) (undo-tree-id253 . -97) (undo-tree-id254 . -97) (undo-tree-id255 . -97) (undo-tree-id256 . -97) (undo-tree-id257 . -97) (undo-tree-id258 . -97) (undo-tree-id259 . -97) (undo-tree-id260 . -97) (undo-tree-id261 . -97) (undo-tree-id262 . -97) (undo-tree-id263 . -97) (undo-tree-id264 . -97) (undo-tree-id265 . -97) (undo-tree-id266 . -97) (undo-tree-id267 . -97) (undo-tree-id268 . -97) (undo-tree-id269 . -97) (undo-tree-id270 . -97) (undo-tree-id271 . -93) (undo-tree-id272 . -97) (undo-tree-id273 . -97) (undo-tree-id274 . -97) (undo-tree-id275 . -97) (undo-tree-id276 . -97) (undo-tree-id277 . -97) 1237 (t 25808 4879 774526 921000)) nil (25808 4966 405724 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . -1139) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) 1140) nil (25808 4966 405670 0) 0 nil])
([nil nil ((1138 . 1156)) nil (25808 4966 405570 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1252 . 1253) (nil help-echo cider--help-echo 1252 . 1253) (nil fontified nil 1252 . 1253) (nil help-echo cider--help-echo 1251 . 1252) (nil fontified nil 1251 . 1252) (nil help-echo cider--help-echo 1250 . 1251) (nil fontified nil 1250 . 1251) (nil help-echo cider--help-echo 1249 . 1250) (nil fontified nil 1249 . 1250) (nil help-echo cider--help-echo 1243 . 1249) (nil fontified nil 1243 . 1249) (nil help-echo cider--help-echo 1242 . 1243) (nil fontified nil 1242 . 1243) (nil help-echo cider--help-echo 1238 . 1242) (nil fontified nil 1238 . 1242) (nil help-echo cider--help-echo 1237 . 1238) (nil fontified nil 1237 . 1238) (nil help-echo cider--help-echo 1236 . 1237) (nil fontified nil 1236 . 1237) (nil help-echo cider--help-echo 1235 . 1236) (nil fontified nil 1235 . 1236) (nil help-echo cider--help-echo 1221 . 1235) (nil fontified nil 1221 . 1235) (nil help-echo cider--help-echo 1220 . 1221) (nil fontified nil 1220 . 1221) (nil help-echo cider--help-echo 1200 . 1220) (nil fontified nil 1200 . 1220) (nil help-echo cider--help-echo 1199 . 1200) (nil fontified nil 1199 . 1200) (nil help-echo cider--help-echo 1193 . 1199) (nil fontified nil 1193 . 1199) (nil help-echo cider--help-echo 1192 . 1193) (nil fontified nil 1192 . 1193) (nil help-echo cider--help-echo 1191 . 1192) (nil fontified nil 1191 . 1192) (nil help-echo cider--help-echo 1177 . 1191) (nil fontified nil 1177 . 1191) (nil help-echo cider--help-echo 1176 . 1177) (nil fontified nil 1176 . 1177) (nil help-echo cider--help-echo 1175 . 1176) (nil fontified nil 1175 . 1176) (nil help-echo cider--help-echo 1174 . 1175) (nil fontified nil 1174 . 1175) (nil help-echo cider--help-echo 1173 . 1174) (nil fontified nil 1173 . 1174) (nil help-echo cider--help-echo 1163 . 1173) (nil fontified nil 1163 . 1173) (nil help-echo cider--help-echo 1162 . 1163) (nil fontified nil 1162 . 1163) (nil help-echo cider--help-echo 1156 . 1162) (nil fontified nil 1156 . 1162) (1156 . 1253)) nil (25808 4966 405564 0) 0 nil])
([nil nil ((#("      " 0 6 (cider-locals nil help-echo cider--help-echo fontified t)) . -1156) (t 25808 4966 428210 622000)) nil (25808 4968 863705 0) 0 nil])
([nil nil ((1194 . 1225) (#("                    " 0 20 (cider-locals nil help-echo cider--help-echo fontified t)) . 1194) (undo-tree-id278 . -17) (undo-tree-id279 . -17) (undo-tree-id280 . -17) (undo-tree-id281 . -17) (undo-tree-id282 . -17) (undo-tree-id283 . -17) (undo-tree-id284 . -17) (undo-tree-id285 . -17) (undo-tree-id286 . -17) (undo-tree-id287 . -17) (undo-tree-id288 . -17) (undo-tree-id289 . -17) (undo-tree-id290 . -17) (undo-tree-id291 . -17) (undo-tree-id292 . -17) (undo-tree-id293 . -17) (undo-tree-id294 . -17) (undo-tree-id295 . -17) (undo-tree-id296 . -17) (undo-tree-id297 . -17) (undo-tree-id298 . -17) (undo-tree-id299 . -17) 1211) nil (25808 4968 863701 0) 0 nil])
([nil nil ((#(":directives [{:directive-type :access
                               :directive-args {:role \"stuff\"}}]" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 1 11 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 11 12 (cider-locals nil help-echo cider--help-echo fontified t) 12 13 (face (rainbow-delimiters-depth-8-face) cider-locals nil help-echo cider--help-echo fontified t) 13 14 (face (rainbow-delimiters-depth-9-face) cider-locals nil help-echo cider--help-echo fontified t) 14 15 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 15 29 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 29 30 (cider-locals nil help-echo cider--help-echo fontified t) 30 31 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 31 37 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 37 38 (cider-locals nil help-echo cider--help-echo fontified t) 38 69 (cider-locals nil help-echo cider--help-echo fontified t) 69 70 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 70 84 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 84 85 (cider-locals nil help-echo cider--help-echo fontified t) 85 86 (face (rainbow-delimiters-depth-1-face) cider-locals nil help-echo cider--help-echo fontified t) 86 87 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 87 91 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 91 92 (cider-locals nil help-echo cider--help-echo fontified t) 92 98 (face font-lock-string-face cider-locals nil help-echo cider--help-echo fontified t) 98 99 (face font-lock-string-face cider-locals nil help-echo cider--help-echo fontified t) 99 100 (face (rainbow-delimiters-depth-1-face) cider-locals nil help-echo cider--help-echo fontified t) 100 101 (face (rainbow-delimiters-depth-9-face) cider-locals nil help-echo cider--help-echo fontified t) 101 102 (face (rainbow-delimiters-depth-8-face) cider-locals nil help-echo cider--help-echo rear-nonsticky t fontified t)) . 1156) (undo-tree-id868 . -102) (undo-tree-id869 . -24) (undo-tree-id870 . -24) (undo-tree-id871 . -24) (undo-tree-id872 . -24) (undo-tree-id873 . -24) (undo-tree-id874 . -24) (undo-tree-id875 . -24) (undo-tree-id876 . -24) (undo-tree-id877 . -24) (undo-tree-id878 . -24) (undo-tree-id879 . -24) (undo-tree-id880 . -24) (undo-tree-id881 . -24) (undo-tree-id882 . -24) (undo-tree-id883 . -24) (undo-tree-id884 . -24) (undo-tree-id885 . -24) (undo-tree-id886 . -24) (undo-tree-id887 . -24) (undo-tree-id888 . -24) (undo-tree-id889 . -24) (undo-tree-id890 . -24) (undo-tree-id891 . -24) (undo-tree-id892 . -24) (undo-tree-id893 . -24) (undo-tree-id894 . -24) (undo-tree-id895 . -24) (undo-tree-id896 . -24) (undo-tree-id897 . -24) (undo-tree-id898 . -24) (undo-tree-id899 . -24) (undo-tree-id900 . -24) (undo-tree-id901 . -24) (undo-tree-id902 . -24) (undo-tree-id903 . -15) (undo-tree-id904 . -15) (undo-tree-id905 . -15) (undo-tree-id906 . -15) (undo-tree-id907 . -15) (undo-tree-id908 . -15) (undo-tree-id909 . -15) (undo-tree-id910 . -15) (undo-tree-id911 . -15) (undo-tree-id912 . -15) (undo-tree-id913 . -15) (undo-tree-id914 . -15) (undo-tree-id915 . -15) (undo-tree-id916 . -15) (undo-tree-id917 . -15) (undo-tree-id918 . -15) (undo-tree-id919 . -15) (undo-tree-id920 . -15) (undo-tree-id921 . -15) (undo-tree-id922 . -15) (undo-tree-id923 . -15) (undo-tree-id924 . -15) (undo-tree-id925 . -14) (undo-tree-id926 . -14) (undo-tree-id927 . -14) (undo-tree-id928 . -14) (undo-tree-id929 . -14) (undo-tree-id930 . -14) (undo-tree-id931 . -14) (undo-tree-id932 . -14) (undo-tree-id933 . -14) (undo-tree-id934 . -14) (undo-tree-id935 . -14) (undo-tree-id936 . -14) (undo-tree-id937 . -14) (undo-tree-id938 . -14) (undo-tree-id939 . -14) (undo-tree-id940 . -14) (undo-tree-id941 . -14) (undo-tree-id942 . -14) (undo-tree-id943 . -14) (undo-tree-id944 . -14) (undo-tree-id945 . -14) (undo-tree-id946 . -14) (undo-tree-id947 . -13) (undo-tree-id948 . -13) (undo-tree-id949 . -13) (undo-tree-id950 . -13) (undo-tree-id951 . -13) (undo-tree-id952 . -13) (undo-tree-id953 . -13) (undo-tree-id954 . -13) (undo-tree-id955 . -13) (undo-tree-id956 . -13) (undo-tree-id957 . -13) (undo-tree-id958 . -13) (undo-tree-id959 . -13) (undo-tree-id960 . -13) (undo-tree-id961 . -13) (undo-tree-id962 . -13) (undo-tree-id963 . -13) (undo-tree-id964 . -13) (undo-tree-id965 . -13) (undo-tree-id966 . -13) (undo-tree-id967 . -13) (undo-tree-id968 . -13) (undo-tree-id969 . -12) (undo-tree-id970 . -12) (undo-tree-id971 . -12) (undo-tree-id972 . -12) (undo-tree-id973 . -12) (undo-tree-id974 . -12) (undo-tree-id975 . -12) (undo-tree-id976 . -12) (undo-tree-id977 . -12) (undo-tree-id978 . -12) (undo-tree-id979 . -12) (undo-tree-id980 . -12) (undo-tree-id981 . -12) (undo-tree-id982 . -12) (undo-tree-id983 . -12) (undo-tree-id984 . -12) (undo-tree-id985 . -12) (undo-tree-id986 . -12) (undo-tree-id987 . -12) (undo-tree-id988 . -12) (undo-tree-id989 . -12) (undo-tree-id990 . -12) (undo-tree-id991 . -12) (undo-tree-id992 . -12) (undo-tree-id993 . -12) (undo-tree-id994 . -12) (undo-tree-id995 . -12) (undo-tree-id996 . -12) (undo-tree-id997 . -12) (undo-tree-id998 . -38) (undo-tree-id999 . -102) (undo-tree-id1000 . -102) (undo-tree-id1001 . -102) (undo-tree-id1002 . -102) (undo-tree-id1003 . -102) (undo-tree-id1004 . -102) (undo-tree-id1005 . -102) (undo-tree-id1006 . -102) (undo-tree-id1007 . -102) (undo-tree-id1008 . -102) (undo-tree-id1009 . -102) (undo-tree-id1010 . -102) (undo-tree-id1011 . -102) (undo-tree-id1012 . -102) (undo-tree-id1013 . -102) (undo-tree-id1014 . -102) (undo-tree-id1015 . -102) (undo-tree-id1016 . -102) (undo-tree-id1017 . -102) (undo-tree-id1018 . -102) (undo-tree-id1019 . -102) (undo-tree-id1020 . -102) (undo-tree-id1021 . -102) (undo-tree-id1022 . -102) (undo-tree-id1023 . -102) (undo-tree-id1024 . -102) (undo-tree-id1025 . -102) (undo-tree-id1026 . -102) (undo-tree-id1027 . -102) (undo-tree-id1028 . -102) (undo-tree-id1029 . -102) (undo-tree-id1030 . -102) (undo-tree-id1031 . -102) (undo-tree-id1032 . -102) (undo-tree-id1033 . -102) (undo-tree-id1034 . -102) (undo-tree-id1035 . -102) (undo-tree-id1036 . -102) (undo-tree-id1037 . -102) (undo-tree-id1038 . -69) (undo-tree-id1039 . -102) (undo-tree-id1040 . -102) (undo-tree-id1041 . -102) (undo-tree-id1042 . -102) (undo-tree-id1043 . -102) (undo-tree-id1044 . -102) 1258 (t 25808 4968 886540 591000)) nil (25808 5002 354167 0) 0 nil])
([nil nil ((#("                 " 0 17 (cider-locals nil fontified t help-echo cider--help-echo)) . 1139) (undo-tree-id611 . -17) (undo-tree-id612 . -17) (undo-tree-id613 . -17) (undo-tree-id614 . -17) (undo-tree-id615 . -17) (undo-tree-id616 . -17) (undo-tree-id617 . -17) (undo-tree-id618 . -17) (undo-tree-id619 . -17) (undo-tree-id620 . -17) (undo-tree-id621 . -17) (undo-tree-id622 . -17) (undo-tree-id623 . -17) (undo-tree-id624 . -17) (undo-tree-id625 . -17) (undo-tree-id626 . -17) (undo-tree-id627 . -17) (undo-tree-id628 . -17) (undo-tree-id629 . -17) (undo-tree-id630 . -17) (undo-tree-id631 . -17) (undo-tree-id632 . -17) (undo-tree-id633 . -17) (undo-tree-id634 . -17) (undo-tree-id635 . -17) (undo-tree-id636 . -17) (undo-tree-id637 . -17) (undo-tree-id638 . -17) (undo-tree-id639 . -17) (undo-tree-id640 . -17) (undo-tree-id641 . -17) (undo-tree-id642 . -17) (undo-tree-id643 . -17) (undo-tree-id644 . -17) (undo-tree-id645 . -17) (undo-tree-id646 . -17) (undo-tree-id647 . -17) (undo-tree-id648 . -17) (undo-tree-id649 . -17) (undo-tree-id650 . -17) (undo-tree-id651 . -17) (undo-tree-id652 . -17) (undo-tree-id653 . -17) (undo-tree-id654 . -17) (undo-tree-id655 . -17) (undo-tree-id656 . -17) (undo-tree-id657 . -17) (undo-tree-id658 . -17) (undo-tree-id659 . -17) (undo-tree-id660 . -17) (undo-tree-id661 . -17) (undo-tree-id662 . -17) (undo-tree-id663 . -17) (undo-tree-id664 . -17) (undo-tree-id665 . -17) (undo-tree-id666 . -17) (undo-tree-id667 . -17) (undo-tree-id668 . -17) (undo-tree-id669 . -17) (undo-tree-id670 . -17) (undo-tree-id671 . -17) (undo-tree-id672 . -17) (undo-tree-id673 . -17) (undo-tree-id674 . -17) (undo-tree-id675 . -17) (undo-tree-id676 . -17) (undo-tree-id677 . -17) (undo-tree-id678 . -17) (undo-tree-id679 . -17) (undo-tree-id680 . -17) (undo-tree-id681 . -17) (undo-tree-id682 . -17) (undo-tree-id683 . -17) (undo-tree-id684 . -17) (undo-tree-id685 . -17) (undo-tree-id686 . -17) (undo-tree-id687 . -17) (undo-tree-id688 . -17) (undo-tree-id689 . -17) (undo-tree-id690 . -17) (undo-tree-id691 . -17) (undo-tree-id692 . -17) (undo-tree-id693 . -17) (undo-tree-id694 . -17) (undo-tree-id695 . -17) (undo-tree-id696 . -17) (undo-tree-id697 . -17) (undo-tree-id698 . -17) (undo-tree-id699 . -17) (undo-tree-id700 . -17) (undo-tree-id701 . -17) (undo-tree-id702 . -17) (undo-tree-id703 . -17) (undo-tree-id704 . -17) (undo-tree-id705 . -17) (undo-tree-id706 . -17) (undo-tree-id707 . -17) (undo-tree-id708 . -17) (undo-tree-id709 . -17) (undo-tree-id710 . -17) (undo-tree-id711 . -17) (undo-tree-id712 . -17) (undo-tree-id713 . -17) (undo-tree-id714 . -17) (undo-tree-id715 . -17) (undo-tree-id716 . -17) (undo-tree-id717 . -17) (undo-tree-id718 . -17) (undo-tree-id719 . -17) (undo-tree-id720 . -17) (undo-tree-id721 . -17) (undo-tree-id722 . -17) (undo-tree-id723 . -17) (undo-tree-id724 . -17) (undo-tree-id725 . -17) (undo-tree-id726 . -17) (undo-tree-id727 . -17) (undo-tree-id728 . -17) (undo-tree-id729 . -17) (undo-tree-id730 . -17) (undo-tree-id731 . -17) (undo-tree-id732 . -17) (undo-tree-id733 . -17) (undo-tree-id734 . -17) (undo-tree-id735 . -17) (undo-tree-id736 . -17) (undo-tree-id737 . -17) (undo-tree-id738 . -17) (undo-tree-id739 . -17) (undo-tree-id740 . -17) (undo-tree-id741 . -17) (undo-tree-id742 . -17) (undo-tree-id743 . -17) (undo-tree-id744 . -17) (undo-tree-id745 . -17) (undo-tree-id746 . -17) (undo-tree-id747 . -17) (undo-tree-id748 . -17) (undo-tree-id749 . -17) (undo-tree-id750 . -17) (undo-tree-id751 . -17) (undo-tree-id752 . -17) (undo-tree-id753 . -17) (undo-tree-id754 . -17) (undo-tree-id755 . -17) (undo-tree-id756 . -17) (undo-tree-id757 . -17) (undo-tree-id758 . -17) (undo-tree-id759 . -17) (undo-tree-id760 . -17) (undo-tree-id761 . -17) (undo-tree-id762 . -17) (undo-tree-id763 . -17) (undo-tree-id764 . -17) (undo-tree-id765 . -17) (undo-tree-id766 . -17) (undo-tree-id767 . -17) (undo-tree-id768 . -17) (undo-tree-id769 . -17) (undo-tree-id770 . -17) (undo-tree-id771 . -17) (undo-tree-id772 . -17) (undo-tree-id773 . -17) (undo-tree-id774 . -17) (undo-tree-id775 . -17) (undo-tree-id776 . -17) (undo-tree-id777 . -17) (undo-tree-id778 . -17) (undo-tree-id779 . -17) (undo-tree-id780 . -17) (undo-tree-id781 . -17) (undo-tree-id782 . -17) (undo-tree-id783 . -17) (undo-tree-id784 . -17) (undo-tree-id785 . -17) (undo-tree-id786 . -17) (undo-tree-id787 . -17) (undo-tree-id788 . -17) (undo-tree-id789 . -17) (undo-tree-id790 . -17) (undo-tree-id791 . -17) (undo-tree-id792 . -17) (undo-tree-id793 . -17) (undo-tree-id794 . -17) (undo-tree-id795 . -17) (undo-tree-id796 . -17) (undo-tree-id797 . -17) (undo-tree-id798 . -17) (undo-tree-id799 . -17) (undo-tree-id800 . -17) (undo-tree-id801 . -17) (undo-tree-id802 . -17) (undo-tree-id803 . -17) (undo-tree-id804 . -17) (undo-tree-id805 . -17) (undo-tree-id806 . -17) (undo-tree-id807 . -17) (undo-tree-id808 . -17) (undo-tree-id809 . -17) (undo-tree-id810 . -17) (undo-tree-id811 . -17) (undo-tree-id812 . -17) (undo-tree-id813 . -17) (undo-tree-id814 . -17) (undo-tree-id815 . -17) (undo-tree-id816 . -17) (undo-tree-id817 . -17) (undo-tree-id818 . -17) (undo-tree-id819 . -17) (undo-tree-id820 . -17) (undo-tree-id821 . -17) (undo-tree-id822 . -17) (undo-tree-id823 . -17) (undo-tree-id824 . -17) (undo-tree-id825 . -17) (undo-tree-id826 . -17) (undo-tree-id827 . -17) (undo-tree-id828 . -17) (undo-tree-id829 . -17) (undo-tree-id830 . -17) (undo-tree-id831 . -17) (undo-tree-id832 . -17) (undo-tree-id833 . -17) (undo-tree-id834 . -17) (undo-tree-id835 . -17) (undo-tree-id836 . -17) (undo-tree-id837 . -17) (undo-tree-id838 . -17) (undo-tree-id839 . -17) (undo-tree-id840 . -17) (undo-tree-id841 . -17) (undo-tree-id842 . -17) (undo-tree-id843 . -17) (undo-tree-id844 . -17) (undo-tree-id845 . -17) (undo-tree-id846 . -17) (undo-tree-id847 . -17) (undo-tree-id848 . -17) (undo-tree-id849 . -17) (undo-tree-id850 . -17) (undo-tree-id851 . -17) (undo-tree-id852 . -17) (undo-tree-id853 . -17) (undo-tree-id854 . -17) (undo-tree-id855 . -17) (undo-tree-id856 . -17) (undo-tree-id857 . -17) (undo-tree-id858 . -17) (undo-tree-id859 . -17) (undo-tree-id860 . -17) (undo-tree-id861 . -17) (undo-tree-id862 . -17) (undo-tree-id863 . -17) (undo-tree-id864 . -17) (undo-tree-id865 . -17) (undo-tree-id866 . -17) (undo-tree-id867 . -17)) nil (25808 5002 353989 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . -1138) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) 1139) nil (25808 5002 353743 0) 0 nil])
([nil nil ((1242 . 1254) (t 25808 5002 377748 617000)) nil (25808 5012 89412 0) 0 nil])
([nil nil ((nil help-echo cider--help-echo 1355 . 1356) (nil fontified nil 1355 . 1356) (nil help-echo cider--help-echo 1354 . 1355) (nil fontified nil 1354 . 1355) (nil help-echo cider--help-echo 1353 . 1354) (nil fontified nil 1353 . 1354) (nil help-echo cider--help-echo 1352 . 1353) (nil fontified nil 1352 . 1353) (nil help-echo cider--help-echo 1346 . 1352) (nil fontified nil 1346 . 1352) (nil help-echo cider--help-echo 1345 . 1346) (nil fontified nil 1345 . 1346) (nil help-echo cider--help-echo 1341 . 1345) (nil fontified nil 1341 . 1345) (nil help-echo cider--help-echo 1340 . 1341) (nil fontified nil 1340 . 1341) (nil help-echo cider--help-echo 1339 . 1340) (nil fontified nil 1339 . 1340) (nil help-echo cider--help-echo 1338 . 1339) (nil fontified nil 1338 . 1339) (nil help-echo cider--help-echo 1324 . 1338) (nil fontified nil 1324 . 1338) (nil help-echo cider--help-echo 1323 . 1324) (nil fontified nil 1323 . 1324) (nil help-echo cider--help-echo 1292 . 1323) (nil fontified nil 1292 . 1323) (nil help-echo cider--help-echo 1291 . 1292) (nil fontified nil 1291 . 1292) (nil help-echo cider--help-echo 1285 . 1291) (nil fontified nil 1285 . 1291) (nil help-echo cider--help-echo 1284 . 1285) (nil fontified nil 1284 . 1285) (nil help-echo cider--help-echo 1283 . 1284) (nil fontified nil 1283 . 1284) (nil help-echo cider--help-echo 1269 . 1283) (nil fontified nil 1269 . 1283) (nil help-echo cider--help-echo 1268 . 1269) (nil fontified nil 1268 . 1269) (nil help-echo cider--help-echo 1267 . 1268) (nil fontified nil 1267 . 1268) (nil help-echo cider--help-echo 1266 . 1267) (nil fontified nil 1266 . 1267) (nil help-echo cider--help-echo 1265 . 1266) (nil fontified nil 1265 . 1266) (nil help-echo cider--help-echo 1255 . 1265) (nil fontified nil 1255 . 1265) (nil help-echo cider--help-echo 1254 . 1255) (nil fontified nil 1254 . 1255) (1254 . 1356)) nil (25808 5012 89409 0) 0 nil])
([nil nil ((#("      " 0 6 (cider-locals nil help-echo cider--help-echo fontified t ws-butler-chg chg)) . -1317) 1356) nil (25808 5012 89394 0) 0 nil])
([nil nil ((#(":directives [{:directive-type :access
                         :directive-args {:role \"stuff\"}}]" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 1 11 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 11 12 (cider-locals nil help-echo cider--help-echo fontified t) 12 13 (face (rainbow-delimiters-depth-8-face) cider-locals nil help-echo cider--help-echo fontified t) 13 14 (face (rainbow-delimiters-depth-9-face) cider-locals nil help-echo cider--help-echo fontified t) 14 15 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 15 29 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 29 30 (cider-locals nil help-echo cider--help-echo fontified t) 30 31 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 31 37 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 37 38 (cider-locals nil help-echo cider--help-echo fontified t) 38 63 (cider-locals nil help-echo cider--help-echo fontified t) 63 64 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 64 78 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 78 79 (cider-locals nil help-echo cider--help-echo fontified t) 79 80 (face (rainbow-delimiters-depth-1-face) cider-locals nil help-echo cider--help-echo fontified t) 80 81 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 81 85 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 85 86 (cider-locals nil help-echo cider--help-echo fontified t) 86 92 (face font-lock-string-face cider-locals nil help-echo cider--help-echo fontified t) 92 93 (face font-lock-string-face cider-locals nil help-echo cider--help-echo fontified t) 93 94 (face (rainbow-delimiters-depth-1-face) cider-locals nil help-echo cider--help-echo fontified t) 94 95 (face (rainbow-delimiters-depth-9-face) cider-locals nil help-echo cider--help-echo fontified t) 95 96 (face (rainbow-delimiters-depth-8-face) cider-locals nil help-echo cider--help-echo fontified t rear-nonsticky t)) . 1254) (undo-tree-id1054 . -92) (undo-tree-id1055 . -86) (undo-tree-id1056 . -96) 1350 (t 25808 5012 113009 161000)) nil (25808 7754 68823 0) 0 nil])
([nil nil ((#("           " 0 11 (cider-locals nil fontified t help-echo cider--help-echo)) . 1243) (undo-tree-id1050 . -11) (undo-tree-id1051 . -11) (undo-tree-id1052 . -11) (undo-tree-id1053 . -11)) nil (25808 7754 68819 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . -1242) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) 1243) nil (25808 7754 68814 0) 0 nil])
([nil nil ((202 . 212)) nil (25808 7754 69026 0) 0 nil])
([nil nil ((nil help-echo cider--help-echo 307 . 308) (nil fontified nil 307 . 308) (nil help-echo cider--help-echo 306 . 307) (nil fontified nil 306 . 307) (nil help-echo cider--help-echo 305 . 306) (nil fontified nil 305 . 306) (nil help-echo cider--help-echo 304 . 305) (nil fontified nil 304 . 305) (nil help-echo cider--help-echo 298 . 304) (nil fontified nil 298 . 304) (nil help-echo cider--help-echo 297 . 298) (nil fontified nil 297 . 298) (nil help-echo cider--help-echo 293 . 297) (nil fontified nil 293 . 297) (nil help-echo cider--help-echo 292 . 293) (nil fontified nil 292 . 293) (nil help-echo cider--help-echo 291 . 292) (nil fontified nil 291 . 292) (nil help-echo cider--help-echo 290 . 291) (nil fontified nil 290 . 291) (nil help-echo cider--help-echo 276 . 290) (nil fontified nil 276 . 290) (nil help-echo cider--help-echo 275 . 276) (nil fontified nil 275 . 276) (nil help-echo cider--help-echo 250 . 275) (nil fontified nil 250 . 275) (nil help-echo cider--help-echo 249 . 250) (nil fontified nil 249 . 250) (nil help-echo cider--help-echo 243 . 249) (nil fontified nil 243 . 249) (nil help-echo cider--help-echo 242 . 243) (nil fontified nil 242 . 243) (nil help-echo cider--help-echo 241 . 242) (nil fontified nil 241 . 242) (nil help-echo cider--help-echo 227 . 241) (nil fontified nil 227 . 241) (nil help-echo cider--help-echo 226 . 227) (nil fontified nil 226 . 227) (nil help-echo cider--help-echo 225 . 226) (nil fontified nil 225 . 226) (nil help-echo cider--help-echo 224 . 225) (nil fontified nil 224 . 225) (nil help-echo cider--help-echo 223 . 224) (nil fontified nil 223 . 224) (nil help-echo cider--help-echo 213 . 223) (nil fontified nil 213 . 223) (nil help-echo cider--help-echo 212 . 213) (nil fontified nil 212 . 213) (212 . 308)) nil (25808 7756 424289 0) 0 nil] [nil nil ((nil rear-nonsticky nil 222 . 223) (nil help-echo cider--help-echo 212 . 223) (nil fontified nil 212 . 223) (212 . 223)) ((#("           " 0 10 (cider-locals nil help-echo cider--help-echo fontified nil ws-butler-chg chg) 10 11 (cider-locals nil help-echo cider--help-echo rear-nonsticky nil fontified nil ws-butler-chg chg)) . 212) (undo-tree-id1057 . -11) (nil rear-nonsticky t 222 . 223)) (25808 7754 68799 0) 0 nil])
([nil nil ((#("  " 0 2 (cider-locals nil help-echo cider--help-echo fontified t)) . -273) 308 (t 25808 7756 448270 629000)) nil (25808 7757 409456 0) 0 nil])
nil
([nil nil ((#("definition" 0 10 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo)) . -54) (undo-tree-id1059 . -10) 64 (t 25808 7757 433565 784000)) nil (25808 7783 134043 0) 0 nil])
([nil nil ((#("argument-" 0 9 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo)) . -45) (undo-tree-id1058 . -9) 54) nil (25808 7783 134040 0) 0 nil])
([nil nil ((45 . 52)) nil (25808 7783 134033 0) 0 nil])
([nil nil ((52 . 61)) nil (25808 7783 134030 0) 0 nil])
([nil nil ((108 . 110) (t 25808 7783 158629 53000)) nil (25808 8893 727798 0) 0 nil])
([nil nil ((109 . 111) (#(" " 0 1 (cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . 109) (undo-tree-id1062 . -1) 110) nil (25808 8893 727797 0) 0 nil])
([nil nil ((109 . 111)) nil (25808 8893 727794 0) 0 nil])
([nil nil ((109 . 115)) nil (25808 8893 727793 0) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals nil fontified t ws-butler-chg chg help-echo cider--help-echo)) . 117) (#(" " 0 1 (cider-locals nil fontified t ws-butler-chg chg help-echo cider--help-echo)) . 116) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) 115) nil (25808 8893 727789 0) 0 nil])
([nil nil ((115 . 117) (t 25808 8893 754681 217000)) nil (25808 8906 307782 0) 0 nil])
([nil nil ((117 . 119)) nil (25808 8906 307781 0) 0 nil])
([nil nil ((118 . 119)) nil (25808 8906 307780 0) 0 nil])
([nil nil ((#("A" 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -118) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) 119) nil (25808 8906 307775 0) 0 nil])
([nil nil ((118 . 125)) nil (25808 8906 307698 0) 0 nil])
([nil nil ((125 . 128) (t 25808 8906 333112 132000)) nil (25808 8914 578859 0) 0 nil])
([nil nil ((128 . 130)) nil (25808 8914 578858 0) 0 nil])
([nil nil ((129 . 141)) nil (25808 8914 578857 0) 0 nil])
([nil nil ((141 . 144)) nil (25808 8914 578856 0) 0 nil])
([nil nil ((143 . 150)) nil (25808 8914 578855 0) 0 nil])
([nil nil ((150 . 163)) nil (25808 8919 40979 0) 0 nil])
([nil nil ((164 . 168) (t 25808 8914 604954 782000)) nil (25808 8923 775663 0) 0 nil] [nil nil ((165 . 168) (t 25808 8914 604954 782000)) ((#("
  " 0 3 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . 165) (undo-tree-id1145 . -1) (undo-tree-id1146 . -3)) (25808 8919 40296 0) 0 nil])
([nil nil ((168 . 176)) nil (25808 8923 775662 0) 0 nil])
nil
([nil nil ((176 . 178)) nil (25808 8923 775661 0) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-depth-4-face) cider-locals nil help-echo cider--help-echo ws-butler-chg delete fontified nil)) . 176) (#("{" 0 1 (face (rainbow-delimiters-depth-4-face) cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -176) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) 177) nil (25808 8923 775659 0) 0 nil])
([nil nil ((176 . 178)) nil (25808 8923 776037 0) 0 nil])
([nil nil ((177 . 179)) nil (25808 8927 177544 0) 0 nil] [nil nil ((177 . 178)) ((#(":" 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . 177) (undo-tree-id1170 . -1)) (25808 8923 775630 0) 0 nil])
([nil nil ((178 . 189)) nil (25808 8927 177540 0) 0 nil])
nil
([nil nil ((189 . 192) (t 25808 8927 202212 800000)) nil (25808 8933 86817 0) 0 nil])
([nil nil ((#("u" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -191) (undo-tree-id1171 . -1) 192) nil (25808 8933 86815 0) 0 nil])
([nil nil ((191 . 196)) nil (25808 8937 538826 0) 0 nil])
([nil nil ((197 . 210) (t 25808 8933 110932 397000)) nil (25808 8944 97710 0) 0 nil] [nil nil ((196 . 210) (t 25808 8933 110932 397000)) ((#("
             " 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t) 1 14 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . 196) (undo-tree-id1173 . -1) (undo-tree-id1174 . -14) (undo-tree-id1175 . -14) (undo-tree-id1176 . -14) (undo-tree-id1177 . -14) (undo-tree-id1178 . -14) (undo-tree-id1179 . -14) (undo-tree-id1180 . -14) (undo-tree-id1181 . -14) (undo-tree-id1182 . -14) (undo-tree-id1183 . -14) (undo-tree-id1184 . -14) (undo-tree-id1185 . -14) (undo-tree-id1186 . -14) (undo-tree-id1187 . -14) (undo-tree-id1188 . -14) (undo-tree-id1189 . -14) (undo-tree-id1190 . -14) (undo-tree-id1191 . -14) (undo-tree-id1192 . -14) (undo-tree-id1193 . -14) (undo-tree-id1194 . -14) (undo-tree-id1195 . -14) (undo-tree-id1196 . -14)) (25808 8937 52075 0) 0 nil])
([nil nil ((210 . 211)) nil (25808 8944 97709 0) 0 nil])
([nil nil ((210 . 211)) ((#(":" 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . 210) (undo-tree-id1172 . -1)) (25808 8937 51956 0) 0 nil])
([nil nil ((#(":" 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -210) (undo-tree-id1197 . -1) 211) nil (25808 8944 97707 0) 0 nil])
nil
([nil nil ((210 . 212)) nil (25808 8944 97701 0) 0 nil])
([nil nil ((211 . 232)) nil (25808 8944 97698 0) 0 nil])
([nil nil ((233 . 246) (t 25808 8944 122319 795000)) nil (25808 8949 718259 0) 0 nil])
([nil nil ((246 . 248)) nil (25808 8949 718257 0) 0 nil])
([nil nil ((247 . 265)) nil (25808 8949 718253 0) 0 nil])
([nil nil ((#("i" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t)) . -230) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) 231 (t 25808 8949 743058 741000)) nil (25808 8952 838993 0) 0 nil])
([nil nil ((230 . 231)) nil (25808 8952 838960 0) 0 nil])
([nil nil ((#("String" 0 6 (cider-locals nil fontified t help-echo cider--help-echo)) . -96) (undo-tree-id1228 . -6) (undo-tree-id1229 . -6) (undo-tree-id1230 . -6) (undo-tree-id1231 . -6) (undo-tree-id1232 . -6) (undo-tree-id1233 . -6) (undo-tree-id1234 . -6) (undo-tree-id1235 . -6) (undo-tree-id1236 . -6) (undo-tree-id1237 . -6) (undo-tree-id1238 . -6) (undo-tree-id1239 . -6) (undo-tree-id1240 . -6) (undo-tree-id1241 . -6) (undo-tree-id1242 . -6) (undo-tree-id1243 . -6) (undo-tree-id1244 . -6) (undo-tree-id1245 . -6) (undo-tree-id1246 . -6) (undo-tree-id1247 . -6) (undo-tree-id1248 . -6) (undo-tree-id1249 . -6) (undo-tree-id1250 . -6) 102 (t 25808 8952 863777 476000)) nil (25808 8969 169527 0) 0 nil])
([nil nil ((96 . 103)) nil (25808 8969 169498 0) 0 nil])
([nil nil ((#("stuff" 0 5 (face font-lock-string-face cider-locals nil fontified t help-echo cider--help-echo)) . -458) (undo-tree-id1252 . -5) 463 (t 25808 8969 194545 87000)) nil (25808 8991 143457 0) 0 nil])
([nil nil ((#("\"\"" 0 1 (face font-lock-string-face cider-locals nil fontified t help-echo cider--help-echo) 1 2 (face font-lock-string-face cider-locals nil ws-butler-chg delete fontified t help-echo cider--help-echo)) . 457) (undo-tree-id1251 . -1) 458) nil (25808 8991 143454 0) 0 nil])
([nil nil ((457 . 459)) nil (25808 8991 143447 0) 0 nil])
([nil nil ((459 . 464)) nil (25808 8991 143444 0) 0 nil])
([nil nil ((#("Access" 0 6 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo)) . -458) (undo-tree-id1253 . -6) (undo-tree-id1254 . -6) (undo-tree-id1255 . -6) (undo-tree-id1256 . -6) (undo-tree-id1257 . -6) (undo-tree-id1258 . -6) (undo-tree-id1259 . -6) (undo-tree-id1260 . -6) (undo-tree-id1261 . -6) (undo-tree-id1262 . -6) (undo-tree-id1263 . -6) (undo-tree-id1264 . -6) (undo-tree-id1265 . -6) (undo-tree-id1266 . -6) (undo-tree-id1267 . -6) (undo-tree-id1268 . -6) (undo-tree-id1269 . -6) (undo-tree-id1270 . -6) (undo-tree-id1271 . -6) (undo-tree-id1272 . -6) (undo-tree-id1273 . -6) (undo-tree-id1274 . -6) (undo-tree-id1275 . -6) (undo-tree-id1276 . -6) (undo-tree-id1277 . -6) (undo-tree-id1278 . -6) (undo-tree-id1279 . -6) (undo-tree-id1280 . -6) (undo-tree-id1281 . -6) (undo-tree-id1282 . -6) (undo-tree-id1283 . -6) (undo-tree-id1284 . -6) (undo-tree-id1285 . -6) (undo-tree-id1286 . -6) (undo-tree-id1287 . -6) (undo-tree-id1288 . -6) (undo-tree-id1289 . -6) (undo-tree-id1290 . -6) (undo-tree-id1291 . -6) (undo-tree-id1292 . -6) (undo-tree-id1293 . -6) (undo-tree-id1294 . -6) (undo-tree-id1295 . -6) (undo-tree-id1296 . -6) (undo-tree-id1297 . -6) (undo-tree-id1298 . -6) (undo-tree-id1299 . -6) (undo-tree-id1300 . -6) (undo-tree-id1301 . -6) (undo-tree-id1302 . -6) (undo-tree-id1303 . -6) (undo-tree-id1304 . -6) (undo-tree-id1305 . -6) (undo-tree-id1306 . -6) (undo-tree-id1307 . -6) (undo-tree-id1308 . -6) (undo-tree-id1309 . -6) (undo-tree-id1310 . -6) (undo-tree-id1311 . -6) (undo-tree-id1312 . -6) (undo-tree-id1313 . -6) (undo-tree-id1314 . -6) (undo-tree-id1315 . -6) (undo-tree-id1316 . -6) (undo-tree-id1317 . -6) (undo-tree-id1318 . -6) (undo-tree-id1319 . -6) (undo-tree-id1320 . -6) (undo-tree-id1321 . -6) (undo-tree-id1322 . -6) (undo-tree-id1323 . -6) (undo-tree-id1324 . -6) (undo-tree-id1325 . -6) (undo-tree-id1326 . -6) (undo-tree-id1327 . -6) (undo-tree-id1328 . -6) (undo-tree-id1329 . -6) (undo-tree-id1330 . -6) (undo-tree-id1331 . -6) (undo-tree-id1332 . -6) (undo-tree-id1333 . -6) (undo-tree-id1334 . -6) (undo-tree-id1335 . -6) (undo-tree-id1336 . -6) (undo-tree-id1337 . -6) (undo-tree-id1338 . -6) (undo-tree-id1339 . -6) (undo-tree-id1340 . -6) (undo-tree-id1341 . -6) (undo-tree-id1342 . -6) (undo-tree-id1343 . -6) 464 (t 25808 8991 168215 968000)) nil (25808 9037 193525 0) 0 nil])
([nil nil ((458 . 463)) nil (25808 9037 193435 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . -271) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) 272 (t 25808 9037 218635 892000)) nil (25808 15432 481027 0) 0 nil])
([nil nil ((#("admin" 0 5 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo)) . -457) (undo-tree-id1396 . -5) (undo-tree-id1397 . -5) (undo-tree-id1398 . -5) (undo-tree-id1399 . -5) (undo-tree-id1400 . -5) 462 (t 25808 15432 506010 141000)) nil (25808 15446 974942 0) 0 nil])
([nil nil ((457 . 465)) nil (25808 16445 883911 0) 0 nil])
([nil nil ((110 . 111) (t 25808 15446 999947 968000)) nil (25808 23820 697474 0) 0 nil] [nil nil ((465 . 466) (t 25808 15446 999947 968000)) ((#("x" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . 465) (undo-tree-id1401 . -1)) (25808 16445 883237 0) 0 nil])
([nil nil ((#("null " 0 5 (cider-locals nil fontified t help-echo cider--help-echo)) . -91) (undo-tree-id1516 . -5) (undo-tree-id1517 . -5) (undo-tree-id1518 . -5) (undo-tree-id1519 . -5) (undo-tree-id1520 . -5) (undo-tree-id1521 . -5) (undo-tree-id1522 . -5) (undo-tree-id1523 . -5) (undo-tree-id1524 . -5) (undo-tree-id1525 . -5) 96 (t 25808 23821 526614 639000)) nil (25808 23833 178187 0) 0 nil] [nil nil ((apply -12 2 121 undo--wrap-and-run-primitive-undo 2 121 ((" " . 2) (74 . 77) (36 . 39) (23 . 26) (2 . 6) 108))) ((apply 12 2 109 undo--wrap-and-run-primitive-undo 2 109 ((#(" ;; " 1 4 (face font-lock-comment-delimiter-face cider-locals nil help-echo cider--help-echo fontified t)) . 2) (#(";; " 0 3 (face font-lock-comment-delimiter-face cider-locals nil help-echo cider--help-echo fontified t)) . 23) (#(";; " 0 3 (face font-lock-comment-delimiter-face cider-locals nil help-echo cider--help-echo fontified t)) . 36) (#(";; " 0 3 (face font-lock-comment-delimiter-face cider-locals nil help-echo cider--help-echo fontified t)) . 74) (2 . 3) 120))) (25808 23808 340712 0) 0 nil])
nil
([nil nil ((#("non-" 0 4 (cider-locals nil fontified t help-echo cider--help-echo)) . -87) (undo-tree-id1470 . -4) (undo-tree-id1471 . -4) (undo-tree-id1472 . -4) (undo-tree-id1473 . -4) (undo-tree-id1474 . -4) (undo-tree-id1475 . -4) (undo-tree-id1476 . -4) (undo-tree-id1477 . -4) (undo-tree-id1478 . -4) (undo-tree-id1479 . -4) (undo-tree-id1480 . -4) (undo-tree-id1481 . -4) (undo-tree-id1482 . -4) (undo-tree-id1483 . -4) (undo-tree-id1484 . -4) (undo-tree-id1485 . -4) (undo-tree-id1486 . -4) (undo-tree-id1487 . -4) (undo-tree-id1488 . -4) (undo-tree-id1489 . -4) (undo-tree-id1490 . -4) (undo-tree-id1491 . -4) (undo-tree-id1492 . -4) (undo-tree-id1493 . -4) (undo-tree-id1494 . -4) (undo-tree-id1495 . -4) (undo-tree-id1496 . -4) (undo-tree-id1497 . -4) (undo-tree-id1498 . -4) (undo-tree-id1499 . -4) (undo-tree-id1500 . -4) (undo-tree-id1501 . -4) (undo-tree-id1502 . -4) (undo-tree-id1503 . -4) (undo-tree-id1504 . -4) (undo-tree-id1505 . -4) (undo-tree-id1506 . -4) (undo-tree-id1507 . -4) (undo-tree-id1508 . -4) (undo-tree-id1509 . -4) (undo-tree-id1510 . -4) (undo-tree-id1511 . -4) (undo-tree-id1512 . -4) (undo-tree-id1513 . -4) (undo-tree-id1514 . -4) (undo-tree-id1515 . -4) 91) nil (25808 23833 178175 0) 0 nil])
nil
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified nil help-echo cider--help-echo)) . -86) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo)) . -94) 87) nil (25808 23833 178121 0) 0 nil])
([nil nil ((578 . 594) (t 25808 23833 204732 577000)) nil (25808 25378 801564 0) 0 nil])
([nil nil ((nil help-echo cider--help-echo 689 . 690) (nil fontified nil 689 . 690) (nil help-echo cider--help-echo 688 . 689) (nil fontified nil 688 . 689) (nil help-echo cider--help-echo 687 . 688) (nil fontified nil 687 . 688) (nil help-echo cider--help-echo 679 . 687) (nil fontified nil 679 . 687) (nil help-echo cider--help-echo 678 . 679) (nil fontified nil 678 . 679) (nil help-echo cider--help-echo 677 . 678) (nil fontified nil 677 . 678) (nil help-echo cider--help-echo 673 . 677) (nil fontified nil 673 . 677) (nil help-echo cider--help-echo 672 . 673) (nil fontified nil 672 . 673) (nil help-echo cider--help-echo 671 . 672) (nil fontified nil 671 . 672) (nil help-echo cider--help-echo 670 . 671) (nil fontified nil 670 . 671) (nil help-echo cider--help-echo 656 . 670) (nil fontified nil 656 . 670) (nil help-echo cider--help-echo 655 . 656) (nil fontified nil 655 . 656) (nil help-echo cider--help-echo 632 . 655) (nil fontified nil 632 . 655) (nil help-echo cider--help-echo 631 . 632) (nil fontified nil 631 . 632) (nil help-echo cider--help-echo 625 . 631) (nil fontified nil 625 . 631) (nil help-echo cider--help-echo 624 . 625) (nil fontified nil 624 . 625) (nil help-echo cider--help-echo 623 . 624) (nil fontified nil 623 . 624) (nil help-echo cider--help-echo 609 . 623) (nil fontified nil 609 . 623) (nil help-echo cider--help-echo 608 . 609) (nil fontified nil 608 . 609) (nil help-echo cider--help-echo 607 . 608) (nil fontified nil 607 . 608) (nil help-echo cider--help-echo 606 . 607) (nil fontified nil 606 . 607) (nil help-echo cider--help-echo 605 . 606) (nil fontified nil 605 . 606) (nil help-echo cider--help-echo 595 . 605) (nil fontified nil 595 . 605) (nil help-echo cider--help-echo 594 . 595) (nil fontified nil 594 . 595) (594 . 690)) nil (25808 25378 801561 0) 0 nil])
([nil nil ((632 . 661) (#("                       " 0 23 (cider-locals nil help-echo cider--help-echo fontified t ws-butler-chg chg)) . 632) 690) nil (25808 25378 801548 0) 0 nil])
([nil nil ((#("whatever" 0 8 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t ws-butler-chg chg)) . -685) (undo-tree-id1587 . -8) 693) nil (25808 25378 801547 0) 0 nil])
([nil nil ((685 . 688)) nil (25808 25378 801545 0) 0 nil])
([nil nil ((#("n" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t ws-butler-chg chg)) . -687) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) 688) nil (25808 25378 801540 0) 0 nil])
([nil nil ((687 . 690)) nil (25808 25378 801480 0) 0 nil])
([nil nil ((862 . 872) (t 25808 25378 828199 143000)) nil (25809 43126 586912 0) 0 nil])
([nil nil ((nil help-echo cider--help-echo 967 . 968) (nil fontified nil 967 . 968) (nil help-echo cider--help-echo 966 . 967) (nil fontified nil 966 . 967) (nil help-echo cider--help-echo 965 . 966) (nil fontified nil 965 . 966) (nil help-echo cider--help-echo 957 . 965) (nil fontified nil 957 . 965) (nil help-echo cider--help-echo 956 . 957) (nil fontified nil 956 . 957) (nil help-echo cider--help-echo 955 . 956) (nil fontified nil 955 . 956) (nil help-echo cider--help-echo 951 . 955) (nil fontified nil 951 . 955) (nil help-echo cider--help-echo 950 . 951) (nil fontified nil 950 . 951) (nil help-echo cider--help-echo 949 . 950) (nil fontified nil 949 . 950) (nil help-echo cider--help-echo 948 . 949) (nil fontified nil 948 . 949) (nil help-echo cider--help-echo 934 . 948) (nil fontified nil 934 . 948) (nil help-echo cider--help-echo 933 . 934) (nil fontified nil 933 . 934) (nil help-echo cider--help-echo 910 . 933) (nil fontified nil 910 . 933) (nil help-echo cider--help-echo 909 . 910) (nil fontified nil 909 . 910) (nil help-echo cider--help-echo 903 . 909) (nil fontified nil 903 . 909) (nil help-echo cider--help-echo 902 . 903) (nil fontified nil 902 . 903) (nil help-echo cider--help-echo 901 . 902) (nil fontified nil 901 . 902) (nil help-echo cider--help-echo 887 . 901) (nil fontified nil 887 . 901) (nil help-echo cider--help-echo 886 . 887) (nil fontified nil 886 . 887) (nil help-echo cider--help-echo 885 . 886) (nil fontified nil 885 . 886) (nil help-echo cider--help-echo 884 . 885) (nil fontified nil 884 . 885) (nil help-echo cider--help-echo 883 . 884) (nil fontified nil 883 . 884) (nil help-echo cider--help-echo 873 . 883) (nil fontified nil 873 . 883) (nil help-echo cider--help-echo 872 . 873) (nil fontified nil 872 . 873) (872 . 968)) nil (25809 43440 664144 0) 0 nil])
([nil nil ((#("whatever" 0 8 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo)) . -957) (undo-tree-id1592 . -8) 965 (t 25809 43126 613251 615000)) nil (25809 43986 216269 0) 0 nil] [nil nil ((#(":directives [{:directive-type :access" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 1 11 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 11 12 (cider-locals nil help-echo cider--help-echo fontified t) 12 13 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo fontified t) 13 14 (face (rainbow-delimiters-depth-7-face) cider-locals nil help-echo cider--help-echo fontified t) 14 15 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 15 29 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 29 30 (cider-locals nil help-echo cider--help-echo fontified t) 30 31 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 31 37 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t)) . 872) (undo-tree-id1588 . -37) (undo-tree-id1589 . -37) (undo-tree-id1590 . -37) 909 (t 25809 43126 613251 615000)) ((nil ws-butler-chg delete 909 . 910) (872 . 909)) (25809 43440 185863 0) 0 nil])
([nil nil ((957 . 959)) nil (25809 43986 216261 0) 0 nil])
([nil nil ((872 . 873)) ((#("b" 0 1 (cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . 872) (undo-tree-id1591 . -1)) (25809 43440 185735 0) 0 nil])
([nil nil ((959 . 964)) nil (25809 43986 216258 0) 0 nil])
nil
([nil nil ((#("s" 0 1 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo)) . -961) (undo-tree-id1593 . -1) (#("e" 0 1 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo)) . -962) (undo-tree-id1594 . -1) (#("r" 0 1 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo)) . -963) (undo-tree-id1595 . -1) 964 (t 25809 43986 242474 851000)) nil (25809 43987 610346 0) 0 nil])
([nil nil ((961 . 963)) nil (25809 43987 610329 0) 0 nil])
([nil nil ((2355 . 2356) (2284 . 2289) (t 25809 43987 635716 788000)) nil (25809 54464 400353 0) 0 nil])
([nil nil ((nil help-echo cider--help-echo 2391 . 2392) (nil fontified nil 2391 . 2392) (nil help-echo cider--help-echo 2390 . 2391) (nil fontified nil 2390 . 2391) (nil help-echo cider--help-echo 2389 . 2390) (nil fontified nil 2389 . 2390) (nil help-echo cider--help-echo 2387 . 2389) (nil fontified nil 2387 . 2389) (nil help-echo cider--help-echo 2383 . 2387) (nil fontified nil 2383 . 2387) (nil help-echo cider--help-echo 2382 . 2383) (nil fontified nil 2382 . 2383) (nil help-echo cider--help-echo 2381 . 2382) (nil fontified nil 2381 . 2382) (nil help-echo cider--help-echo 2377 . 2381) (nil fontified nil 2377 . 2381) (nil help-echo cider--help-echo 2376 . 2377) (nil fontified nil 2376 . 2377) (nil help-echo cider--help-echo 2375 . 2376) (nil fontified nil 2375 . 2376) (nil help-echo cider--help-echo 2374 . 2375) (nil fontified nil 2374 . 2375) (nil help-echo cider--help-echo 2360 . 2374) (nil fontified nil 2360 . 2374) (nil help-echo cider--help-echo 2359 . 2360) (nil fontified nil 2359 . 2360) (nil help-echo cider--help-echo 2336 . 2359) (nil fontified nil 2336 . 2359) (nil help-echo cider--help-echo 2335 . 2336) (nil fontified nil 2335 . 2336) (nil help-echo cider--help-echo 2329 . 2335) (nil fontified nil 2329 . 2335) (nil help-echo cider--help-echo 2328 . 2329) (nil fontified nil 2328 . 2329) (nil help-echo cider--help-echo 2327 . 2328) (nil fontified nil 2327 . 2328) (nil help-echo cider--help-echo 2313 . 2327) (nil fontified nil 2313 . 2327) (nil help-echo cider--help-echo 2312 . 2313) (nil fontified nil 2312 . 2313) (nil help-echo cider--help-echo 2311 . 2312) (nil fontified nil 2311 . 2312) (nil help-echo cider--help-echo 2310 . 2311) (nil fontified nil 2310 . 2311) (nil help-echo cider--help-echo 2309 . 2310) (nil fontified nil 2309 . 2310) (nil help-echo cider--help-echo 2299 . 2309) (nil fontified nil 2299 . 2309) (nil help-echo cider--help-echo 2298 . 2299) (nil fontified nil 2298 . 2299) (nil help-echo cider--help-echo 2289 . 2298) (nil fontified nil 2289 . 2298) (2289 . 2392)) nil (25809 54464 400349 0) 0 nil])
([nil nil ((#("         " 0 9 (cider-locals nil help-echo cider--help-echo fontified t ws-butler-chg chg)) . 2289) (#("   " 0 3 (cider-locals nil help-echo cider--help-echo fontified t ws-butler-chg chg)) . 2336) (#("  " 0 2 (cider-locals nil help-echo cider--help-echo fontified t ws-butler-chg chg)) . 2357) (#(" " 0 1 (cider-locals nil fontified t ws-butler-chg chg help-echo cider--help-echo)) . 2458) 2285) nil (25809 54464 400332 0) 0 nil])
([nil nil ((#("    :directives [{:directive-type :access
                  :directive-args {:role :tester}}]" 0 4 (cider-locals nil fontified t help-echo cider--help-echo) 4 5 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 5 15 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 15 16 (cider-locals nil fontified t help-echo cider--help-echo) 16 17 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo) 17 18 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 18 19 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 19 33 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 33 34 (cider-locals nil fontified t help-echo cider--help-echo) 34 35 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 35 41 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 41 42 (cider-locals nil fontified t help-echo cider--help-echo) 42 60 (cider-locals nil fontified t help-echo cider--help-echo) 60 61 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 61 75 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 75 76 (cider-locals nil fontified t help-echo cider--help-echo) 76 77 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 77 78 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 78 82 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 82 83 (cider-locals nil fontified t help-echo cider--help-echo) 83 84 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 84 88 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 88 90 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 90 91 (face (rainbow-delimiters-depth-7-face) cider-locals nil fontified t help-echo cider--help-echo) 91 92 (face (rainbow-delimiters-depth-6-face) cider-locals nil fontified t help-echo cider--help-echo) 92 93 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo rear-nonsticky t)) . 2285) (undo-tree-id1604 . -4) (undo-tree-id1605 . -93) (undo-tree-id1606 . -93) 2378 (t 25809 54464 427845 982000)) nil (25809 54483 508485 0) 0 nil])
([nil nil ((2285 . 2286)) nil (25809 54483 508481 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . -2284) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (#("=" 0 1 (face font-lock-function-name-face cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . -2285) (undo-tree-id1603 . -1) 2286) nil (25809 54483 508479 0) 0 nil])
([nil nil ((2301 . 2307)) nil (25809 54483 508463 0) 0 nil])
([nil nil ((nil help-echo cider--help-echo 2399 . 2400) (nil fontified nil 2399 . 2400) (nil help-echo cider--help-echo 2398 . 2399) (nil fontified nil 2398 . 2399) (nil help-echo cider--help-echo 2397 . 2398) (nil fontified nil 2397 . 2398) (nil help-echo cider--help-echo 2395 . 2397) (nil fontified nil 2395 . 2397) (nil help-echo cider--help-echo 2391 . 2395) (nil fontified nil 2391 . 2395) (nil help-echo cider--help-echo 2390 . 2391) (nil fontified nil 2390 . 2391) (nil help-echo cider--help-echo 2389 . 2390) (nil fontified nil 2389 . 2390) (nil help-echo cider--help-echo 2385 . 2389) (nil fontified nil 2385 . 2389) (nil help-echo cider--help-echo 2384 . 2385) (nil fontified nil 2384 . 2385) (nil help-echo cider--help-echo 2383 . 2384) (nil fontified nil 2383 . 2384) (nil help-echo cider--help-echo 2382 . 2383) (nil fontified nil 2382 . 2383) (nil help-echo cider--help-echo 2368 . 2382) (nil fontified nil 2368 . 2382) (nil help-echo cider--help-echo 2367 . 2368) (nil fontified nil 2367 . 2368) (nil help-echo cider--help-echo 2349 . 2367) (nil fontified nil 2349 . 2367) (nil help-echo cider--help-echo 2348 . 2349) (nil fontified nil 2348 . 2349) (nil help-echo cider--help-echo 2342 . 2348) (nil fontified nil 2342 . 2348) (nil help-echo cider--help-echo 2341 . 2342) (nil fontified nil 2341 . 2342) (nil help-echo cider--help-echo 2340 . 2341) (nil fontified nil 2340 . 2341) (nil help-echo cider--help-echo 2326 . 2340) (nil fontified nil 2326 . 2340) (nil help-echo cider--help-echo 2325 . 2326) (nil fontified nil 2325 . 2326) (nil help-echo cider--help-echo 2324 . 2325) (nil fontified nil 2324 . 2325) (nil help-echo cider--help-echo 2323 . 2324) (nil fontified nil 2323 . 2324) (nil help-echo cider--help-echo 2322 . 2323) (nil fontified nil 2322 . 2323) (nil help-echo cider--help-echo 2312 . 2322) (nil fontified nil 2312 . 2322) (nil help-echo cider--help-echo 2311 . 2312) (nil fontified nil 2311 . 2312) (nil help-echo cider--help-echo 2307 . 2311) (nil fontified nil 2307 . 2311) (2307 . 2400)) nil (25809 54483 508457 0) 0 nil])
([nil nil ((#("    " 0 4 (cider-locals nil help-echo cider--help-echo fontified t)) . 2307) (2349 . 2350) 2302 (t 25809 54483 535210 193000)) nil (25809 54485 939150 0) 0 nil])
([nil nil ((#("tester" 0 6 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t)) . -2388) (undo-tree-id0 . -6) (undo-tree-id1 . -6) (undo-tree-id2 . -6) (undo-tree-id3 . -6) (undo-tree-id4 . -6) (undo-tree-id5 . -6) (undo-tree-id6 . -6) (undo-tree-id7 . -6) (undo-tree-id8 . -6) (undo-tree-id9 . -6) (undo-tree-id10 . -6) (undo-tree-id11 . -6) (undo-tree-id12 . -6) (undo-tree-id13 . -6) (undo-tree-id14 . -6) (undo-tree-id15 . -6) (undo-tree-id16 . -6) (undo-tree-id17 . -6) (undo-tree-id18 . -6) (undo-tree-id19 . -6) (undo-tree-id20 . -6) (undo-tree-id21 . -6) (undo-tree-id22 . -6) 2394 (t 25809 54485 966183 568000)) nil (25816 21060 807355 0) 0 nil])
([nil nil ((2388 . 2395)) nil (25816 21060 807318 0) 0 nil])
([nil nil ((#("     :directives [{:directive-type :access
                   :directive-args {:role :checker}}]" 0 5 (cider-locals nil help-echo cider--help-echo fontified t) 5 6 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 6 16 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 16 17 (cider-locals nil help-echo cider--help-echo fontified t) 17 18 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo fontified t) 18 19 (face (rainbow-delimiters-depth-7-face) cider-locals nil help-echo cider--help-echo fontified t) 19 20 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 20 34 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 34 35 (cider-locals nil help-echo cider--help-echo fontified t) 35 36 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 36 42 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 42 43 (cider-locals nil help-echo cider--help-echo fontified t) 43 62 (cider-locals nil help-echo cider--help-echo fontified t) 62 63 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 63 77 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 77 78 (cider-locals nil help-echo cider--help-echo fontified t) 78 79 (face (rainbow-delimiters-depth-8-face) cider-locals nil help-echo cider--help-echo fontified t) 79 80 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 80 84 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 84 85 (cider-locals nil help-echo cider--help-echo fontified t) 85 86 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 86 93 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 93 94 (face (rainbow-delimiters-depth-8-face) cider-locals nil help-echo cider--help-echo fontified t) 94 95 (face (rainbow-delimiters-depth-7-face) cider-locals nil help-echo cider--help-echo fontified t) 95 96 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo fontified t)) . 2302) (undo-tree-id28 . -96) (undo-tree-id29 . -93) (undo-tree-id30 . -96) (undo-tree-id31 . -93) (t 25816 21060 835105 616000)) nil (25816 21229 63251 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . -2301) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) 2302) nil (25816 21229 63246 0) 0 nil])
([nil nil ((1646 . 1652)) nil (25816 21229 63236 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1747 . 1748) (nil help-echo cider--help-echo 1747 . 1748) (nil fontified nil 1747 . 1748) (nil help-echo cider--help-echo 1746 . 1747) (nil fontified nil 1746 . 1747) (nil help-echo cider--help-echo 1745 . 1746) (nil fontified nil 1745 . 1746) (nil help-echo cider--help-echo 1738 . 1745) (nil fontified nil 1738 . 1745) (nil help-echo cider--help-echo 1737 . 1738) (nil fontified nil 1737 . 1738) (nil help-echo cider--help-echo 1736 . 1737) (nil fontified nil 1736 . 1737) (nil help-echo cider--help-echo 1732 . 1736) (nil fontified nil 1732 . 1736) (nil help-echo cider--help-echo 1731 . 1732) (nil fontified nil 1731 . 1732) (nil help-echo cider--help-echo 1730 . 1731) (nil fontified nil 1730 . 1731) (nil help-echo cider--help-echo 1729 . 1730) (nil fontified nil 1729 . 1730) (nil help-echo cider--help-echo 1715 . 1729) (nil fontified nil 1715 . 1729) (nil help-echo cider--help-echo 1714 . 1715) (nil fontified nil 1714 . 1715) (nil help-echo cider--help-echo 1695 . 1714) (nil fontified nil 1695 . 1714) (nil help-echo cider--help-echo 1694 . 1695) (nil fontified nil 1694 . 1695) (nil help-echo cider--help-echo 1688 . 1694) (nil fontified nil 1688 . 1694) (nil help-echo cider--help-echo 1687 . 1688) (nil fontified nil 1687 . 1688) (nil help-echo cider--help-echo 1686 . 1687) (nil fontified nil 1686 . 1687) (nil help-echo cider--help-echo 1672 . 1686) (nil fontified nil 1672 . 1686) (nil help-echo cider--help-echo 1671 . 1672) (nil fontified nil 1671 . 1672) (nil help-echo cider--help-echo 1670 . 1671) (nil fontified nil 1670 . 1671) (nil help-echo cider--help-echo 1669 . 1670) (nil fontified nil 1669 . 1670) (nil help-echo cider--help-echo 1668 . 1669) (nil fontified nil 1668 . 1669) (nil help-echo cider--help-echo 1658 . 1668) (nil fontified nil 1658 . 1668) (nil help-echo cider--help-echo 1657 . 1658) (nil fontified nil 1657 . 1658) (nil help-echo cider--help-echo 1652 . 1657) (nil fontified nil 1652 . 1657) (1652 . 1748)) nil (25816 21229 63233 0) 0 nil])
([nil nil ((#("     " 0 5 (cider-locals nil help-echo cider--help-echo fontified t ws-butler-chg chg)) . -1652)) nil (25816 39529 164208 0) 0 nil])
([nil nil ((61 . 63) (t 25816 39530 174933 253000)) nil (25817 24228 726412 0) 0 nil] [nil nil ((1814 . 1826) (t 25816 39452 607462 511000)) ((#("
           " 0 1 (cider-locals nil fontified t help-echo cider--help-echo) 1 12 (cider-locals nil fontified t help-echo cider--help-echo)) . 1814) (undo-tree-id378 . -12) (undo-tree-id379 . -12) (undo-tree-id380 . -12) (undo-tree-id381 . -12) (undo-tree-id382 . -12) (undo-tree-id383 . -12) (undo-tree-id384 . -12) (undo-tree-id385 . -12) (undo-tree-id386 . -12) (undo-tree-id387 . -12) (undo-tree-id388 . -12) (undo-tree-id389 . -12) (undo-tree-id390 . -12) (undo-tree-id391 . -12) (undo-tree-id392 . -12) (undo-tree-id393 . -12) (undo-tree-id394 . -12) (undo-tree-id395 . -12) (undo-tree-id396 . -12) (undo-tree-id397 . -12) (undo-tree-id398 . -12) (undo-tree-id399 . -12) (undo-tree-id400 . -12) (undo-tree-id401 . -12) (undo-tree-id402 . -12) (undo-tree-id403 . -12) (undo-tree-id404 . -12) (undo-tree-id405 . -12) (undo-tree-id406 . -12) (undo-tree-id407 . -12) (undo-tree-id408 . -12) (undo-tree-id409 . -12) (undo-tree-id410 . -12) (undo-tree-id411 . -12) (undo-tree-id412 . -12) (undo-tree-id413 . -12) (undo-tree-id414 . -12) (undo-tree-id415 . -12) (undo-tree-id416 . -12) (undo-tree-id417 . -12) (undo-tree-id418 . -12) (undo-tree-id419 . -12) (undo-tree-id420 . -12) (undo-tree-id421 . -12) (undo-tree-id422 . -12) (undo-tree-id423 . -12) (undo-tree-id424 . -12) (undo-tree-id425 . -12) (undo-tree-id426 . -12) (undo-tree-id427 . -12) (undo-tree-id428 . -12) (undo-tree-id429 . -12) (undo-tree-id430 . -12) (undo-tree-id431 . -12) (undo-tree-id432 . -12) (undo-tree-id433 . -12) (undo-tree-id434 . -12) (undo-tree-id435 . -12) (undo-tree-id436 . -12) (undo-tree-id437 . -12) (undo-tree-id438 . -12) (undo-tree-id439 . -12) (undo-tree-id440 . -12) (undo-tree-id441 . -12) (undo-tree-id442 . -12) (undo-tree-id443 . -12) (undo-tree-id444 . -12) (undo-tree-id445 . -12) (undo-tree-id446 . -12) (undo-tree-id447 . -12) (undo-tree-id448 . -12) (undo-tree-id449 . -12) (undo-tree-id450 . -12) (undo-tree-id451 . -12) (undo-tree-id452 . -12) (undo-tree-id453 . -12) (undo-tree-id454 . -12) (undo-tree-id455 . -12) (undo-tree-id456 . -12) (undo-tree-id457 . -12) (undo-tree-id458 . -12) (undo-tree-id459 . -12) (undo-tree-id460 . -12) (undo-tree-id461 . -12) (undo-tree-id462 . -12) (undo-tree-id463 . -12) (undo-tree-id464 . -12) (undo-tree-id465 . -12) (undo-tree-id466 . -12) (undo-tree-id467 . -12) (undo-tree-id468 . -12) (undo-tree-id469 . -12) (undo-tree-id470 . -12) (undo-tree-id471 . -12) (undo-tree-id472 . -12) (undo-tree-id473 . -12) (undo-tree-id474 . -12) (undo-tree-id475 . -12) (undo-tree-id476 . -12) (undo-tree-id477 . -12) (undo-tree-id478 . -12) (undo-tree-id479 . -12) (undo-tree-id480 . -12) (undo-tree-id481 . -12) (undo-tree-id482 . -12) (undo-tree-id483 . -1) (undo-tree-id484 . -12) (undo-tree-id485 . -12) (undo-tree-id486 . -12) (undo-tree-id487 . -12) (undo-tree-id488 . -12) (undo-tree-id489 . -12) (undo-tree-id490 . -12) (undo-tree-id491 . -12) (undo-tree-id492 . -12) (undo-tree-id493 . -12) (undo-tree-id494 . -12) (undo-tree-id495 . -12) (undo-tree-id496 . -12) (undo-tree-id497 . -12) (undo-tree-id498 . -12) (undo-tree-id499 . -12) (undo-tree-id500 . -12) (undo-tree-id501 . -12) (undo-tree-id502 . -12) (undo-tree-id503 . -12) (undo-tree-id504 . -12) (undo-tree-id505 . -12) (undo-tree-id506 . -12) (undo-tree-id507 . -12) (undo-tree-id508 . -12) (undo-tree-id509 . -12) (undo-tree-id510 . -12) (undo-tree-id511 . -12) (undo-tree-id512 . -12) (undo-tree-id513 . -12) (undo-tree-id514 . -12) (undo-tree-id515 . -12) (undo-tree-id516 . -12) (undo-tree-id517 . -12) (undo-tree-id518 . -12) (undo-tree-id519 . -12) (undo-tree-id520 . -12) (undo-tree-id521 . -12)) (25816 39528 535672 0) 0 nil] [nil nil ((1814 . 1815) (t 25816 39452 607462 511000)) ((#("x" 0 1 (cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . 1814) (undo-tree-id271 . -1)) (25816 39455 153763 0) 0 nil] [nil nil ((1814 . 1826) (t 25816 21229 91533 435000)) ((#("
           " 0 1 (cider-locals nil fontified t help-echo cider--help-echo) 1 12 (cider-locals nil fontified t help-echo cider--help-echo)) . 1814) (undo-tree-id136 . -12) (undo-tree-id137 . -12) (undo-tree-id138 . -12) (undo-tree-id139 . -12) (undo-tree-id140 . -12) (undo-tree-id141 . -12) (undo-tree-id142 . -12) (undo-tree-id143 . -12) (undo-tree-id144 . -12) (undo-tree-id145 . -12) (undo-tree-id146 . -12) (undo-tree-id147 . -12) (undo-tree-id148 . -12) (undo-tree-id149 . -12) (undo-tree-id150 . -12) (undo-tree-id151 . -12) (undo-tree-id152 . -12) (undo-tree-id153 . -12) (undo-tree-id154 . -12) (undo-tree-id155 . -12) (undo-tree-id156 . -12) (undo-tree-id157 . -12) (undo-tree-id158 . -12) (undo-tree-id159 . -12) (undo-tree-id160 . -12) (undo-tree-id161 . -12) (undo-tree-id162 . -12) (undo-tree-id163 . -12) (undo-tree-id164 . -12) (undo-tree-id165 . -12) (undo-tree-id166 . -12) (undo-tree-id167 . -12) (undo-tree-id168 . -12) (undo-tree-id169 . -12) (undo-tree-id170 . -12) (undo-tree-id171 . -12) (undo-tree-id172 . -12) (undo-tree-id173 . -12) (undo-tree-id174 . -12) (undo-tree-id175 . -12) (undo-tree-id176 . -12) (undo-tree-id177 . -12) (undo-tree-id178 . -12) (undo-tree-id179 . -12) (undo-tree-id180 . -12) (undo-tree-id181 . -12) (undo-tree-id182 . -12) (undo-tree-id183 . -12) (undo-tree-id184 . -12) (undo-tree-id185 . -12) (undo-tree-id186 . -12) (undo-tree-id187 . -12) (undo-tree-id188 . -12) (undo-tree-id189 . -12) (undo-tree-id190 . -12) (undo-tree-id191 . -12) (undo-tree-id192 . -12) (undo-tree-id193 . -12) (undo-tree-id194 . -12) (undo-tree-id195 . -12) (undo-tree-id196 . -12) (undo-tree-id197 . -12) (undo-tree-id198 . -12) (undo-tree-id199 . -12) (undo-tree-id200 . -12) (undo-tree-id201 . -12) (undo-tree-id202 . -12) (undo-tree-id203 . -12) (undo-tree-id204 . -12) (undo-tree-id205 . -12) (undo-tree-id206 . -12) (undo-tree-id207 . -12) (undo-tree-id208 . -12) (undo-tree-id209 . -12) (undo-tree-id210 . -12) (undo-tree-id211 . -12) (undo-tree-id212 . -12) (undo-tree-id213 . -12) (undo-tree-id214 . -12) (undo-tree-id215 . -12) (undo-tree-id216 . -12) (undo-tree-id217 . -12) (undo-tree-id218 . -12) (undo-tree-id219 . -12) (undo-tree-id220 . -12) (undo-tree-id221 . -12) (undo-tree-id222 . -12) (undo-tree-id223 . -12) (undo-tree-id224 . -12) (undo-tree-id225 . -12) (undo-tree-id226 . -12) (undo-tree-id227 . -12) (undo-tree-id228 . -12) (undo-tree-id229 . -12) (undo-tree-id230 . -12) (undo-tree-id231 . -12) (undo-tree-id232 . -12) (undo-tree-id233 . -12) (undo-tree-id234 . -12) (undo-tree-id235 . -12) (undo-tree-id236 . -12) (undo-tree-id237 . -12) (undo-tree-id238 . -12) (undo-tree-id239 . -1) (undo-tree-id240 . -12) (undo-tree-id241 . -12) (undo-tree-id242 . -12) (undo-tree-id243 . -12) (undo-tree-id244 . -12) (undo-tree-id245 . -12) (undo-tree-id246 . -12) (undo-tree-id247 . -12) (undo-tree-id248 . -12) (undo-tree-id249 . -12) (undo-tree-id250 . -12) (undo-tree-id251 . -12) (undo-tree-id252 . -12) (undo-tree-id253 . -12) (undo-tree-id254 . -12) (undo-tree-id255 . -12) (undo-tree-id256 . -12) (undo-tree-id257 . -12) (undo-tree-id258 . -12) (undo-tree-id259 . -12) (undo-tree-id260 . -12) (undo-tree-id261 . -12) (undo-tree-id262 . -12) (undo-tree-id263 . -12) (undo-tree-id264 . -12) (undo-tree-id265 . -12) (undo-tree-id266 . -12) (undo-tree-id267 . -12) (undo-tree-id268 . -12) (undo-tree-id269 . -12) (undo-tree-id270 . -12)) (25816 39450 932287 0) 0 nil])
([nil nil ((63 . 69)) nil (25817 24273 570132 0) 0 nil])
([nil nil ((nil help-echo cider--help-echo 1921 . 1922) (nil fontified nil 1921 . 1922) (nil help-echo cider--help-echo 1920 . 1921) (nil fontified nil 1920 . 1921) (nil help-echo cider--help-echo 1919 . 1920) (nil fontified nil 1919 . 1920) (nil help-echo cider--help-echo 1912 . 1919) (nil fontified nil 1912 . 1919) (nil help-echo cider--help-echo 1911 . 1912) (nil fontified nil 1911 . 1912) (nil help-echo cider--help-echo 1910 . 1911) (nil fontified nil 1910 . 1911) (nil help-echo cider--help-echo 1906 . 1910) (nil fontified nil 1906 . 1910) (nil help-echo cider--help-echo 1905 . 1906) (nil fontified nil 1905 . 1906) (nil help-echo cider--help-echo 1904 . 1905) (nil fontified nil 1904 . 1905) (nil help-echo cider--help-echo 1903 . 1904) (nil fontified nil 1903 . 1904) (nil help-echo cider--help-echo 1889 . 1903) (nil fontified nil 1889 . 1903) (nil help-echo cider--help-echo 1888 . 1889) (nil fontified nil 1888 . 1889) (nil help-echo cider--help-echo 1869 . 1888) (nil fontified nil 1869 . 1888) (nil help-echo cider--help-echo 1868 . 1869) (nil fontified nil 1868 . 1869) (nil help-echo cider--help-echo 1862 . 1868) (nil fontified nil 1862 . 1868) (nil help-echo cider--help-echo 1861 . 1862) (nil fontified nil 1861 . 1862) (nil help-echo cider--help-echo 1860 . 1861) (nil fontified nil 1860 . 1861) (nil help-echo cider--help-echo 1846 . 1860) (nil fontified nil 1846 . 1860) (nil help-echo cider--help-echo 1845 . 1846) (nil fontified nil 1845 . 1846) (nil help-echo cider--help-echo 1844 . 1845) (nil fontified nil 1844 . 1845) (nil help-echo cider--help-echo 1843 . 1844) (nil fontified nil 1843 . 1844) (nil help-echo cider--help-echo 1842 . 1843) (nil fontified nil 1842 . 1843) (nil help-echo cider--help-echo 1832 . 1842) (nil fontified nil 1832 . 1842) (nil help-echo cider--help-echo 1831 . 1832) (nil fontified nil 1831 . 1832) (nil help-echo cider--help-echo 1826 . 1831) (nil fontified nil 1826 . 1831) (1826 . 1922)) ((#("     :directives [{:directive-type :access
                   :directive-args {:role :checker}}]" 0 5 (cider-locals nil help-echo cider--help-echo fontified nil ws-butler-chg chg) 5 6 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 6 16 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 16 17 (cider-locals nil help-echo cider--help-echo fontified nil) 17 18 (face (rainbow-delimiters-depth-8-face) cider-locals nil help-echo cider--help-echo fontified nil) 18 19 (face (rainbow-delimiters-depth-9-face) cider-locals nil help-echo cider--help-echo fontified nil) 19 20 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 20 34 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 34 35 (cider-locals nil help-echo cider--help-echo fontified nil) 35 36 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 36 42 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 42 43 (cider-locals nil help-echo cider--help-echo fontified nil) 43 62 (cider-locals nil help-echo cider--help-echo fontified nil ws-butler-chg chg) 62 63 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 63 77 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 77 78 (cider-locals nil help-echo cider--help-echo fontified nil) 78 79 (face (rainbow-delimiters-depth-1-face) cider-locals nil help-echo cider--help-echo fontified nil) 79 80 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 80 84 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 84 85 (cider-locals nil help-echo cider--help-echo fontified nil) 85 86 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 86 93 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 93 94 (face (rainbow-delimiters-depth-1-face) cider-locals nil help-echo cider--help-echo fontified nil) 94 95 (face (rainbow-delimiters-depth-9-face) cider-locals nil help-echo cider--help-echo fontified nil) 95 96 (face (rainbow-delimiters-depth-8-face) cider-locals nil help-echo cider--help-echo fontified nil rear-nonsticky t)) . 1826) (undo-tree-id272 . -80) (undo-tree-id273 . -80) (undo-tree-id274 . -80) (undo-tree-id275 . -80) (undo-tree-id276 . -80) (undo-tree-id277 . -80) (undo-tree-id278 . -80) (undo-tree-id279 . -80) (undo-tree-id280 . -80) (undo-tree-id281 . -80) (undo-tree-id282 . -80) (undo-tree-id283 . -80) (undo-tree-id284 . -80) (undo-tree-id285 . -80) (undo-tree-id286 . -80) (undo-tree-id287 . -80) (undo-tree-id288 . -80) (undo-tree-id289 . -80) (undo-tree-id290 . -80) (undo-tree-id291 . -80) (undo-tree-id292 . -80) (undo-tree-id293 . -80) (undo-tree-id294 . -80) (undo-tree-id295 . -80) (undo-tree-id296 . -80) (undo-tree-id297 . -80) (undo-tree-id298 . -80) (undo-tree-id299 . -80) (undo-tree-id300 . -80) (undo-tree-id301 . -80) (undo-tree-id302 . -80) (undo-tree-id303 . -80) (undo-tree-id304 . -80) (undo-tree-id305 . -80) (undo-tree-id306 . -80) (undo-tree-id307 . -80) (undo-tree-id308 . -80) (undo-tree-id309 . -80) (undo-tree-id310 . -80) (undo-tree-id311 . -80) (undo-tree-id312 . -80) (undo-tree-id313 . -80) (undo-tree-id314 . -80) (undo-tree-id315 . -80) (undo-tree-id316 . -80) (undo-tree-id317 . -80) (undo-tree-id318 . -80) (undo-tree-id319 . -80) (undo-tree-id320 . -80) (undo-tree-id321 . -80) (undo-tree-id322 . -80) (undo-tree-id323 . -80) (undo-tree-id324 . -80) (undo-tree-id325 . -80) (undo-tree-id326 . -80) (undo-tree-id327 . -80) (undo-tree-id328 . -80) (undo-tree-id329 . -80) (undo-tree-id330 . -80) (undo-tree-id331 . -80) (undo-tree-id332 . -42) (undo-tree-id333 . -42) (undo-tree-id334 . -42) (undo-tree-id335 . -42) (undo-tree-id336 . -42) (undo-tree-id337 . -42) (undo-tree-id338 . -42) (undo-tree-id339 . -42) (undo-tree-id340 . -42) (undo-tree-id341 . -42) (undo-tree-id342 . -42) (undo-tree-id343 . -42) (undo-tree-id344 . -42) (undo-tree-id345 . -42) (undo-tree-id346 . -42) (undo-tree-id347 . -42) (undo-tree-id348 . -42) (undo-tree-id349 . -42) (undo-tree-id350 . -42) (undo-tree-id351 . -42) (undo-tree-id352 . -42) (undo-tree-id353 . -42) (undo-tree-id354 . -43) (undo-tree-id355 . -96) (undo-tree-id356 . -96) (undo-tree-id357 . -96) (undo-tree-id358 . -96) (undo-tree-id359 . -96) (undo-tree-id360 . -96) (undo-tree-id361 . -96) (undo-tree-id362 . -96) (undo-tree-id363 . -96) (undo-tree-id364 . -96) (undo-tree-id365 . -96) (undo-tree-id366 . -96) (undo-tree-id367 . -96) (undo-tree-id368 . -96) (undo-tree-id369 . -96) (undo-tree-id370 . -96) (undo-tree-id371 . -96) (undo-tree-id372 . -80) (undo-tree-id373 . -96) (undo-tree-id374 . -96) (undo-tree-id375 . -96) (undo-tree-id376 . -96) (undo-tree-id377 . -96) (nil fontified t 1868 . 1869) (nil fontified t 1921 . 1922)) (25816 39528 177224 0) 0 nil])
nil
([nil nil ((nil help-echo cider--help-echo 1921 . 1922) (nil fontified nil 1921 . 1922) (nil help-echo cider--help-echo 1920 . 1921) (nil fontified nil 1920 . 1921) (nil help-echo cider--help-echo 1919 . 1920) (nil fontified nil 1919 . 1920) (nil help-echo cider--help-echo 1912 . 1919) (nil fontified nil 1912 . 1919) (nil help-echo cider--help-echo 1911 . 1912) (nil fontified nil 1911 . 1912) (nil help-echo cider--help-echo 1910 . 1911) (nil fontified nil 1910 . 1911) (nil help-echo cider--help-echo 1906 . 1910) (nil fontified nil 1906 . 1910) (nil help-echo cider--help-echo 1905 . 1906) (nil fontified nil 1905 . 1906) (nil help-echo cider--help-echo 1904 . 1905) (nil fontified nil 1904 . 1905) (nil help-echo cider--help-echo 1903 . 1904) (nil fontified nil 1903 . 1904) (nil help-echo cider--help-echo 1889 . 1903) (nil fontified nil 1889 . 1903) (nil help-echo cider--help-echo 1888 . 1889) (nil fontified nil 1888 . 1889) (nil help-echo cider--help-echo 1869 . 1888) (nil fontified nil 1869 . 1888) (nil help-echo cider--help-echo 1868 . 1869) (nil fontified nil 1868 . 1869) (nil help-echo cider--help-echo 1862 . 1868) (nil fontified nil 1862 . 1868) (nil help-echo cider--help-echo 1861 . 1862) (nil fontified nil 1861 . 1862) (nil help-echo cider--help-echo 1860 . 1861) (nil fontified nil 1860 . 1861) (nil help-echo cider--help-echo 1846 . 1860) (nil fontified nil 1846 . 1860) (nil help-echo cider--help-echo 1845 . 1846) (nil fontified nil 1845 . 1846) (nil help-echo cider--help-echo 1844 . 1845) (nil fontified nil 1844 . 1845) (nil help-echo cider--help-echo 1843 . 1844) (nil fontified nil 1843 . 1844) (nil help-echo cider--help-echo 1842 . 1843) (nil fontified nil 1842 . 1843) (nil help-echo cider--help-echo 1832 . 1842) (nil fontified nil 1832 . 1842) (nil help-echo cider--help-echo 1831 . 1832) (nil fontified nil 1831 . 1832) (nil help-echo cider--help-echo 1826 . 1831) (nil fontified nil 1826 . 1831) (1826 . 1922)) ((#("     :directives [{:directive-type :access
                   :directive-args {:role :checker}}]" 0 5 (cider-locals nil help-echo cider--help-echo fontified nil) 5 6 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 6 16 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 16 17 (cider-locals nil help-echo cider--help-echo fontified nil) 17 18 (face (rainbow-delimiters-depth-8-face) cider-locals nil help-echo cider--help-echo fontified nil) 18 19 (face (rainbow-delimiters-depth-9-face) cider-locals nil help-echo cider--help-echo fontified nil) 19 20 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 20 34 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 34 35 (cider-locals nil help-echo cider--help-echo fontified nil) 35 36 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 36 42 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 42 43 (cider-locals nil help-echo cider--help-echo fontified nil) 43 62 (cider-locals nil fontified nil help-echo cider--help-echo) 62 63 (face clojure-keyword-face cider-locals nil fontified nil help-echo cider--help-echo) 63 77 (face clojure-keyword-face cider-locals nil fontified nil help-echo cider--help-echo) 77 78 (cider-locals nil fontified nil help-echo cider--help-echo) 78 79 (face (rainbow-delimiters-depth-1-face) cider-locals nil fontified nil help-echo cider--help-echo) 79 80 (face clojure-keyword-face cider-locals nil fontified nil help-echo cider--help-echo) 80 84 (face clojure-keyword-face cider-locals nil fontified nil help-echo cider--help-echo) 84 85 (cider-locals nil fontified nil help-echo cider--help-echo) 85 86 (face clojure-keyword-face cider-locals nil fontified nil help-echo cider--help-echo) 86 93 (face clojure-keyword-face cider-locals nil fontified nil help-echo cider--help-echo) 93 94 (face (rainbow-delimiters-depth-1-face) cider-locals nil fontified nil help-echo cider--help-echo) 94 95 (face (rainbow-delimiters-depth-9-face) cider-locals nil fontified nil help-echo cider--help-echo) 95 96 (face (rainbow-delimiters-depth-8-face) cider-locals nil fontified nil help-echo cider--help-echo rear-nonsticky t)) . 1826) (undo-tree-id32 . -96) (undo-tree-id33 . -96) (undo-tree-id34 . -96) (undo-tree-id35 . -96) (undo-tree-id36 . -96) (undo-tree-id37 . -96) (undo-tree-id38 . -96) (undo-tree-id39 . -96) (undo-tree-id40 . -96) (undo-tree-id41 . -96) (undo-tree-id42 . -96) (undo-tree-id43 . -96) (undo-tree-id44 . -96) (undo-tree-id45 . -96) (undo-tree-id46 . -96) (undo-tree-id47 . -96) (undo-tree-id48 . -96) (undo-tree-id49 . -96) (undo-tree-id50 . -96) (undo-tree-id51 . -96) (undo-tree-id52 . -96) (undo-tree-id53 . -96) (undo-tree-id54 . -96) (undo-tree-id55 . -96) (undo-tree-id56 . -96) (undo-tree-id57 . -96) (undo-tree-id58 . -96) (undo-tree-id59 . -96) (undo-tree-id60 . -96) (undo-tree-id61 . -96) (undo-tree-id62 . -91) (undo-tree-id63 . -91) (undo-tree-id64 . -91) (undo-tree-id65 . -91) (undo-tree-id66 . -91) (undo-tree-id67 . -91) (undo-tree-id68 . -91) (undo-tree-id69 . -91) (undo-tree-id70 . -91) (undo-tree-id71 . -91) (undo-tree-id72 . -91) (undo-tree-id73 . -91) (undo-tree-id74 . -91) (undo-tree-id75 . -91) (undo-tree-id76 . -91) (undo-tree-id77 . -91) (undo-tree-id78 . -91) (undo-tree-id79 . -91) (undo-tree-id80 . -91) (undo-tree-id81 . -91) (undo-tree-id82 . -91) (undo-tree-id83 . -91) (undo-tree-id84 . -91) (undo-tree-id85 . -91) (undo-tree-id86 . -91) (undo-tree-id87 . -91) (undo-tree-id88 . -91) (undo-tree-id89 . -91) (undo-tree-id90 . -91) (undo-tree-id91 . -91) (undo-tree-id92 . -91) (undo-tree-id93 . -91) (undo-tree-id94 . -91) (undo-tree-id95 . -91) (undo-tree-id96 . -91) (undo-tree-id97 . -91) (undo-tree-id98 . -91) (undo-tree-id99 . -91) (undo-tree-id100 . -91) (undo-tree-id101 . -91) (undo-tree-id102 . -91) (undo-tree-id103 . -91) (undo-tree-id104 . -91) (undo-tree-id105 . -42) (undo-tree-id106 . -42) (undo-tree-id107 . -42) (undo-tree-id108 . -42) (undo-tree-id109 . -42) (undo-tree-id110 . -42) (undo-tree-id111 . -42) (undo-tree-id112 . -42) (undo-tree-id113 . -42) (undo-tree-id114 . -42) (undo-tree-id115 . -42) (undo-tree-id116 . -42) (undo-tree-id117 . -42) (undo-tree-id118 . -42) (undo-tree-id119 . -42) (undo-tree-id120 . -42) (undo-tree-id121 . -42) (undo-tree-id122 . -42) (undo-tree-id123 . -42) (undo-tree-id124 . -42) (undo-tree-id125 . -42) (undo-tree-id126 . -42) (undo-tree-id127 . -42) (undo-tree-id128 . -42) (undo-tree-id129 . -42) (undo-tree-id130 . -96) (undo-tree-id131 . -42) (undo-tree-id132 . -42) (undo-tree-id133 . -42) (undo-tree-id134 . -42) (undo-tree-id135 . -42) (nil fontified t 1868 . 1869) (nil fontified t 1921 . 1922)) (25816 39450 131535 0) 0 nil])
([nil nil ((69 . 71) (t 25817 24274 309101 343000)) nil (25817 26380 292538 0) 0 nil] [nil nil ((792 . 795) (t 25817 24228 756352 843000)) ((#("
  " 0 1 (cider-locals nil fontified t help-echo cider--help-echo) 1 3 (cider-locals nil fontified t help-echo cider--help-echo)) . 792) (undo-tree-id934 . -3) (undo-tree-id935 . -3) (undo-tree-id936 . -3) (undo-tree-id937 . -3) (undo-tree-id938 . -3) (undo-tree-id939 . -3) (undo-tree-id940 . -3) (undo-tree-id941 . -3) (undo-tree-id942 . -3) (undo-tree-id943 . -3) (undo-tree-id944 . -3) (undo-tree-id945 . -3) (undo-tree-id946 . -3) (undo-tree-id947 . -3) (undo-tree-id948 . -3) (undo-tree-id949 . -3) (undo-tree-id950 . -3) (undo-tree-id951 . -3) (undo-tree-id952 . -3) (undo-tree-id953 . -3) (undo-tree-id954 . -3) (undo-tree-id955 . -3) (undo-tree-id956 . -3) (undo-tree-id957 . -3) (undo-tree-id958 . -3) (undo-tree-id959 . -3) (undo-tree-id960 . -3) (undo-tree-id961 . -3) (undo-tree-id962 . -3) (undo-tree-id963 . -3) (undo-tree-id964 . -3) (undo-tree-id965 . -3) (undo-tree-id966 . -3) (undo-tree-id967 . -3) (undo-tree-id968 . -3) (undo-tree-id969 . -3) (undo-tree-id970 . -3) (undo-tree-id971 . -3) (undo-tree-id972 . -3) (undo-tree-id973 . -3) (undo-tree-id974 . -3) (undo-tree-id975 . -3) (undo-tree-id976 . -3) (undo-tree-id977 . -3) (undo-tree-id978 . -3) (undo-tree-id979 . -3) (undo-tree-id980 . -3) (undo-tree-id981 . -3) (undo-tree-id982 . -3) (undo-tree-id983 . -3) (undo-tree-id984 . -3) (undo-tree-id985 . -3) (undo-tree-id986 . -3) (undo-tree-id987 . -3) (undo-tree-id988 . -3) (undo-tree-id989 . -3) (undo-tree-id990 . -3) (undo-tree-id991 . -3) (undo-tree-id992 . -3) (undo-tree-id993 . -3) (undo-tree-id994 . -3) (undo-tree-id995 . -3) (undo-tree-id996 . -3) (undo-tree-id997 . -3) (undo-tree-id998 . -3) (undo-tree-id999 . -3) (undo-tree-id1000 . -3) (undo-tree-id1001 . -3) (undo-tree-id1002 . -3) (undo-tree-id1003 . -3) (undo-tree-id1004 . -3) (undo-tree-id1005 . -3) (undo-tree-id1006 . -3) (undo-tree-id1007 . -3) (undo-tree-id1008 . -3) (undo-tree-id1009 . -3) (undo-tree-id1010 . -3) (undo-tree-id1011 . -3) (undo-tree-id1012 . -3) (undo-tree-id1013 . -3) (undo-tree-id1014 . -3) (undo-tree-id1015 . -3) (undo-tree-id1016 . -3) (undo-tree-id1017 . -3) (undo-tree-id1018 . -3) (undo-tree-id1019 . -3) (undo-tree-id1020 . -3) (undo-tree-id1021 . -3) (undo-tree-id1022 . -3) (undo-tree-id1023 . -3) (undo-tree-id1024 . -3) (undo-tree-id1025 . -3) (undo-tree-id1026 . -3) (undo-tree-id1027 . -3) (undo-tree-id1028 . -3) (undo-tree-id1029 . -3) (undo-tree-id1030 . -3) (undo-tree-id1031 . -3) (undo-tree-id1032 . -3) (undo-tree-id1033 . -3) (undo-tree-id1034 . -3) (undo-tree-id1035 . -3) (undo-tree-id1036 . -3) (undo-tree-id1037 . -3) (undo-tree-id1038 . -3) (undo-tree-id1039 . -3) (undo-tree-id1040 . -3) (undo-tree-id1041 . -3) (undo-tree-id1042 . -3) (undo-tree-id1043 . -3) (undo-tree-id1044 . -3) (undo-tree-id1045 . -3) (undo-tree-id1046 . -3) (undo-tree-id1047 . -3) (undo-tree-id1048 . -3) (undo-tree-id1049 . -3) (undo-tree-id1050 . -3) (undo-tree-id1051 . -3) (undo-tree-id1052 . -3) (undo-tree-id1053 . -3) (undo-tree-id1054 . -3) (undo-tree-id1055 . -3) (undo-tree-id1056 . -3) (undo-tree-id1057 . -3) (undo-tree-id1058 . -3) (undo-tree-id1059 . -3) (undo-tree-id1060 . -3) (undo-tree-id1061 . -3) (undo-tree-id1062 . -3) (undo-tree-id1063 . -3) (undo-tree-id1064 . -3) (undo-tree-id1065 . -3) (undo-tree-id1066 . -3) (undo-tree-id1067 . -3) (undo-tree-id1068 . -3) (undo-tree-id1069 . -3) (undo-tree-id1070 . -3) (undo-tree-id1071 . -3) (undo-tree-id1072 . -3) (undo-tree-id1073 . -3) (undo-tree-id1074 . -3) (undo-tree-id1075 . -3) (undo-tree-id1076 . -3) (undo-tree-id1077 . -3) (undo-tree-id1078 . -3) (undo-tree-id1079 . -3) (undo-tree-id1080 . -3) (undo-tree-id1081 . -3) (undo-tree-id1082 . -3) (undo-tree-id1083 . -3) (undo-tree-id1084 . -3) (undo-tree-id1085 . -3) (undo-tree-id1086 . -3) (undo-tree-id1087 . -3) (undo-tree-id1088 . -3) (undo-tree-id1089 . -3) (undo-tree-id1090 . -3) (undo-tree-id1091 . -3) (undo-tree-id1092 . -3) (undo-tree-id1093 . -3) (undo-tree-id1094 . -3) (undo-tree-id1095 . -3) (undo-tree-id1096 . -3) (undo-tree-id1097 . -3) (undo-tree-id1098 . -3) (undo-tree-id1099 . -3) (undo-tree-id1100 . -3) (undo-tree-id1101 . -3) (undo-tree-id1102 . -3) (undo-tree-id1103 . -3) (undo-tree-id1104 . -3) (undo-tree-id1105 . -3) (undo-tree-id1106 . -3) (undo-tree-id1107 . -3) (undo-tree-id1108 . -3) (undo-tree-id1109 . -3) (undo-tree-id1110 . -3) (undo-tree-id1111 . -3) (undo-tree-id1112 . -3) (undo-tree-id1113 . -3) (undo-tree-id1114 . -3) (undo-tree-id1115 . -3) (undo-tree-id1116 . -3) (undo-tree-id1117 . -3) (undo-tree-id1118 . -3) (undo-tree-id1119 . -3) (undo-tree-id1120 . -3) (undo-tree-id1121 . -3) (undo-tree-id1122 . -3) (undo-tree-id1123 . -3) (undo-tree-id1124 . -3) (undo-tree-id1125 . -3) (undo-tree-id1126 . -3) (undo-tree-id1127 . -3) (undo-tree-id1128 . -3) (undo-tree-id1129 . -3) (undo-tree-id1130 . -3) (undo-tree-id1131 . -3) (undo-tree-id1132 . -3) (undo-tree-id1133 . -3) (undo-tree-id1134 . -3) (undo-tree-id1135 . -3) (undo-tree-id1136 . -3) (undo-tree-id1137 . -3) (undo-tree-id1138 . -3) (undo-tree-id1139 . -3) (undo-tree-id1140 . -3) (undo-tree-id1141 . -3) (undo-tree-id1142 . -3) (undo-tree-id1143 . -3) (undo-tree-id1144 . -3) (undo-tree-id1145 . -3) (undo-tree-id1146 . -3) (undo-tree-id1147 . -3) (undo-tree-id1148 . -3) (undo-tree-id1149 . -3) (undo-tree-id1150 . -3) (undo-tree-id1151 . -3) (undo-tree-id1152 . -3) (undo-tree-id1153 . -3) (undo-tree-id1154 . -3) (undo-tree-id1155 . -3) (undo-tree-id1156 . -3) (undo-tree-id1157 . -3) (undo-tree-id1158 . -3) (undo-tree-id1159 . -3) (undo-tree-id1160 . -3) (undo-tree-id1161 . -3) (undo-tree-id1162 . -3) (undo-tree-id1163 . -3) (undo-tree-id1164 . -3) (undo-tree-id1165 . -3) (undo-tree-id1166 . -3) (undo-tree-id1167 . -3) (undo-tree-id1168 . -3) (undo-tree-id1169 . -3) (undo-tree-id1170 . -3) (undo-tree-id1171 . -3) (undo-tree-id1172 . -3) (undo-tree-id1173 . -3) (undo-tree-id1174 . -3) (undo-tree-id1175 . -3) (undo-tree-id1176 . -3) (undo-tree-id1177 . -3) (undo-tree-id1178 . -3) (undo-tree-id1179 . -3) (undo-tree-id1180 . -3) (undo-tree-id1181 . -3) (undo-tree-id1182 . -3) (undo-tree-id1183 . -3) (undo-tree-id1184 . -3) (undo-tree-id1185 . -3) (undo-tree-id1186 . -3) (undo-tree-id1187 . -3) (undo-tree-id1188 . -3) (undo-tree-id1189 . -3) (undo-tree-id1190 . -3) (undo-tree-id1191 . -3) (undo-tree-id1192 . -3) (undo-tree-id1193 . -3) (undo-tree-id1194 . -3) (undo-tree-id1195 . -3) (undo-tree-id1196 . -3) (undo-tree-id1197 . -3) (undo-tree-id1198 . -3) (undo-tree-id1199 . -3) (undo-tree-id1200 . -3) (undo-tree-id1201 . -3) (undo-tree-id1202 . -3) (undo-tree-id1203 . -3) (undo-tree-id1204 . -3) (undo-tree-id1205 . -3) (undo-tree-id1206 . -3) (undo-tree-id1207 . -3) (undo-tree-id1208 . -3) (undo-tree-id1209 . -3) (undo-tree-id1210 . -3) (undo-tree-id1211 . -3) (undo-tree-id1212 . -3) (undo-tree-id1213 . -3) (undo-tree-id1214 . -3) (undo-tree-id1215 . -3) (undo-tree-id1216 . -3) (undo-tree-id1217 . -3) (undo-tree-id1218 . -3) (undo-tree-id1219 . -3) (undo-tree-id1220 . -3) (undo-tree-id1221 . -3) (undo-tree-id1222 . -3) (undo-tree-id1223 . -3) (undo-tree-id1224 . -3) (undo-tree-id1225 . -3) (undo-tree-id1226 . -3) (undo-tree-id1227 . -3) (undo-tree-id1228 . -3) (undo-tree-id1229 . -3) (undo-tree-id1230 . -3) (undo-tree-id1231 . -3) (undo-tree-id1232 . -3) (undo-tree-id1233 . -3) (undo-tree-id1234 . -3) (undo-tree-id1235 . -3) (undo-tree-id1236 . -3) (undo-tree-id1237 . -3) (undo-tree-id1238 . -3) (undo-tree-id1239 . -3) (undo-tree-id1240 . -3) (undo-tree-id1241 . -3) (undo-tree-id1242 . -3) (undo-tree-id1243 . -3) (undo-tree-id1244 . -3) (undo-tree-id1245 . -3) (undo-tree-id1246 . -3) (undo-tree-id1247 . -3) (undo-tree-id1248 . -3) (undo-tree-id1249 . -3) (undo-tree-id1250 . -3) (undo-tree-id1251 . -3) (undo-tree-id1252 . -3) (undo-tree-id1253 . -3) (undo-tree-id1254 . -3) (undo-tree-id1255 . -3) (undo-tree-id1256 . -3) (undo-tree-id1257 . -3) (undo-tree-id1258 . -3) (undo-tree-id1259 . -3) (undo-tree-id1260 . -3) (undo-tree-id1261 . -3) (undo-tree-id1262 . -3) (undo-tree-id1263 . -3) (undo-tree-id1264 . -3) (undo-tree-id1265 . -3) (undo-tree-id1266 . -3) (undo-tree-id1267 . -3) (undo-tree-id1268 . -3) (undo-tree-id1269 . -3) (undo-tree-id1270 . -3) (undo-tree-id1271 . -3) (undo-tree-id1272 . -3) (undo-tree-id1273 . -3) (undo-tree-id1274 . -3) (undo-tree-id1275 . -3) (undo-tree-id1276 . -3) (undo-tree-id1277 . -3) (undo-tree-id1278 . -3) (undo-tree-id1279 . -3) (undo-tree-id1280 . -3) (undo-tree-id1281 . -3) (undo-tree-id1282 . -3) (undo-tree-id1283 . -3) (undo-tree-id1284 . -3) (undo-tree-id1285 . -3) (undo-tree-id1286 . -3) (undo-tree-id1287 . -3) (undo-tree-id1288 . -3) (undo-tree-id1289 . -3) (undo-tree-id1290 . -3) (undo-tree-id1291 . -3) (undo-tree-id1292 . -3) (undo-tree-id1293 . -3) (undo-tree-id1294 . -3) (undo-tree-id1295 . -3) (undo-tree-id1296 . -3) (undo-tree-id1297 . -3) (undo-tree-id1298 . -3) (undo-tree-id1299 . -3) (undo-tree-id1300 . -3) (undo-tree-id1301 . -3) (undo-tree-id1302 . -3) (undo-tree-id1303 . -3) (undo-tree-id1304 . -3) (undo-tree-id1305 . -3) (undo-tree-id1306 . -3) (undo-tree-id1307 . -3) (undo-tree-id1308 . -3) (undo-tree-id1309 . -3) (undo-tree-id1310 . -3) (undo-tree-id1311 . -3) (undo-tree-id1312 . -3) (undo-tree-id1313 . -3) (undo-tree-id1314 . -3) (undo-tree-id1315 . -3) (undo-tree-id1316 . -3) (undo-tree-id1317 . -3) (undo-tree-id1318 . -3) (undo-tree-id1319 . -3) (undo-tree-id1320 . -3) (undo-tree-id1321 . -3) (undo-tree-id1322 . -3) (undo-tree-id1323 . -3) (undo-tree-id1324 . -3) (undo-tree-id1325 . -3) (undo-tree-id1326 . -3) (undo-tree-id1327 . -3) (undo-tree-id1328 . -3) (undo-tree-id1329 . -3) (undo-tree-id1330 . -3) (undo-tree-id1331 . -3) (undo-tree-id1332 . -3) (undo-tree-id1333 . -3) (undo-tree-id1334 . -3) (undo-tree-id1335 . -3) (undo-tree-id1336 . -3) (undo-tree-id1337 . -3) (undo-tree-id1338 . -3) (undo-tree-id1339 . -3) (undo-tree-id1340 . -3) (undo-tree-id1341 . -3) (undo-tree-id1342 . -3) (undo-tree-id1343 . -3) (undo-tree-id1344 . -1) (undo-tree-id1345 . -3) (undo-tree-id1346 . -3) (undo-tree-id1347 . -3) (undo-tree-id1348 . -3) (undo-tree-id1349 . -3) (undo-tree-id1350 . -3) (undo-tree-id1351 . -3) (undo-tree-id1352 . -3) (undo-tree-id1353 . -3) (undo-tree-id1354 . -3) (undo-tree-id1355 . -3) (undo-tree-id1356 . -3) (undo-tree-id1357 . -3) (undo-tree-id1358 . -3) (undo-tree-id1359 . -3) (undo-tree-id1360 . -3) (undo-tree-id1361 . -3) (undo-tree-id1362 . -3) (undo-tree-id1363 . -3) (undo-tree-id1364 . -3) (undo-tree-id1365 . -3) (undo-tree-id1366 . -3) (undo-tree-id1367 . -3) (undo-tree-id1368 . -3) (undo-tree-id1369 . -3) (undo-tree-id1370 . -3) (undo-tree-id1371 . -3) (undo-tree-id1372 . -3) (undo-tree-id1373 . -3) (undo-tree-id1374 . -3) (undo-tree-id1375 . -3) (undo-tree-id1376 . -3) (undo-tree-id1377 . -3) (undo-tree-id1378 . -3) (undo-tree-id1379 . -3) (undo-tree-id1380 . -3) (undo-tree-id1381 . -3) (undo-tree-id1382 . -3) (undo-tree-id1383 . -3) (undo-tree-id1384 . -3) (undo-tree-id1385 . -3) (undo-tree-id1386 . -3) (undo-tree-id1387 . -3) (undo-tree-id1388 . -3) (undo-tree-id1389 . -3) (undo-tree-id1390 . -3) (undo-tree-id1391 . -3) (undo-tree-id1392 . -3) (undo-tree-id1393 . -3) (undo-tree-id1394 . -3) (undo-tree-id1395 . -3) (undo-tree-id1396 . -3) (undo-tree-id1397 . -3) (undo-tree-id1398 . -3) (undo-tree-id1399 . -3) (undo-tree-id1400 . -3) (undo-tree-id1401 . -3) (undo-tree-id1402 . -3) (undo-tree-id1403 . -3) (undo-tree-id1404 . -3) (undo-tree-id1405 . -3) (undo-tree-id1406 . -3) (undo-tree-id1407 . -3) (undo-tree-id1408 . -3) (undo-tree-id1409 . -3) (undo-tree-id1410 . -3) (undo-tree-id1411 . -3) (undo-tree-id1412 . -3) (undo-tree-id1413 . -3) (undo-tree-id1414 . -3) (undo-tree-id1415 . -3) (undo-tree-id1416 . -3) (undo-tree-id1417 . -3) (undo-tree-id1418 . -3) (undo-tree-id1419 . -3) (undo-tree-id1420 . -3) (undo-tree-id1421 . -3) (undo-tree-id1422 . -3) (undo-tree-id1423 . -3) (undo-tree-id1424 . -3) (undo-tree-id1425 . -3) (undo-tree-id1426 . -3) (undo-tree-id1427 . -3) (undo-tree-id1428 . -3) (undo-tree-id1429 . -3) (undo-tree-id1430 . -3) (undo-tree-id1431 . -3) (undo-tree-id1432 . -3) (undo-tree-id1433 . -3) (undo-tree-id1434 . -3) (undo-tree-id1435 . -3) (undo-tree-id1436 . -3) (undo-tree-id1437 . -3) (undo-tree-id1438 . -3)) (25817 24272 798710 0) 0 nil])
([nil nil ((1869 . 1899) (#("                   " 0 19 (cider-locals nil help-echo cider--help-echo fontified t ws-butler-chg chg)) . 1869) 1922) ((1869 . 1888) (#("                              " 0 25 (cider-locals nil help-echo cider--help-echo fontified t) 25 30 (cider-locals nil help-echo cider--help-echo fontified t ws-butler-chg chg)) . 1869)) (25816 39527 934740 0) 0 nil])
([nil nil ((#("     " 0 5 (cider-locals nil help-echo cider--help-echo fontified t)) . -1826) 1868 (t 25816 39420 513032 586000)) ((1826 . 1831)) (25816 39449 282910 0) 0 nil])
([nil nil ((71 . 76)) nil (25817 26380 292534 0) 0 nil])
([nil nil ((nil help-echo cider--help-echo 885 . 886) (nil fontified nil 885 . 886) (nil help-echo cider--help-echo 884 . 885) (nil fontified nil 884 . 885) (nil help-echo cider--help-echo 883 . 884) (nil fontified nil 883 . 884) (nil help-echo cider--help-echo 876 . 883) (nil fontified nil 876 . 883) (nil help-echo cider--help-echo 875 . 876) (nil fontified nil 875 . 876) (nil help-echo cider--help-echo 874 . 875) (nil fontified nil 874 . 875) (nil help-echo cider--help-echo 870 . 874) (nil fontified nil 870 . 874) (nil help-echo cider--help-echo 869 . 870) (nil fontified nil 869 . 870) (nil help-echo cider--help-echo 868 . 869) (nil fontified nil 868 . 869) (nil help-echo cider--help-echo 867 . 868) (nil fontified nil 867 . 868) (nil help-echo cider--help-echo 853 . 867) (nil fontified nil 853 . 867) (nil help-echo cider--help-echo 852 . 853) (nil fontified nil 852 . 853) (nil help-echo cider--help-echo 833 . 852) (nil fontified nil 833 . 852) (nil help-echo cider--help-echo 832 . 833) (nil fontified nil 832 . 833) (nil help-echo cider--help-echo 826 . 832) (nil fontified nil 826 . 832) (nil help-echo cider--help-echo 825 . 826) (nil fontified nil 825 . 826) (nil help-echo cider--help-echo 824 . 825) (nil fontified nil 824 . 825) (nil help-echo cider--help-echo 810 . 824) (nil fontified nil 810 . 824) (nil help-echo cider--help-echo 809 . 810) (nil fontified nil 809 . 810) (nil help-echo cider--help-echo 808 . 809) (nil fontified nil 808 . 809) (nil help-echo cider--help-echo 807 . 808) (nil fontified nil 807 . 808) (nil help-echo cider--help-echo 806 . 807) (nil fontified nil 806 . 807) (nil help-echo cider--help-echo 796 . 806) (nil fontified nil 796 . 806) (nil help-echo cider--help-echo 795 . 796) (nil fontified nil 795 . 796) (795 . 886)) ((#(":directives [{:directive-type :access
                   :directive-args {:role :checker}}]" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 1 11 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 11 12 (cider-locals nil help-echo cider--help-echo fontified nil) 12 13 (face (rainbow-delimiters-depth-3-face) cider-locals nil help-echo cider--help-echo fontified nil) 13 14 (face (rainbow-delimiters-depth-4-face) cider-locals nil help-echo cider--help-echo fontified nil) 14 15 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 15 29 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 29 30 (cider-locals nil help-echo cider--help-echo fontified nil) 30 31 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 31 37 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 37 38 (cider-locals nil help-echo cider--help-echo fontified nil) 38 54 (cider-locals nil help-echo cider--help-echo fontified nil) 54 57 (cider-locals nil help-echo cider--help-echo fontified nil ws-butler-chg chg) 57 58 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 58 72 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 72 73 (cider-locals nil help-echo cider--help-echo fontified nil) 73 74 (face (rainbow-delimiters-depth-5-face) cider-locals nil help-echo cider--help-echo fontified nil) 74 75 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 75 79 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 79 80 (cider-locals nil help-echo cider--help-echo fontified nil) 80 81 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 81 88 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 88 89 (face (rainbow-delimiters-depth-5-face) cider-locals nil help-echo cider--help-echo fontified nil) 89 90 (face (rainbow-delimiters-depth-4-face) cider-locals nil help-echo cider--help-echo fontified nil) 90 91 (face (rainbow-delimiters-depth-3-face) cider-locals nil help-echo cider--help-echo fontified nil rear-nonsticky t)) . 795) (undo-tree-id522 . -91) (undo-tree-id523 . -91) (undo-tree-id524 . -91) (undo-tree-id525 . -91) (undo-tree-id526 . -91) (undo-tree-id527 . -91) (undo-tree-id528 . -91) (undo-tree-id529 . -91) (undo-tree-id530 . -91) (undo-tree-id531 . -91) (undo-tree-id532 . -91) (undo-tree-id533 . -91) (undo-tree-id534 . -91) (undo-tree-id535 . -91) (undo-tree-id536 . -91) (undo-tree-id537 . -91) (undo-tree-id538 . -91) (undo-tree-id539 . -91) (undo-tree-id540 . -91) (undo-tree-id541 . -91) (undo-tree-id542 . -91) (undo-tree-id543 . -91) (undo-tree-id544 . -91) (undo-tree-id545 . -91) (undo-tree-id546 . -91) (undo-tree-id547 . -91) (undo-tree-id548 . -91) (undo-tree-id549 . -91) (undo-tree-id550 . -91) (undo-tree-id551 . -91) (undo-tree-id552 . -91) (undo-tree-id553 . -91) (undo-tree-id554 . -91) (undo-tree-id555 . -91) (undo-tree-id556 . -91) (undo-tree-id557 . -91) (undo-tree-id558 . -91) (undo-tree-id559 . -91) (undo-tree-id560 . -91) (undo-tree-id561 . -91) (undo-tree-id562 . -91) (undo-tree-id563 . -91) (undo-tree-id564 . -91) (undo-tree-id565 . -91) (undo-tree-id566 . -91) (undo-tree-id567 . -91) (undo-tree-id568 . -91) (undo-tree-id569 . -91) (undo-tree-id570 . -91) (undo-tree-id571 . -91) (undo-tree-id572 . -91) (undo-tree-id573 . -91) (undo-tree-id574 . -91) (undo-tree-id575 . -91) (undo-tree-id576 . -91) (undo-tree-id577 . -91) (undo-tree-id578 . -91) (undo-tree-id579 . -91) (undo-tree-id580 . -91) (undo-tree-id581 . -91) (undo-tree-id582 . -91) (undo-tree-id583 . -91) (undo-tree-id584 . -91) (undo-tree-id585 . -91) (undo-tree-id586 . -91) (undo-tree-id587 . -91) (undo-tree-id588 . -91) (undo-tree-id589 . -91) (undo-tree-id590 . -91) (undo-tree-id591 . -91) (undo-tree-id592 . -91) (undo-tree-id593 . -91) (undo-tree-id594 . -91) (undo-tree-id595 . -91) (undo-tree-id596 . -91) (undo-tree-id597 . -91) (undo-tree-id598 . -91) (undo-tree-id599 . -91) (undo-tree-id600 . -91) (undo-tree-id601 . -91) (undo-tree-id602 . -91) (undo-tree-id603 . -91) (undo-tree-id604 . -91) (undo-tree-id605 . -91) (undo-tree-id606 . -91) (undo-tree-id607 . -91) (undo-tree-id608 . -91) (undo-tree-id609 . -91) (undo-tree-id610 . -91) (undo-tree-id611 . -91) (undo-tree-id612 . -91) (undo-tree-id613 . -91) (undo-tree-id614 . -91) (undo-tree-id615 . -91) (undo-tree-id616 . -91) (undo-tree-id617 . -91) (undo-tree-id618 . -91) (undo-tree-id619 . -91) (undo-tree-id620 . -91) (undo-tree-id621 . -91) (undo-tree-id622 . -91) (undo-tree-id623 . -91) (undo-tree-id624 . -91) (undo-tree-id625 . -91) (undo-tree-id626 . -91) (undo-tree-id627 . -91) (undo-tree-id628 . -91) (undo-tree-id629 . -91) (undo-tree-id630 . -91) (undo-tree-id631 . -91) (undo-tree-id632 . -91) (undo-tree-id633 . -91) (undo-tree-id634 . -91) (undo-tree-id635 . -91) (undo-tree-id636 . -91) (undo-tree-id637 . -91) (undo-tree-id638 . -91) (undo-tree-id639 . -91) (undo-tree-id640 . -91) (undo-tree-id641 . -91) (undo-tree-id642 . -91) (undo-tree-id643 . -91) (undo-tree-id644 . -91) (undo-tree-id645 . -91) (undo-tree-id646 . -91) (undo-tree-id647 . -91) (undo-tree-id648 . -91) (undo-tree-id649 . -91) (undo-tree-id650 . -91) (undo-tree-id651 . -91) (undo-tree-id652 . -91) (undo-tree-id653 . -91) (undo-tree-id654 . -91) (undo-tree-id655 . -91) (undo-tree-id656 . -91) (undo-tree-id657 . -91) (undo-tree-id658 . -91) (undo-tree-id659 . -91) (undo-tree-id660 . -91) (undo-tree-id661 . -91) (undo-tree-id662 . -91) (undo-tree-id663 . -91) (undo-tree-id664 . -91) (undo-tree-id665 . -91) (undo-tree-id666 . -91) (undo-tree-id667 . -91) (undo-tree-id668 . -91) (undo-tree-id669 . -91) (undo-tree-id670 . -91) (undo-tree-id671 . -91) (undo-tree-id672 . -91) (undo-tree-id673 . -91) (undo-tree-id674 . -91) (undo-tree-id675 . -91) (undo-tree-id676 . -91) (undo-tree-id677 . -91) (undo-tree-id678 . -91) (undo-tree-id679 . -91) (undo-tree-id680 . -91) (undo-tree-id681 . -91) (undo-tree-id682 . -91) (undo-tree-id683 . -91) (undo-tree-id684 . -91) (undo-tree-id685 . -91) (undo-tree-id686 . -91) (undo-tree-id687 . -91) (undo-tree-id688 . -91) (undo-tree-id689 . -91) (undo-tree-id690 . -91) (undo-tree-id691 . -91) (undo-tree-id692 . -91) (undo-tree-id693 . -91) (undo-tree-id694 . -91) (undo-tree-id695 . -91) (undo-tree-id696 . -91) (undo-tree-id697 . -91) (undo-tree-id698 . -91) (undo-tree-id699 . -91) (undo-tree-id700 . -91) (undo-tree-id701 . -91) (undo-tree-id702 . -91) (undo-tree-id703 . -91) (undo-tree-id704 . -91) (undo-tree-id705 . -91) (undo-tree-id706 . -91) (undo-tree-id707 . -91) (undo-tree-id708 . -91) (undo-tree-id709 . -91) (undo-tree-id710 . -91) (undo-tree-id711 . -91) (undo-tree-id712 . -91) (undo-tree-id713 . -91) (undo-tree-id714 . -91) (undo-tree-id715 . -91) (undo-tree-id716 . -91) (undo-tree-id717 . -91) (undo-tree-id718 . -91) (undo-tree-id719 . -91) (undo-tree-id720 . -91) (undo-tree-id721 . -91) (undo-tree-id722 . -91) (undo-tree-id723 . -91) (undo-tree-id724 . -91) (undo-tree-id725 . -91) (undo-tree-id726 . -91) (undo-tree-id727 . -91) (undo-tree-id728 . -91) (undo-tree-id729 . -91) (undo-tree-id730 . -91) (undo-tree-id731 . -91) (undo-tree-id732 . -91) (undo-tree-id733 . -91) (undo-tree-id734 . -91) (undo-tree-id735 . -91) (undo-tree-id736 . -91) (undo-tree-id737 . -91) (undo-tree-id738 . -91) (undo-tree-id739 . -91) (undo-tree-id740 . -91) (undo-tree-id741 . -91) (undo-tree-id742 . -91) (undo-tree-id743 . -91) (undo-tree-id744 . -91) (undo-tree-id745 . -91) (undo-tree-id746 . -91) (undo-tree-id747 . -91) (undo-tree-id748 . -91) (undo-tree-id749 . -91) (undo-tree-id750 . -91) (undo-tree-id751 . -91) (undo-tree-id752 . -91) (undo-tree-id753 . -91) (undo-tree-id754 . -91) (undo-tree-id755 . -91) (undo-tree-id756 . -91) (undo-tree-id757 . -91) (undo-tree-id758 . -91) (undo-tree-id759 . -91) (undo-tree-id760 . -91) (undo-tree-id761 . -91) (undo-tree-id762 . -91) (undo-tree-id763 . -91) (undo-tree-id764 . -91) (undo-tree-id765 . -91) (undo-tree-id766 . -91) (undo-tree-id767 . -91) (undo-tree-id768 . -91) (undo-tree-id769 . -91) (undo-tree-id770 . -91) (undo-tree-id771 . -91) (undo-tree-id772 . -91) (undo-tree-id773 . -91) (undo-tree-id774 . -91) (undo-tree-id775 . -91) (undo-tree-id776 . -91) (undo-tree-id777 . -91) (undo-tree-id778 . -91) (undo-tree-id779 . -91) (undo-tree-id780 . -91) (undo-tree-id781 . -91) (undo-tree-id782 . -91) (undo-tree-id783 . -91) (undo-tree-id784 . -91) (undo-tree-id785 . -91) (undo-tree-id786 . -91) (undo-tree-id787 . -91) (undo-tree-id788 . -91) (undo-tree-id789 . -91) (undo-tree-id790 . -91) (undo-tree-id791 . -91) (undo-tree-id792 . -91) (undo-tree-id793 . -91) (undo-tree-id794 . -91) (undo-tree-id795 . -91) (undo-tree-id796 . -91) (undo-tree-id797 . -91) (undo-tree-id798 . -91) (undo-tree-id799 . -91) (undo-tree-id800 . -91) (undo-tree-id801 . -91) (undo-tree-id802 . -91) (undo-tree-id803 . -91) (undo-tree-id804 . -38) (undo-tree-id805 . -91) (undo-tree-id806 . -91) (undo-tree-id807 . -91) (undo-tree-id808 . -91) (undo-tree-id809 . -91) (undo-tree-id810 . -91) (undo-tree-id811 . -91) (undo-tree-id812 . -91) (undo-tree-id813 . -91) (undo-tree-id814 . -91) (undo-tree-id815 . -91) (undo-tree-id816 . -91) (undo-tree-id817 . -91) (undo-tree-id818 . -91) (undo-tree-id819 . -91) (undo-tree-id820 . -91) (undo-tree-id821 . -91) (undo-tree-id822 . -91) (undo-tree-id823 . -91) (undo-tree-id824 . -91) (undo-tree-id825 . -91) (undo-tree-id826 . -91) (undo-tree-id827 . -91) (undo-tree-id828 . -91) (undo-tree-id829 . -91) (undo-tree-id830 . -91) (undo-tree-id831 . -91) (undo-tree-id832 . -91) (undo-tree-id833 . -91) (undo-tree-id834 . -91) (undo-tree-id835 . -91) (undo-tree-id836 . -91) (undo-tree-id837 . -91) (undo-tree-id838 . -91) (undo-tree-id839 . -91) (undo-tree-id840 . -91) (undo-tree-id841 . -91) (undo-tree-id842 . -91) (undo-tree-id843 . -91) (undo-tree-id844 . -91) (undo-tree-id845 . -91) (undo-tree-id846 . -91) (undo-tree-id847 . -91) (undo-tree-id848 . -91) (undo-tree-id849 . -91) (undo-tree-id850 . -91) (undo-tree-id851 . -91) (undo-tree-id852 . -91) (undo-tree-id853 . -91) (undo-tree-id854 . -91) (undo-tree-id855 . -91) (undo-tree-id856 . -91) (undo-tree-id857 . -91) (undo-tree-id858 . -91) (undo-tree-id859 . -91) (undo-tree-id860 . -91) (undo-tree-id861 . -91) (undo-tree-id862 . -91) (undo-tree-id863 . -91) (undo-tree-id864 . -91) (undo-tree-id865 . -91) (undo-tree-id866 . -91) (undo-tree-id867 . -91) (undo-tree-id868 . -91) (undo-tree-id869 . -91) (undo-tree-id870 . -91) (undo-tree-id871 . -91) (undo-tree-id872 . -91) (undo-tree-id873 . -91) (undo-tree-id874 . -91) (undo-tree-id875 . -91) (undo-tree-id876 . -91) (undo-tree-id877 . -91) (undo-tree-id878 . -91) (undo-tree-id879 . -91) (undo-tree-id880 . -91) (undo-tree-id881 . -91) (undo-tree-id882 . -91) (undo-tree-id883 . -91) (undo-tree-id884 . -91) (undo-tree-id885 . -91) (undo-tree-id886 . -91) (undo-tree-id887 . -91) (undo-tree-id888 . -91) (undo-tree-id889 . -91) (undo-tree-id890 . -91) (undo-tree-id891 . -91) (undo-tree-id892 . -91) (undo-tree-id893 . -91) (undo-tree-id894 . -91) (undo-tree-id895 . -91) (undo-tree-id896 . -91) (undo-tree-id897 . -91) (undo-tree-id898 . -91) (undo-tree-id899 . -91) (undo-tree-id900 . -91) (undo-tree-id901 . -91) (undo-tree-id902 . -91) (undo-tree-id903 . -91) (undo-tree-id904 . -91) (undo-tree-id905 . -91) (undo-tree-id906 . -91) (undo-tree-id907 . -91) (undo-tree-id908 . -91) (undo-tree-id909 . -91) (undo-tree-id910 . -91) (undo-tree-id911 . -91) (undo-tree-id912 . -91) (undo-tree-id913 . -91) (undo-tree-id914 . -91) (undo-tree-id915 . -91) (undo-tree-id916 . -91) (undo-tree-id917 . -91) (undo-tree-id918 . -91) (undo-tree-id919 . -91) (undo-tree-id920 . -91) (undo-tree-id921 . -91) (undo-tree-id922 . -91) (undo-tree-id923 . -91) (undo-tree-id924 . -91) (undo-tree-id925 . -91) (undo-tree-id926 . -91) (undo-tree-id927 . -91) (undo-tree-id928 . -91) (undo-tree-id929 . -91) (undo-tree-id930 . -91) (undo-tree-id931 . -91) (undo-tree-id932 . -91) (undo-tree-id933 . -91) (nil fontified t 832 . 833) (nil fontified t 885 . 886)) (25817 24271 775972 0) 0 nil])
([nil nil ((#("     " 0 5 (cider-locals nil help-echo cider--help-echo fontified t ws-butler-chg chg)) . -1826) 1868) ((1826 . 1831)) (25816 39527 599617 0) 0 nil])
([nil nil ((1864 . 1889) (#("                   " 0 19 (cider-locals nil help-echo cider--help-echo fontified t)) . 1864) 1912) ((1864 . 1883) (#("                         " 0 25 (cider-locals nil help-echo cider--help-echo fontified t)) . 1864) (t 25816 39422 758969 186000)) (25816 39422 731023 0) 0 nil])
([nil nil ((#("query" 0 5 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t)) . -71) (undo-tree-id1633 . -5) (undo-tree-id1634 . -5) (undo-tree-id1635 . -5) (undo-tree-id1636 . -5) (undo-tree-id1637 . -5) (undo-tree-id1638 . -5) (undo-tree-id1639 . -5) (undo-tree-id1640 . -5) (undo-tree-id1641 . -5) (undo-tree-id1642 . -5) (undo-tree-id1643 . -5) (undo-tree-id1644 . -5) (undo-tree-id1645 . -5) (undo-tree-id1646 . -5) (undo-tree-id1647 . -5) 76 (t 25817 26380 323212 781000)) nil (25817 26397 616477 0) 0 nil])
([nil nil ((#("   " 0 3 (cider-locals nil help-echo cider--help-echo fontified t ws-butler-chg chg)) . -849) 886) ((849 . 852) (t 25817 24260 719116 80000)) (25817 24260 691929 0) 0 nil])
([nil nil ((#("     " 0 5 (cider-locals nil help-echo cider--help-echo fontified t ws-butler-chg chg)) . -1889) 1912) ((1889 . 1894) (t 25816 39521 63891 977000)) (25816 39521 35052 0) 0 nil])
nil
([nil nil ((#(" " 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . -69) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (#(":" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . -70) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) 71) nil (25817 26397 616453 0) 0 nil])
nil
nil
([nil nil ((840 . 844) (t 25817 26397 645166 798000)) nil (25817 26420 312475 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 848 . 849) (nil help-echo cider--help-echo 844 . 849) (nil fontified nil 844 . 849) (844 . 849)) nil (25817 26420 312473 0) 0 nil])
([nil nil ((#("   query" 0 3 (cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo) 3 7 (cider-locals nil help-echo cider--help-echo fontified t ws-butler-chg chg) 7 8 (cider-locals nil help-echo cider--help-echo rear-nonsticky t fontified t ws-butler-chg chg)) . 841) (undo-tree-id1648 . -3) (undo-tree-id1649 . -3) (undo-tree-id1650 . -3) (undo-tree-id1651 . -3) (undo-tree-id1652 . -3) (undo-tree-id1653 . -3) (undo-tree-id1654 . -3) (undo-tree-id1655 . -3) (undo-tree-id1656 . -3) (undo-tree-id1657 . -3) (undo-tree-id1658 . -3) (undo-tree-id1659 . -3) (undo-tree-id1660 . -3) (undo-tree-id1661 . -3) (undo-tree-id1662 . -3) (undo-tree-id1663 . -3) (undo-tree-id1664 . -3) (undo-tree-id1665 . -3) (undo-tree-id1666 . -3) (undo-tree-id1667 . -3) (undo-tree-id1668 . -3) (undo-tree-id1669 . -3) (undo-tree-id1670 . -3) (undo-tree-id1671 . -3) (undo-tree-id1672 . -3) (undo-tree-id1673 . -3) (undo-tree-id1674 . -3) (undo-tree-id1675 . -3) (undo-tree-id1676 . -3) (undo-tree-id1677 . -3) (undo-tree-id1678 . -3) (undo-tree-id1679 . -3) (undo-tree-id1680 . -3) (undo-tree-id1681 . -3) (undo-tree-id1682 . -3) (undo-tree-id1683 . -3) (undo-tree-id1684 . -3) (undo-tree-id1685 . -3) (undo-tree-id1686 . -3) (undo-tree-id1687 . -3) (undo-tree-id1688 . -3) (undo-tree-id1689 . -3) (undo-tree-id1690 . -3) (undo-tree-id1691 . -3) (undo-tree-id1692 . -3) (undo-tree-id1693 . -3) (undo-tree-id1694 . -3) (undo-tree-id1695 . -3) (undo-tree-id1696 . -3) (undo-tree-id1697 . -3) (undo-tree-id1698 . -3) (undo-tree-id1699 . -3) (undo-tree-id1700 . -3) (undo-tree-id1701 . -3) (undo-tree-id1702 . -3) (undo-tree-id1703 . -3) (undo-tree-id1704 . -3) (undo-tree-id1705 . -3) (undo-tree-id1706 . -3) (undo-tree-id1707 . -3) (undo-tree-id1708 . -3) (undo-tree-id1709 . -3) (undo-tree-id1710 . -3) (undo-tree-id1711 . -3) (undo-tree-id1712 . -3) (undo-tree-id1713 . -3) (undo-tree-id1714 . -3) (undo-tree-id1715 . -3) (undo-tree-id1716 . -3) (undo-tree-id1717 . -3) (undo-tree-id1718 . -3) (undo-tree-id1719 . -3) (undo-tree-id1720 . -3) (undo-tree-id1721 . -3) (undo-tree-id1722 . -3) (undo-tree-id1723 . -3) (undo-tree-id1724 . -3) (undo-tree-id1725 . -3) (undo-tree-id1726 . -3) (undo-tree-id1727 . -3) (undo-tree-id1728 . -3) (undo-tree-id1729 . -3) (undo-tree-id1730 . -3) (undo-tree-id1731 . -3) (undo-tree-id1732 . -3) (undo-tree-id1733 . -3) (undo-tree-id1734 . -3) (undo-tree-id1735 . -3) (undo-tree-id1736 . -3) (undo-tree-id1737 . -3) (undo-tree-id1738 . -3) (undo-tree-id1739 . -3) (undo-tree-id1740 . -3) (undo-tree-id1741 . -3) (undo-tree-id1742 . -3) (undo-tree-id1743 . -3) (undo-tree-id1744 . -3) (undo-tree-id1745 . -3) (undo-tree-id1746 . -3) (undo-tree-id1747 . -3) (undo-tree-id1748 . -3) (undo-tree-id1749 . -3) (undo-tree-id1750 . -3) (undo-tree-id1751 . -3) (undo-tree-id1752 . -3) (undo-tree-id1753 . -3) (undo-tree-id1754 . -3) (undo-tree-id1755 . -3) (undo-tree-id1756 . -3) (undo-tree-id1757 . -3) (undo-tree-id1758 . -3) (undo-tree-id1759 . -3) (undo-tree-id1760 . -3) (undo-tree-id1761 . -3) (undo-tree-id1762 . -3) (undo-tree-id1763 . -3) (undo-tree-id1764 . -3) (undo-tree-id1765 . -3) (undo-tree-id1766 . -3) (undo-tree-id1767 . -3) (undo-tree-id1768 . -3) (undo-tree-id1769 . -3) (undo-tree-id1770 . -3) (undo-tree-id1771 . -3) (undo-tree-id1772 . -3) (undo-tree-id1773 . -3) (undo-tree-id1774 . -3) (undo-tree-id1775 . -3) (undo-tree-id1776 . -3) (undo-tree-id1777 . -3) (undo-tree-id1778 . -3) (undo-tree-id1779 . -3) (undo-tree-id1780 . -3) (undo-tree-id1781 . -3) (undo-tree-id1782 . -8) (undo-tree-id1783 . -8) (undo-tree-id1784 . -8) (undo-tree-id1785 . -8) (undo-tree-id1786 . -8) (undo-tree-id1787 . -8) (undo-tree-id1788 . -8) (undo-tree-id1789 . -8) (undo-tree-id1790 . -8) (undo-tree-id1791 . -8) (undo-tree-id1792 . -8) (undo-tree-id1793 . -8) (undo-tree-id1794 . -8) (undo-tree-id1795 . -8) (undo-tree-id1796 . -8) (undo-tree-id1797 . -8) (undo-tree-id1798 . -8) (undo-tree-id1799 . -8) (undo-tree-id1800 . -8) (undo-tree-id1801 . -8) (undo-tree-id1802 . -8) (undo-tree-id1803 . -8) (undo-tree-id1804 . -8) (undo-tree-id1805 . -8) (undo-tree-id1806 . -8) (undo-tree-id1807 . -8) (undo-tree-id1808 . -8) (undo-tree-id1809 . -8) (undo-tree-id1810 . -8) (undo-tree-id1811 . -8) (undo-tree-id1812 . -8) (undo-tree-id1813 . -8) (undo-tree-id1814 . -8) (undo-tree-id1815 . -8) (undo-tree-id1816 . -8) (undo-tree-id1817 . -8) (undo-tree-id1818 . -8) (undo-tree-id1819 . -8) (undo-tree-id1820 . -8) (undo-tree-id1821 . -8) (undo-tree-id1822 . -8) (undo-tree-id1823 . -8) (undo-tree-id1824 . -8) (undo-tree-id1825 . -8) (undo-tree-id1826 . -8) (undo-tree-id1827 . -8) (undo-tree-id1828 . -8) (undo-tree-id1829 . -8) (undo-tree-id1830 . -8) (undo-tree-id1831 . -8) (undo-tree-id1832 . -8) (undo-tree-id1833 . -8) (undo-tree-id1834 . -8) (undo-tree-id1835 . -8) (undo-tree-id1836 . -8) (undo-tree-id1837 . -8) (undo-tree-id1838 . -8) (undo-tree-id1839 . -8) (undo-tree-id1840 . -8) (undo-tree-id1841 . -8) (undo-tree-id1842 . -8) (undo-tree-id1843 . -8) (undo-tree-id1844 . -8) (undo-tree-id1845 . -8) (undo-tree-id1846 . -8) (undo-tree-id1847 . -8) (undo-tree-id1848 . -8) (undo-tree-id1849 . -8) (undo-tree-id1850 . -8) (undo-tree-id1851 . -8) (undo-tree-id1852 . -8) (undo-tree-id1853 . -8) (undo-tree-id1854 . -8) (undo-tree-id1855 . -8) (undo-tree-id1856 . -8) (undo-tree-id1857 . -8) (undo-tree-id1858 . -8) (undo-tree-id1859 . -8) (undo-tree-id1860 . -8)) nil (25817 26431 124019 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . -840) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) (undo-tree-id3323 . -1) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) (undo-tree-id3385 . -1) (undo-tree-id3386 . -1) (undo-tree-id3387 . -1) (undo-tree-id3388 . -1) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) (undo-tree-id3403 . -1) (undo-tree-id3404 . -1) (undo-tree-id3405 . -1) (undo-tree-id3406 . -1) (undo-tree-id3407 . -1) (undo-tree-id3408 . -1) (undo-tree-id3409 . -1) (undo-tree-id3410 . -1) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) (undo-tree-id3413 . -1) (undo-tree-id3414 . -1) (undo-tree-id3415 . -1) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (undo-tree-id3420 . -1) (undo-tree-id3421 . -1) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1) (undo-tree-id3428 . -1) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (undo-tree-id3453 . -1) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) 841) nil (25817 26451 722008 0) 0 nil] [nil nil ((841 . 844)) ((#("   " 0 3 (cider-locals nil fontified t help-echo cider--help-echo)) . 841) (undo-tree-id2234 . -3) (undo-tree-id2235 . -3) (undo-tree-id2236 . -3) (undo-tree-id2237 . -3) (undo-tree-id2238 . -3) (undo-tree-id2239 . -3) (undo-tree-id2240 . -3) (undo-tree-id2241 . -3) (undo-tree-id2242 . -3) (undo-tree-id2243 . -3) (undo-tree-id2244 . -3) (undo-tree-id2245 . -3) (undo-tree-id2246 . -3) (undo-tree-id2247 . -3) (undo-tree-id2248 . -3) (undo-tree-id2249 . -3) (undo-tree-id2250 . -3) (undo-tree-id2251 . -3) (undo-tree-id2252 . -3) (undo-tree-id2253 . -3) (undo-tree-id2254 . -3) (undo-tree-id2255 . -3) (undo-tree-id2256 . -3) (undo-tree-id2257 . -3) (undo-tree-id2258 . -3) (undo-tree-id2259 . -3) (undo-tree-id2260 . -3) (undo-tree-id2261 . -3) (undo-tree-id2262 . -3) (undo-tree-id2263 . -3) (undo-tree-id2264 . -3) (undo-tree-id2265 . -3) (undo-tree-id2266 . -3) (undo-tree-id2267 . -3) (undo-tree-id2268 . -3) (undo-tree-id2269 . -3) (undo-tree-id2270 . -3) (undo-tree-id2271 . -3) (undo-tree-id2272 . -3) (undo-tree-id2273 . -3) (undo-tree-id2274 . -3) (undo-tree-id2275 . -3) (undo-tree-id2276 . -3) (undo-tree-id2277 . -3) (undo-tree-id2278 . -3) (undo-tree-id2279 . -3) (undo-tree-id2280 . -3) (undo-tree-id2281 . -3) (undo-tree-id2282 . -3) (undo-tree-id2283 . -3) (undo-tree-id2284 . -3) (undo-tree-id2285 . -3) (undo-tree-id2286 . -3) (undo-tree-id2287 . -3) (undo-tree-id2288 . -3) (undo-tree-id2289 . -3) (undo-tree-id2290 . -3) (undo-tree-id2291 . -3) (undo-tree-id2292 . -3) (undo-tree-id2293 . -3) (undo-tree-id2294 . -3) (undo-tree-id2295 . -3) (undo-tree-id2296 . -3) (undo-tree-id2297 . -3) (undo-tree-id2298 . -3) (undo-tree-id2299 . -3) (undo-tree-id2300 . -3) (undo-tree-id2301 . -3) (undo-tree-id2302 . -3) (undo-tree-id2303 . -3) (undo-tree-id2304 . -3) (undo-tree-id2305 . -3) (undo-tree-id2306 . -3) (undo-tree-id2307 . -3) (undo-tree-id2308 . -3) (undo-tree-id2309 . -3) (undo-tree-id2310 . -3) (undo-tree-id2311 . -3) (undo-tree-id2312 . -3) (undo-tree-id2313 . -3) (undo-tree-id2314 . -3) (undo-tree-id2315 . -3) (undo-tree-id2316 . -3) (undo-tree-id2317 . -3) (undo-tree-id2318 . -3) (undo-tree-id2319 . -3) (undo-tree-id2320 . -3) (undo-tree-id2321 . -3) (undo-tree-id2322 . -3) (undo-tree-id2323 . -3) (undo-tree-id2324 . -3) (undo-tree-id2325 . -3) (undo-tree-id2326 . -3) (undo-tree-id2327 . -3) (undo-tree-id2328 . -3) (undo-tree-id2329 . -3) (undo-tree-id2330 . -3) (undo-tree-id2331 . -3) (undo-tree-id2332 . -3) (undo-tree-id2333 . -3) (undo-tree-id2334 . -3) (undo-tree-id2335 . -3) (undo-tree-id2336 . -3) (undo-tree-id2337 . -3) (undo-tree-id2338 . -3) (undo-tree-id2339 . -3) (undo-tree-id2340 . -3) (undo-tree-id2341 . -3) (undo-tree-id2342 . -3) (undo-tree-id2343 . -3) (undo-tree-id2344 . -3) (undo-tree-id2345 . -3) (undo-tree-id2346 . -3) (undo-tree-id2347 . -3) (undo-tree-id2348 . -3) (undo-tree-id2349 . -3) (undo-tree-id2350 . -3) (undo-tree-id2351 . -3) (undo-tree-id2352 . -3) (undo-tree-id2353 . -3) (undo-tree-id2354 . -3) (undo-tree-id2355 . -3) (undo-tree-id2356 . -3) (undo-tree-id2357 . -3) (undo-tree-id2358 . -3) (undo-tree-id2359 . -3) (undo-tree-id2360 . -3) (undo-tree-id2361 . -3) (undo-tree-id2362 . -3) (undo-tree-id2363 . -3) (undo-tree-id2364 . -3) (undo-tree-id2365 . -3) (undo-tree-id2366 . -3) (undo-tree-id2367 . -3) (undo-tree-id2368 . -3) (undo-tree-id2369 . -3) (undo-tree-id2370 . -3) (undo-tree-id2371 . -3) (undo-tree-id2372 . -3) (undo-tree-id2373 . -3) (undo-tree-id2374 . -3) (undo-tree-id2375 . -3) (undo-tree-id2376 . -3) (undo-tree-id2377 . -3) (undo-tree-id2378 . -3) (undo-tree-id2379 . -3) (undo-tree-id2380 . -3) (undo-tree-id2381 . -3) (undo-tree-id2382 . -3) (undo-tree-id2383 . -3) (undo-tree-id2384 . -3) (undo-tree-id2385 . -3) (undo-tree-id2386 . -3) (undo-tree-id2387 . -3) (undo-tree-id2388 . -3) (undo-tree-id2389 . -3) (undo-tree-id2390 . -3) (undo-tree-id2391 . -3) (undo-tree-id2392 . -3) (undo-tree-id2393 . -3) (undo-tree-id2394 . -3) (undo-tree-id2395 . -3) (undo-tree-id2396 . -3) (undo-tree-id2397 . -3) (undo-tree-id2398 . -3) (undo-tree-id2399 . -3) (undo-tree-id2400 . -3) (undo-tree-id2401 . -3) (undo-tree-id2402 . -3) (undo-tree-id2403 . -3) (undo-tree-id2404 . -3) (undo-tree-id2405 . -3) (undo-tree-id2406 . -3) (undo-tree-id2407 . -3) (undo-tree-id2408 . -3) (undo-tree-id2409 . -3) (undo-tree-id2410 . -3) (undo-tree-id2411 . -3) (undo-tree-id2412 . -3) (undo-tree-id2413 . -3) (undo-tree-id2414 . -3) (undo-tree-id2415 . -3) (undo-tree-id2416 . -3) (undo-tree-id2417 . -3) (undo-tree-id2418 . -3) (undo-tree-id2419 . -3) (undo-tree-id2420 . -3) (undo-tree-id2421 . -3) (undo-tree-id2422 . -3) (undo-tree-id2423 . -3) (undo-tree-id2424 . -3) (undo-tree-id2425 . -3) (undo-tree-id2426 . -3) (undo-tree-id2427 . -3) (undo-tree-id2428 . -3) (undo-tree-id2429 . -3) (undo-tree-id2430 . -3) (undo-tree-id2431 . -3) (undo-tree-id2432 . -3) (undo-tree-id2433 . -3) (undo-tree-id2434 . -3) (undo-tree-id2435 . -3) (undo-tree-id2436 . -3) (undo-tree-id2437 . -3) (undo-tree-id2438 . -3) (undo-tree-id2439 . -3) (undo-tree-id2440 . -3) (undo-tree-id2441 . -3) (undo-tree-id2442 . -3) (undo-tree-id2443 . -3) (undo-tree-id2444 . -3) (undo-tree-id2445 . -3) (undo-tree-id2446 . -3) (undo-tree-id2447 . -3) (undo-tree-id2448 . -3) (undo-tree-id2449 . -3) (undo-tree-id2450 . -3) (undo-tree-id2451 . -3) (undo-tree-id2452 . -3) (undo-tree-id2453 . -3) (undo-tree-id2454 . -3) (undo-tree-id2455 . -3) (undo-tree-id2456 . -3) (undo-tree-id2457 . -3) (undo-tree-id2458 . -3) (undo-tree-id2459 . -3) (undo-tree-id2460 . -3) (undo-tree-id2461 . -3) (undo-tree-id2462 . -3) (undo-tree-id2463 . -3) (undo-tree-id2464 . -3) (undo-tree-id2465 . -3) (undo-tree-id2466 . -3) (undo-tree-id2467 . -3) (undo-tree-id2468 . -3) (undo-tree-id2469 . -3) (undo-tree-id2470 . -3) (undo-tree-id2471 . -3) (undo-tree-id2472 . -3) (undo-tree-id2473 . -3) (undo-tree-id2474 . -3) (undo-tree-id2475 . -3) (undo-tree-id2476 . -3) (undo-tree-id2477 . -3) (undo-tree-id2478 . -3) (undo-tree-id2479 . -3) (undo-tree-id2480 . -3) (undo-tree-id2481 . -3) (undo-tree-id2482 . -3) (undo-tree-id2483 . -3) (undo-tree-id2484 . -3) (undo-tree-id2485 . -3) (undo-tree-id2486 . -3) (undo-tree-id2487 . -3) (undo-tree-id2488 . -3) (undo-tree-id2489 . -3) (undo-tree-id2490 . -3) (undo-tree-id2491 . -3) (undo-tree-id2492 . -3) (undo-tree-id2493 . -3) (undo-tree-id2494 . -3) (undo-tree-id2495 . -3) (undo-tree-id2496 . -3) (undo-tree-id2497 . -3) (undo-tree-id2498 . -3) (undo-tree-id2499 . -3) (undo-tree-id2500 . -3) (undo-tree-id2501 . -3) (undo-tree-id2502 . -3) (undo-tree-id2503 . -3) (undo-tree-id2504 . -3) (undo-tree-id2505 . -3) (undo-tree-id2506 . -3) (undo-tree-id2507 . -3) (undo-tree-id2508 . -3) (undo-tree-id2509 . -3) (undo-tree-id2510 . -3) (undo-tree-id2511 . -3) (undo-tree-id2512 . -3) (undo-tree-id2513 . -3) (undo-tree-id2514 . -3) (undo-tree-id2515 . -3) (undo-tree-id2516 . -3) (undo-tree-id2517 . -3) (undo-tree-id2518 . -3) (undo-tree-id2519 . -3) (undo-tree-id2520 . -3) (undo-tree-id2521 . -3) (undo-tree-id2522 . -3) (undo-tree-id2523 . -3) (undo-tree-id2524 . -3) (undo-tree-id2525 . -3) (undo-tree-id2526 . -3) (undo-tree-id2527 . -3) (undo-tree-id2528 . -3) (undo-tree-id2529 . -3) (undo-tree-id2530 . -3) (undo-tree-id2531 . -3) (undo-tree-id2532 . -3) (undo-tree-id2533 . -3) (undo-tree-id2534 . -3) (undo-tree-id2535 . -3) (undo-tree-id2536 . -3) (undo-tree-id2537 . -3) (undo-tree-id2538 . -3) (undo-tree-id2539 . -3) (undo-tree-id2540 . -3) (undo-tree-id2541 . -3) (undo-tree-id2542 . -3) (undo-tree-id2543 . -3) (undo-tree-id2544 . -3) (undo-tree-id2545 . -3) (undo-tree-id2546 . -3) (undo-tree-id2547 . -3) (undo-tree-id2548 . -3) (undo-tree-id2549 . -3) (undo-tree-id2550 . -3) (undo-tree-id2551 . -3) (undo-tree-id2552 . -3) (undo-tree-id2553 . -3) (undo-tree-id2554 . -3) (undo-tree-id2555 . -3) (undo-tree-id2556 . -3) (undo-tree-id2557 . -3) (undo-tree-id2558 . -3) (undo-tree-id2559 . -3) (undo-tree-id2560 . -3) (undo-tree-id2561 . -3) (undo-tree-id2562 . -3) (undo-tree-id2563 . -3) (undo-tree-id2564 . -3) (undo-tree-id2565 . -3) (undo-tree-id2566 . -3) (undo-tree-id2567 . -3) (undo-tree-id2568 . -3) (undo-tree-id2569 . -3) (undo-tree-id2570 . -3) (undo-tree-id2571 . -3) (undo-tree-id2572 . -3) (undo-tree-id2573 . -3) (undo-tree-id2574 . -3) (undo-tree-id2575 . -3) (undo-tree-id2576 . -3) (undo-tree-id2577 . -3) (undo-tree-id2578 . -3) (undo-tree-id2579 . -3) (undo-tree-id2580 . -3) (undo-tree-id2581 . -3) (undo-tree-id2582 . -3) (undo-tree-id2583 . -3) (undo-tree-id2584 . -3) (undo-tree-id2585 . -3) (undo-tree-id2586 . -3) (undo-tree-id2587 . -3) (undo-tree-id2588 . -3) (undo-tree-id2589 . -3) (undo-tree-id2590 . -3) (undo-tree-id2591 . -3) (undo-tree-id2592 . -3) (undo-tree-id2593 . -3) (undo-tree-id2594 . -3) (undo-tree-id2595 . -3) (undo-tree-id2596 . -3) (undo-tree-id2597 . -3) (undo-tree-id2598 . -3) (undo-tree-id2599 . -3) (undo-tree-id2600 . -3) (undo-tree-id2601 . -3) (undo-tree-id2602 . -3) (undo-tree-id2603 . -3) (undo-tree-id2604 . -3) (undo-tree-id2605 . -3) (undo-tree-id2606 . -3) (undo-tree-id2607 . -3) (undo-tree-id2608 . -3) (undo-tree-id2609 . -3) (undo-tree-id2610 . -3) (undo-tree-id2611 . -3) (undo-tree-id2612 . -3) (undo-tree-id2613 . -3) (undo-tree-id2614 . -3) (undo-tree-id2615 . -3) (undo-tree-id2616 . -3) (undo-tree-id2617 . -3) (undo-tree-id2618 . -3) (undo-tree-id2619 . -3) (undo-tree-id2620 . -3) (undo-tree-id2621 . -3) (undo-tree-id2622 . -3) (undo-tree-id2623 . -3) (undo-tree-id2624 . -3) (undo-tree-id2625 . -3) (undo-tree-id2626 . -3) (undo-tree-id2627 . -3) (undo-tree-id2628 . -3) (undo-tree-id2629 . -3) (undo-tree-id2630 . -3) (undo-tree-id2631 . -3) (undo-tree-id2632 . -3) (undo-tree-id2633 . -3) (undo-tree-id2634 . -3) (undo-tree-id2635 . -3) (undo-tree-id2636 . -3) (undo-tree-id2637 . -3) (undo-tree-id2638 . -3) (undo-tree-id2639 . -3) (undo-tree-id2640 . -3) (undo-tree-id2641 . -3) (undo-tree-id2642 . -3) (undo-tree-id2643 . -3) (undo-tree-id2644 . -3) (undo-tree-id2645 . -3) (undo-tree-id2646 . -3) (undo-tree-id2647 . -3) (undo-tree-id2648 . -3) (undo-tree-id2649 . -3) (undo-tree-id2650 . -3) (undo-tree-id2651 . -3) (undo-tree-id2652 . -3) (undo-tree-id2653 . -3) (undo-tree-id2654 . -3) (undo-tree-id2655 . -3) (undo-tree-id2656 . -3) (undo-tree-id2657 . -3) (undo-tree-id2658 . -3) (undo-tree-id2659 . -3) (undo-tree-id2660 . -3) (undo-tree-id2661 . -3) (undo-tree-id2662 . -3) (undo-tree-id2663 . -3) (undo-tree-id2664 . -3) (undo-tree-id2665 . -3) (undo-tree-id2666 . -3) (undo-tree-id2667 . -3) (undo-tree-id2668 . -3) (undo-tree-id2669 . -3) (undo-tree-id2670 . -3)) (25817 26430 517686 0) 0 nil])
([nil nil ((69 . 86) (t 25817 26452 274643 318000)) nil (25817 26473 868040 0) 0 nil] [nil nil ((792 . 795) (t 25817 26432 922126 693000)) ((#("
  " 0 1 (cider-locals nil fontified t help-echo cider--help-echo) 1 3 (cider-locals nil fontified t help-echo cider--help-echo)) . 792) (undo-tree-id3689 . -3) (undo-tree-id3690 . -3) (undo-tree-id3691 . -3) (undo-tree-id3692 . -3) (undo-tree-id3693 . -3) (undo-tree-id3694 . -3) (undo-tree-id3695 . -3) (undo-tree-id3696 . -3) (undo-tree-id3697 . -3) (undo-tree-id3698 . -3) (undo-tree-id3699 . -3) (undo-tree-id3700 . -3) (undo-tree-id3701 . -3) (undo-tree-id3702 . -3) (undo-tree-id3703 . -3) (undo-tree-id3704 . -3) (undo-tree-id3705 . -3) (undo-tree-id3706 . -3) (undo-tree-id3707 . -3) (undo-tree-id3708 . -3) (undo-tree-id3709 . -3) (undo-tree-id3710 . -3) (undo-tree-id3711 . -3) (undo-tree-id3712 . -3) (undo-tree-id3713 . -3) (undo-tree-id3714 . -3) (undo-tree-id3715 . -3) (undo-tree-id3716 . -3) (undo-tree-id3717 . -3) (undo-tree-id3718 . -3) (undo-tree-id3719 . -3) (undo-tree-id3720 . -3) (undo-tree-id3721 . -3) (undo-tree-id3722 . -3) (undo-tree-id3723 . -3) (undo-tree-id3724 . -3) (undo-tree-id3725 . -3) (undo-tree-id3726 . -3) (undo-tree-id3727 . -3) (undo-tree-id3728 . -3) (undo-tree-id3729 . -3) (undo-tree-id3730 . -3) (undo-tree-id3731 . -3) (undo-tree-id3732 . -3) (undo-tree-id3733 . -3) (undo-tree-id3734 . -3) (undo-tree-id3735 . -3) (undo-tree-id3736 . -3) (undo-tree-id3737 . -3) (undo-tree-id3738 . -3) (undo-tree-id3739 . -3) (undo-tree-id3740 . -3) (undo-tree-id3741 . -3) (undo-tree-id3742 . -3) (undo-tree-id3743 . -3) (undo-tree-id3744 . -3) (undo-tree-id3745 . -3) (undo-tree-id3746 . -3) (undo-tree-id3747 . -3) (undo-tree-id3748 . -3) (undo-tree-id3749 . -3) (undo-tree-id3750 . -3) (undo-tree-id3751 . -3) (undo-tree-id3752 . -3) (undo-tree-id3753 . -3) (undo-tree-id3754 . -3) (undo-tree-id3755 . -3) (undo-tree-id3756 . -3) (undo-tree-id3757 . -3) (undo-tree-id3758 . -3) (undo-tree-id3759 . -3) (undo-tree-id3760 . -3) (undo-tree-id3761 . -3) (undo-tree-id3762 . -3) (undo-tree-id3763 . -3) (undo-tree-id3764 . -3) (undo-tree-id3765 . -3) (undo-tree-id3766 . -3) (undo-tree-id3767 . -3) (undo-tree-id3768 . -3) (undo-tree-id3769 . -3) (undo-tree-id3770 . -3) (undo-tree-id3771 . -3) (undo-tree-id3772 . -3) (undo-tree-id3773 . -3) (undo-tree-id3774 . -3) (undo-tree-id3775 . -3) (undo-tree-id3776 . -3) (undo-tree-id3777 . -3) (undo-tree-id3778 . -3) (undo-tree-id3779 . -3) (undo-tree-id3780 . -3) (undo-tree-id3781 . -3) (undo-tree-id3782 . -3) (undo-tree-id3783 . -3) (undo-tree-id3784 . -3) (undo-tree-id3785 . -3) (undo-tree-id3786 . -3) (undo-tree-id3787 . -3) (undo-tree-id3788 . -3) (undo-tree-id3789 . -3) (undo-tree-id3790 . -3) (undo-tree-id3791 . -3) (undo-tree-id3792 . -3) (undo-tree-id3793 . -3) (undo-tree-id3794 . -3) (undo-tree-id3795 . -3) (undo-tree-id3796 . -3) (undo-tree-id3797 . -3) (undo-tree-id3798 . -3) (undo-tree-id3799 . -3) (undo-tree-id3800 . -3) (undo-tree-id3801 . -3) (undo-tree-id3802 . -3) (undo-tree-id3803 . -3) (undo-tree-id3804 . -3) (undo-tree-id3805 . -3) (undo-tree-id3806 . -3) (undo-tree-id3807 . -3) (undo-tree-id3808 . -3) (undo-tree-id3809 . -3) (undo-tree-id3810 . -3) (undo-tree-id3811 . -3) (undo-tree-id3812 . -3) (undo-tree-id3813 . -3) (undo-tree-id3814 . -3) (undo-tree-id3815 . -3) (undo-tree-id3816 . -3) (undo-tree-id3817 . -3) (undo-tree-id3818 . -3) (undo-tree-id3819 . -3) (undo-tree-id3820 . -3) (undo-tree-id3821 . -3) (undo-tree-id3822 . -3) (undo-tree-id3823 . -3) (undo-tree-id3824 . -3) (undo-tree-id3825 . -3) (undo-tree-id3826 . -3) (undo-tree-id3827 . -3) (undo-tree-id3828 . -3) (undo-tree-id3829 . -3) (undo-tree-id3830 . -3) (undo-tree-id3831 . -3) (undo-tree-id3832 . -3) (undo-tree-id3833 . -3) (undo-tree-id3834 . -3) (undo-tree-id3835 . -3) (undo-tree-id3836 . -3) (undo-tree-id3837 . -3) (undo-tree-id3838 . -3) (undo-tree-id3839 . -3) (undo-tree-id3840 . -3) (undo-tree-id3841 . -3) (undo-tree-id3842 . -3) (undo-tree-id3843 . -3) (undo-tree-id3844 . -3) (undo-tree-id3845 . -3) (undo-tree-id3846 . -3) (undo-tree-id3847 . -3) (undo-tree-id3848 . -3) (undo-tree-id3849 . -3) (undo-tree-id3850 . -3) (undo-tree-id3851 . -3) (undo-tree-id3852 . -3) (undo-tree-id3853 . -3) (undo-tree-id3854 . -3) (undo-tree-id3855 . -3) (undo-tree-id3856 . -3) (undo-tree-id3857 . -3) (undo-tree-id3858 . -3) (undo-tree-id3859 . -3) (undo-tree-id3860 . -3) (undo-tree-id3861 . -3) (undo-tree-id3862 . -3) (undo-tree-id3863 . -3) (undo-tree-id3864 . -3) (undo-tree-id3865 . -3) (undo-tree-id3866 . -3) (undo-tree-id3867 . -3) (undo-tree-id3868 . -3) (undo-tree-id3869 . -3) (undo-tree-id3870 . -3) (undo-tree-id3871 . -3) (undo-tree-id3872 . -3) (undo-tree-id3873 . -3) (undo-tree-id3874 . -3) (undo-tree-id3875 . -3) (undo-tree-id3876 . -3) (undo-tree-id3877 . -3) (undo-tree-id3878 . -3) (undo-tree-id3879 . -3) (undo-tree-id3880 . -3) (undo-tree-id3881 . -3) (undo-tree-id3882 . -3) (undo-tree-id3883 . -3) (undo-tree-id3884 . -3) (undo-tree-id3885 . -3) (undo-tree-id3886 . -3) (undo-tree-id3887 . -3) (undo-tree-id3888 . -3) (undo-tree-id3889 . -3) (undo-tree-id3890 . -3) (undo-tree-id3891 . -3) (undo-tree-id3892 . -3) (undo-tree-id3893 . -3) (undo-tree-id3894 . -3) (undo-tree-id3895 . -3) (undo-tree-id3896 . -3) (undo-tree-id3897 . -3) (undo-tree-id3898 . -3) (undo-tree-id3899 . -3) (undo-tree-id3900 . -3) (undo-tree-id3901 . -3) (undo-tree-id3902 . -3) (undo-tree-id3903 . -3) (undo-tree-id3904 . -3) (undo-tree-id3905 . -3) (undo-tree-id3906 . -3) (undo-tree-id3907 . -3) (undo-tree-id3908 . -3) (undo-tree-id3909 . -3) (undo-tree-id3910 . -3) (undo-tree-id3911 . -3) (undo-tree-id3912 . -3) (undo-tree-id3913 . -3) (undo-tree-id3914 . -3) (undo-tree-id3915 . -3) (undo-tree-id3916 . -3) (undo-tree-id3917 . -3) (undo-tree-id3918 . -3) (undo-tree-id3919 . -1) (undo-tree-id3920 . -3) (undo-tree-id3921 . -3) (undo-tree-id3922 . -3) (undo-tree-id3923 . -3) (undo-tree-id3924 . -3) (undo-tree-id3925 . -3) (undo-tree-id3926 . -3) (undo-tree-id3927 . -3) (undo-tree-id3928 . -3) (undo-tree-id3929 . -3) (undo-tree-id3930 . -3) (undo-tree-id3931 . -3) (undo-tree-id3932 . -3) (undo-tree-id3933 . -3) (undo-tree-id3934 . -3) (undo-tree-id3935 . -3) (undo-tree-id3936 . -3) (undo-tree-id3937 . -3) (undo-tree-id3938 . -3) (undo-tree-id3939 . -3) (undo-tree-id3940 . -3) (undo-tree-id3941 . -3) (undo-tree-id3942 . -3) (undo-tree-id3943 . -3) (undo-tree-id3944 . -3) (undo-tree-id3945 . -3) (undo-tree-id3946 . -3) (undo-tree-id3947 . -3) (undo-tree-id3948 . -3) (undo-tree-id3949 . -3) (undo-tree-id3950 . -3) (undo-tree-id3951 . -3) (undo-tree-id3952 . -3) (undo-tree-id3953 . -3) (undo-tree-id3954 . -3) (undo-tree-id3955 . -3) (undo-tree-id3956 . -3) (undo-tree-id3957 . -3) (undo-tree-id3958 . -3) (undo-tree-id3959 . -3) (undo-tree-id3960 . -3) (undo-tree-id3961 . -3) (undo-tree-id3962 . -3) (undo-tree-id3963 . -3) (undo-tree-id3964 . -3) (undo-tree-id3965 . -3) (undo-tree-id3966 . -3) (undo-tree-id3967 . -3) (undo-tree-id3968 . -3) (undo-tree-id3969 . -3) (undo-tree-id3970 . -3) (undo-tree-id3971 . -3) (undo-tree-id3972 . -3) (undo-tree-id3973 . -3) (undo-tree-id3974 . -3) (undo-tree-id3975 . -3) (undo-tree-id3976 . -3) (undo-tree-id3977 . -3) (undo-tree-id3978 . -3) (undo-tree-id3979 . -3) (undo-tree-id3980 . -3) (undo-tree-id3981 . -3) (undo-tree-id3982 . -3) (undo-tree-id3983 . -3) (undo-tree-id3984 . -3) (undo-tree-id3985 . -3) (undo-tree-id3986 . -3) (undo-tree-id3987 . -3) (undo-tree-id3988 . -3) (undo-tree-id3989 . -3) (undo-tree-id3990 . -3) (undo-tree-id3991 . -3) (undo-tree-id3992 . -3)) (25817 26451 117067 0) 0 nil])
([nil nil ((nil help-echo cider--help-echo 934 . 935) (nil fontified nil 934 . 935) (nil help-echo cider--help-echo 933 . 934) (nil fontified nil 933 . 934) (nil help-echo cider--help-echo 932 . 933) (nil fontified nil 932 . 933) (nil help-echo cider--help-echo 925 . 932) (nil fontified nil 925 . 932) (nil help-echo cider--help-echo 924 . 925) (nil fontified nil 924 . 925) (nil help-echo cider--help-echo 923 . 924) (nil fontified nil 923 . 924) (nil help-echo cider--help-echo 919 . 923) (nil fontified nil 919 . 923) (nil help-echo cider--help-echo 918 . 919) (nil fontified nil 918 . 919) (nil help-echo cider--help-echo 917 . 918) (nil fontified nil 917 . 918) (nil help-echo cider--help-echo 916 . 917) (nil fontified nil 916 . 917) (nil help-echo cider--help-echo 902 . 916) (nil fontified nil 902 . 916) (nil help-echo cider--help-echo 901 . 902) (nil fontified nil 901 . 902) (nil help-echo cider--help-echo 882 . 901) (nil fontified nil 882 . 901) (nil help-echo cider--help-echo 881 . 882) (nil fontified nil 881 . 882) (nil help-echo cider--help-echo 875 . 881) (nil fontified nil 875 . 881) (nil help-echo cider--help-echo 874 . 875) (nil fontified nil 874 . 875) (nil help-echo cider--help-echo 873 . 874) (nil fontified nil 873 . 874) (nil help-echo cider--help-echo 859 . 873) (nil fontified nil 859 . 873) (nil help-echo cider--help-echo 858 . 859) (nil fontified nil 858 . 859) (nil help-echo cider--help-echo 857 . 858) (nil fontified nil 857 . 858) (nil help-echo cider--help-echo 856 . 857) (nil fontified nil 856 . 857) (nil help-echo cider--help-echo 855 . 856) (nil fontified nil 855 . 856) (nil help-echo cider--help-echo 845 . 855) (nil fontified nil 845 . 855) (nil help-echo cider--help-echo 844 . 845) (nil fontified nil 844 . 845) (844 . 935)) ((#(":directives [{:directive-type :access
                   :directive-args {:role :checker}}]" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 1 11 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 11 12 (cider-locals nil help-echo cider--help-echo fontified nil) 12 13 (face (rainbow-delimiters-depth-4-face) cider-locals nil help-echo cider--help-echo fontified nil) 13 14 (face (rainbow-delimiters-depth-5-face) cider-locals nil help-echo cider--help-echo fontified nil) 14 15 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 15 29 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 29 30 (cider-locals nil help-echo cider--help-echo fontified nil) 30 31 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 31 37 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 37 38 (cider-locals nil help-echo cider--help-echo fontified nil) 38 55 (cider-locals nil help-echo cider--help-echo fontified nil) 55 57 (cider-locals nil help-echo cider--help-echo fontified nil ws-butler-chg chg) 57 58 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 58 72 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 72 73 (cider-locals nil help-echo cider--help-echo fontified nil) 73 74 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo fontified nil) 74 75 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 75 79 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 79 80 (cider-locals nil help-echo cider--help-echo fontified nil) 80 81 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 81 88 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 88 89 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo fontified nil) 89 90 (face (rainbow-delimiters-depth-5-face) cider-locals nil help-echo cider--help-echo fontified nil) 90 91 (face (rainbow-delimiters-depth-4-face) cider-locals nil help-echo cider--help-echo fontified nil rear-nonsticky t)) . 844) (undo-tree-id1861 . -91) (undo-tree-id1862 . -91) (undo-tree-id1863 . -91) (undo-tree-id1864 . -91) (undo-tree-id1865 . -91) (undo-tree-id1866 . -91) (undo-tree-id1867 . -91) (undo-tree-id1868 . -91) (undo-tree-id1869 . -91) (undo-tree-id1870 . -91) (undo-tree-id1871 . -91) (undo-tree-id1872 . -91) (undo-tree-id1873 . -91) (undo-tree-id1874 . -91) (undo-tree-id1875 . -91) (undo-tree-id1876 . -91) (undo-tree-id1877 . -91) (undo-tree-id1878 . -91) (undo-tree-id1879 . -91) (undo-tree-id1880 . -91) (undo-tree-id1881 . -91) (undo-tree-id1882 . -91) (undo-tree-id1883 . -91) (undo-tree-id1884 . -91) (undo-tree-id1885 . -91) (undo-tree-id1886 . -91) (undo-tree-id1887 . -91) (undo-tree-id1888 . -91) (undo-tree-id1889 . -91) (undo-tree-id1890 . -91) (undo-tree-id1891 . -91) (undo-tree-id1892 . -91) (undo-tree-id1893 . -91) (undo-tree-id1894 . -91) (undo-tree-id1895 . -91) (undo-tree-id1896 . -91) (undo-tree-id1897 . -91) (undo-tree-id1898 . -91) (undo-tree-id1899 . -91) (undo-tree-id1900 . -91) (undo-tree-id1901 . -91) (undo-tree-id1902 . -91) (undo-tree-id1903 . -91) (undo-tree-id1904 . -91) (undo-tree-id1905 . -91) (undo-tree-id1906 . -91) (undo-tree-id1907 . -91) (undo-tree-id1908 . -91) (undo-tree-id1909 . -91) (undo-tree-id1910 . -91) (undo-tree-id1911 . -91) (undo-tree-id1912 . -91) (undo-tree-id1913 . -91) (undo-tree-id1914 . -91) (undo-tree-id1915 . -91) (undo-tree-id1916 . -91) (undo-tree-id1917 . -91) (undo-tree-id1918 . -91) (undo-tree-id1919 . -91) (undo-tree-id1920 . -91) (undo-tree-id1921 . -91) (undo-tree-id1922 . -91) (undo-tree-id1923 . -91) (undo-tree-id1924 . -91) (undo-tree-id1925 . -91) (undo-tree-id1926 . -91) (undo-tree-id1927 . -91) (undo-tree-id1928 . -91) (undo-tree-id1929 . -91) (undo-tree-id1930 . -91) (undo-tree-id1931 . -91) (undo-tree-id1932 . -91) (undo-tree-id1933 . -91) (undo-tree-id1934 . -91) (undo-tree-id1935 . -91) (undo-tree-id1936 . -91) (undo-tree-id1937 . -91) (undo-tree-id1938 . -91) (undo-tree-id1939 . -91) (undo-tree-id1940 . -91) (undo-tree-id1941 . -91) (undo-tree-id1942 . -91) (undo-tree-id1943 . -91) (undo-tree-id1944 . -91) (undo-tree-id1945 . -91) (undo-tree-id1946 . -91) (undo-tree-id1947 . -91) (undo-tree-id1948 . -91) (undo-tree-id1949 . -91) (undo-tree-id1950 . -91) (undo-tree-id1951 . -91) (undo-tree-id1952 . -91) (undo-tree-id1953 . -91) (undo-tree-id1954 . -91) (undo-tree-id1955 . -91) (undo-tree-id1956 . -91) (undo-tree-id1957 . -91) (undo-tree-id1958 . -91) (undo-tree-id1959 . -91) (undo-tree-id1960 . -91) (undo-tree-id1961 . -91) (undo-tree-id1962 . -91) (undo-tree-id1963 . -91) (undo-tree-id1964 . -91) (undo-tree-id1965 . -91) (undo-tree-id1966 . -91) (undo-tree-id1967 . -91) (undo-tree-id1968 . -91) (undo-tree-id1969 . -91) (undo-tree-id1970 . -91) (undo-tree-id1971 . -91) (undo-tree-id1972 . -91) (undo-tree-id1973 . -91) (undo-tree-id1974 . -91) (undo-tree-id1975 . -91) (undo-tree-id1976 . -91) (undo-tree-id1977 . -91) (undo-tree-id1978 . -91) (undo-tree-id1979 . -91) (undo-tree-id1980 . -91) (undo-tree-id1981 . -91) (undo-tree-id1982 . -91) (undo-tree-id1983 . -91) (undo-tree-id1984 . -91) (undo-tree-id1985 . -91) (undo-tree-id1986 . -91) (undo-tree-id1987 . -91) (undo-tree-id1988 . -91) (undo-tree-id1989 . -91) (undo-tree-id1990 . -91) (undo-tree-id1991 . -91) (undo-tree-id1992 . -91) (undo-tree-id1993 . -91) (undo-tree-id1994 . -91) (undo-tree-id1995 . -91) (undo-tree-id1996 . -91) (undo-tree-id1997 . -91) (undo-tree-id1998 . -91) (undo-tree-id1999 . -91) (undo-tree-id2000 . -91) (undo-tree-id2001 . -91) (undo-tree-id2002 . -91) (undo-tree-id2003 . -91) (undo-tree-id2004 . -91) (undo-tree-id2005 . -91) (undo-tree-id2006 . -91) (undo-tree-id2007 . -91) (undo-tree-id2008 . -91) (undo-tree-id2009 . -91) (undo-tree-id2010 . -91) (undo-tree-id2011 . -91) (undo-tree-id2012 . -91) (undo-tree-id2013 . -91) (undo-tree-id2014 . -91) (undo-tree-id2015 . -91) (undo-tree-id2016 . -91) (undo-tree-id2017 . -91) (undo-tree-id2018 . -91) (undo-tree-id2019 . -91) (undo-tree-id2020 . -91) (undo-tree-id2021 . -91) (undo-tree-id2022 . -91) (undo-tree-id2023 . -91) (undo-tree-id2024 . -91) (undo-tree-id2025 . -91) (undo-tree-id2026 . -91) (undo-tree-id2027 . -91) (undo-tree-id2028 . -91) (undo-tree-id2029 . -91) (undo-tree-id2030 . -91) (undo-tree-id2031 . -91) (undo-tree-id2032 . -91) (undo-tree-id2033 . -91) (undo-tree-id2034 . -91) (undo-tree-id2035 . -91) (undo-tree-id2036 . -91) (undo-tree-id2037 . -91) (undo-tree-id2038 . -91) (undo-tree-id2039 . -91) (undo-tree-id2040 . -91) (undo-tree-id2041 . -91) (undo-tree-id2042 . -91) (undo-tree-id2043 . -91) (undo-tree-id2044 . -91) (undo-tree-id2045 . -91) (undo-tree-id2046 . -91) (undo-tree-id2047 . -91) (undo-tree-id2048 . -91) (undo-tree-id2049 . -91) (undo-tree-id2050 . -91) (undo-tree-id2051 . -91) (undo-tree-id2052 . -91) (undo-tree-id2053 . -91) (undo-tree-id2054 . -91) (undo-tree-id2055 . -91) (undo-tree-id2056 . -91) (undo-tree-id2057 . -91) (undo-tree-id2058 . -91) (undo-tree-id2059 . -91) (undo-tree-id2060 . -91) (undo-tree-id2061 . -91) (undo-tree-id2062 . -91) (undo-tree-id2063 . -91) (undo-tree-id2064 . -91) (undo-tree-id2065 . -91) (undo-tree-id2066 . -91) (undo-tree-id2067 . -91) (undo-tree-id2068 . -91) (undo-tree-id2069 . -91) (undo-tree-id2070 . -91) (undo-tree-id2071 . -91) (undo-tree-id2072 . -91) (undo-tree-id2073 . -91) (undo-tree-id2074 . -91) (undo-tree-id2075 . -91) (undo-tree-id2076 . -91) (undo-tree-id2077 . -91) (undo-tree-id2078 . -91) (undo-tree-id2079 . -91) (undo-tree-id2080 . -91) (undo-tree-id2081 . -91) (undo-tree-id2082 . -91) (undo-tree-id2083 . -91) (undo-tree-id2084 . -91) (undo-tree-id2085 . -91) (undo-tree-id2086 . -91) (undo-tree-id2087 . -91) (undo-tree-id2088 . -91) (undo-tree-id2089 . -91) (undo-tree-id2090 . -91) (undo-tree-id2091 . -91) (undo-tree-id2092 . -91) (undo-tree-id2093 . -91) (undo-tree-id2094 . -91) (undo-tree-id2095 . -91) (undo-tree-id2096 . -91) (undo-tree-id2097 . -91) (undo-tree-id2098 . -91) (undo-tree-id2099 . -91) (undo-tree-id2100 . -91) (undo-tree-id2101 . -91) (undo-tree-id2102 . -91) (undo-tree-id2103 . -91) (undo-tree-id2104 . -91) (undo-tree-id2105 . -91) (undo-tree-id2106 . -91) (undo-tree-id2107 . -91) (undo-tree-id2108 . -91) (undo-tree-id2109 . -91) (undo-tree-id2110 . -91) (undo-tree-id2111 . -91) (undo-tree-id2112 . -91) (undo-tree-id2113 . -91) (undo-tree-id2114 . -91) (undo-tree-id2115 . -91) (undo-tree-id2116 . -91) (undo-tree-id2117 . -91) (undo-tree-id2118 . -91) (undo-tree-id2119 . -91) (undo-tree-id2120 . -91) (undo-tree-id2121 . -91) (undo-tree-id2122 . -91) (undo-tree-id2123 . -91) (undo-tree-id2124 . -91) (undo-tree-id2125 . -91) (undo-tree-id2126 . -91) (undo-tree-id2127 . -91) (undo-tree-id2128 . -91) (undo-tree-id2129 . -91) (undo-tree-id2130 . -91) (undo-tree-id2131 . -91) (undo-tree-id2132 . -91) (undo-tree-id2133 . -91) (undo-tree-id2134 . -91) (undo-tree-id2135 . -91) (undo-tree-id2136 . -91) (undo-tree-id2137 . -91) (undo-tree-id2138 . -91) (undo-tree-id2139 . -91) (undo-tree-id2140 . -91) (undo-tree-id2141 . -91) (undo-tree-id2142 . -91) (undo-tree-id2143 . -91) (undo-tree-id2144 . -91) (undo-tree-id2145 . -91) (undo-tree-id2146 . -91) (undo-tree-id2147 . -91) (undo-tree-id2148 . -91) (undo-tree-id2149 . -91) (undo-tree-id2150 . -91) (undo-tree-id2151 . -91) (undo-tree-id2152 . -91) (undo-tree-id2153 . -91) (undo-tree-id2154 . -91) (undo-tree-id2155 . -91) (undo-tree-id2156 . -91) (undo-tree-id2157 . -91) (undo-tree-id2158 . -91) (undo-tree-id2159 . -91) (undo-tree-id2160 . -91) (undo-tree-id2161 . -91) (undo-tree-id2162 . -91) (undo-tree-id2163 . -91) (undo-tree-id2164 . -91) (undo-tree-id2165 . -91) (undo-tree-id2166 . -91) (undo-tree-id2167 . -91) (undo-tree-id2168 . -91) (undo-tree-id2169 . -91) (undo-tree-id2170 . -91) (undo-tree-id2171 . -91) (undo-tree-id2172 . -91) (undo-tree-id2173 . -91) (undo-tree-id2174 . -38) (undo-tree-id2175 . -91) (undo-tree-id2176 . -91) (undo-tree-id2177 . -91) (undo-tree-id2178 . -91) (undo-tree-id2179 . -91) (undo-tree-id2180 . -91) (undo-tree-id2181 . -91) (undo-tree-id2182 . -91) (undo-tree-id2183 . -91) (undo-tree-id2184 . -91) (undo-tree-id2185 . -91) (undo-tree-id2186 . -91) (undo-tree-id2187 . -91) (undo-tree-id2188 . -91) (undo-tree-id2189 . -91) (undo-tree-id2190 . -91) (undo-tree-id2191 . -91) (undo-tree-id2192 . -91) (undo-tree-id2193 . -91) (undo-tree-id2194 . -91) (undo-tree-id2195 . -91) (undo-tree-id2196 . -91) (undo-tree-id2197 . -91) (undo-tree-id2198 . -91) (undo-tree-id2199 . -91) (undo-tree-id2200 . -91) (undo-tree-id2201 . -91) (undo-tree-id2202 . -91) (undo-tree-id2203 . -91) (undo-tree-id2204 . -91) (undo-tree-id2205 . -91) (undo-tree-id2206 . -91) (undo-tree-id2207 . -91) (undo-tree-id2208 . -91) (undo-tree-id2209 . -91) (undo-tree-id2210 . -91) (undo-tree-id2211 . -91) (undo-tree-id2212 . -91) (undo-tree-id2213 . -91) (undo-tree-id2214 . -91) (undo-tree-id2215 . -91) (undo-tree-id2216 . -91) (undo-tree-id2217 . -91) (undo-tree-id2218 . -91) (undo-tree-id2219 . -91) (undo-tree-id2220 . -91) (undo-tree-id2221 . -91) (undo-tree-id2222 . -91) (undo-tree-id2223 . -91) (undo-tree-id2224 . -91) (undo-tree-id2225 . -91) (undo-tree-id2226 . -91) (undo-tree-id2227 . -91) (undo-tree-id2228 . -91) (undo-tree-id2229 . -91) (undo-tree-id2230 . -91) (undo-tree-id2231 . -91) (undo-tree-id2232 . -91) (undo-tree-id2233 . -91) (nil fontified t 881 . 882) (nil fontified t 934 . 935)) (25817 26430 17300 0) 0 nil])
([nil nil ((86 . 90)) nil (25817 26473 868038 0) 0 nil])
([nil nil ((nil help-echo cider--help-echo 885 . 886) (nil fontified nil 885 . 886) (nil help-echo cider--help-echo 884 . 885) (nil fontified nil 884 . 885) (nil help-echo cider--help-echo 883 . 884) (nil fontified nil 883 . 884) (nil help-echo cider--help-echo 876 . 883) (nil fontified nil 876 . 883) (nil help-echo cider--help-echo 875 . 876) (nil fontified nil 875 . 876) (nil help-echo cider--help-echo 874 . 875) (nil fontified nil 874 . 875) (nil help-echo cider--help-echo 870 . 874) (nil fontified nil 870 . 874) (nil help-echo cider--help-echo 869 . 870) (nil fontified nil 869 . 870) (nil help-echo cider--help-echo 868 . 869) (nil fontified nil 868 . 869) (nil help-echo cider--help-echo 867 . 868) (nil fontified nil 867 . 868) (nil help-echo cider--help-echo 853 . 867) (nil fontified nil 853 . 867) (nil help-echo cider--help-echo 852 . 853) (nil fontified nil 852 . 853) (nil help-echo cider--help-echo 833 . 852) (nil fontified nil 833 . 852) (nil help-echo cider--help-echo 832 . 833) (nil fontified nil 832 . 833) (nil help-echo cider--help-echo 826 . 832) (nil fontified nil 826 . 832) (nil help-echo cider--help-echo 825 . 826) (nil fontified nil 825 . 826) (nil help-echo cider--help-echo 824 . 825) (nil fontified nil 824 . 825) (nil help-echo cider--help-echo 810 . 824) (nil fontified nil 810 . 824) (nil help-echo cider--help-echo 809 . 810) (nil fontified nil 809 . 810) (nil help-echo cider--help-echo 808 . 809) (nil fontified nil 808 . 809) (nil help-echo cider--help-echo 807 . 808) (nil fontified nil 807 . 808) (nil help-echo cider--help-echo 806 . 807) (nil fontified nil 806 . 807) (nil help-echo cider--help-echo 796 . 806) (nil fontified nil 796 . 806) (nil help-echo cider--help-echo 795 . 796) (nil fontified nil 795 . 796) (795 . 886)) ((#(":directives [{:directive-type :access
                   :directive-args {:role :checker}}]" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 1 11 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 11 12 (cider-locals nil help-echo cider--help-echo fontified nil) 12 13 (face (rainbow-delimiters-depth-3-face) cider-locals nil help-echo cider--help-echo fontified nil) 13 14 (face (rainbow-delimiters-depth-4-face) cider-locals nil help-echo cider--help-echo fontified nil) 14 15 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 15 29 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 29 30 (cider-locals nil help-echo cider--help-echo fontified nil) 30 31 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 31 37 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 37 38 (cider-locals nil help-echo cider--help-echo fontified nil) 38 57 (cider-locals nil help-echo cider--help-echo fontified nil) 57 58 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 58 72 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 72 73 (cider-locals nil help-echo cider--help-echo fontified nil) 73 74 (face (rainbow-delimiters-depth-5-face) cider-locals nil help-echo cider--help-echo fontified nil) 74 75 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 75 79 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 79 80 (cider-locals nil help-echo cider--help-echo fontified nil) 80 81 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 81 88 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 88 89 (face (rainbow-delimiters-depth-5-face) cider-locals nil help-echo cider--help-echo fontified nil) 89 90 (face (rainbow-delimiters-depth-4-face) cider-locals nil help-echo cider--help-echo fontified nil) 90 91 (face (rainbow-delimiters-depth-3-face) cider-locals nil help-echo cider--help-echo fontified nil rear-nonsticky t)) . 795) (undo-tree-id3457 . -91) (undo-tree-id3458 . -91) (undo-tree-id3459 . -91) (undo-tree-id3460 . -91) (undo-tree-id3461 . -91) (undo-tree-id3462 . -91) (undo-tree-id3463 . -91) (undo-tree-id3464 . -91) (undo-tree-id3465 . -91) (undo-tree-id3466 . -91) (undo-tree-id3467 . -91) (undo-tree-id3468 . -91) (undo-tree-id3469 . -91) (undo-tree-id3470 . -91) (undo-tree-id3471 . -91) (undo-tree-id3472 . -91) (undo-tree-id3473 . -91) (undo-tree-id3474 . -91) (undo-tree-id3475 . -91) (undo-tree-id3476 . -91) (undo-tree-id3477 . -91) (undo-tree-id3478 . -91) (undo-tree-id3479 . -91) (undo-tree-id3480 . -91) (undo-tree-id3481 . -91) (undo-tree-id3482 . -91) (undo-tree-id3483 . -91) (undo-tree-id3484 . -91) (undo-tree-id3485 . -91) (undo-tree-id3486 . -91) (undo-tree-id3487 . -91) (undo-tree-id3488 . -91) (undo-tree-id3489 . -91) (undo-tree-id3490 . -91) (undo-tree-id3491 . -91) (undo-tree-id3492 . -91) (undo-tree-id3493 . -91) (undo-tree-id3494 . -91) (undo-tree-id3495 . -91) (undo-tree-id3496 . -91) (undo-tree-id3497 . -91) (undo-tree-id3498 . -91) (undo-tree-id3499 . -91) (undo-tree-id3500 . -91) (undo-tree-id3501 . -91) (undo-tree-id3502 . -91) (undo-tree-id3503 . -91) (undo-tree-id3504 . -91) (undo-tree-id3505 . -91) (undo-tree-id3506 . -91) (undo-tree-id3507 . -91) (undo-tree-id3508 . -91) (undo-tree-id3509 . -91) (undo-tree-id3510 . -91) (undo-tree-id3511 . -91) (undo-tree-id3512 . -91) (undo-tree-id3513 . -91) (undo-tree-id3514 . -91) (undo-tree-id3515 . -91) (undo-tree-id3516 . -91) (undo-tree-id3517 . -91) (undo-tree-id3518 . -91) (undo-tree-id3519 . -91) (undo-tree-id3520 . -91) (undo-tree-id3521 . -91) (undo-tree-id3522 . -91) (undo-tree-id3523 . -91) (undo-tree-id3524 . -91) (undo-tree-id3525 . -91) (undo-tree-id3526 . -91) (undo-tree-id3527 . -91) (undo-tree-id3528 . -91) (undo-tree-id3529 . -91) (undo-tree-id3530 . -91) (undo-tree-id3531 . -91) (undo-tree-id3532 . -91) (undo-tree-id3533 . -91) (undo-tree-id3534 . -91) (undo-tree-id3535 . -91) (undo-tree-id3536 . -91) (undo-tree-id3537 . -91) (undo-tree-id3538 . -91) (undo-tree-id3539 . -91) (undo-tree-id3540 . -91) (undo-tree-id3541 . -91) (undo-tree-id3542 . -91) (undo-tree-id3543 . -91) (undo-tree-id3544 . -91) (undo-tree-id3545 . -91) (undo-tree-id3546 . -91) (undo-tree-id3547 . -91) (undo-tree-id3548 . -91) (undo-tree-id3549 . -91) (undo-tree-id3550 . -91) (undo-tree-id3551 . -91) (undo-tree-id3552 . -91) (undo-tree-id3553 . -91) (undo-tree-id3554 . -91) (undo-tree-id3555 . -91) (undo-tree-id3556 . -91) (undo-tree-id3557 . -91) (undo-tree-id3558 . -91) (undo-tree-id3559 . -91) (undo-tree-id3560 . -91) (undo-tree-id3561 . -91) (undo-tree-id3562 . -91) (undo-tree-id3563 . -91) (undo-tree-id3564 . -91) (undo-tree-id3565 . -91) (undo-tree-id3566 . -91) (undo-tree-id3567 . -91) (undo-tree-id3568 . -91) (undo-tree-id3569 . -91) (undo-tree-id3570 . -91) (undo-tree-id3571 . -91) (undo-tree-id3572 . -91) (undo-tree-id3573 . -91) (undo-tree-id3574 . -91) (undo-tree-id3575 . -91) (undo-tree-id3576 . -91) (undo-tree-id3577 . -91) (undo-tree-id3578 . -91) (undo-tree-id3579 . -91) (undo-tree-id3580 . -91) (undo-tree-id3581 . -91) (undo-tree-id3582 . -91) (undo-tree-id3583 . -91) (undo-tree-id3584 . -91) (undo-tree-id3585 . -91) (undo-tree-id3586 . -91) (undo-tree-id3587 . -91) (undo-tree-id3588 . -91) (undo-tree-id3589 . -91) (undo-tree-id3590 . -91) (undo-tree-id3591 . -38) (undo-tree-id3592 . -91) (undo-tree-id3593 . -91) (undo-tree-id3594 . -91) (undo-tree-id3595 . -91) (undo-tree-id3596 . -91) (undo-tree-id3597 . -91) (undo-tree-id3598 . -91) (undo-tree-id3599 . -91) (undo-tree-id3600 . -91) (undo-tree-id3601 . -91) (undo-tree-id3602 . -91) (undo-tree-id3603 . -91) (undo-tree-id3604 . -91) (undo-tree-id3605 . -91) (undo-tree-id3606 . -91) (undo-tree-id3607 . -91) (undo-tree-id3608 . -91) (undo-tree-id3609 . -91) (undo-tree-id3610 . -91) (undo-tree-id3611 . -91) (undo-tree-id3612 . -91) (undo-tree-id3613 . -91) (undo-tree-id3614 . -91) (undo-tree-id3615 . -91) (undo-tree-id3616 . -91) (undo-tree-id3617 . -91) (undo-tree-id3618 . -91) (undo-tree-id3619 . -91) (undo-tree-id3620 . -91) (undo-tree-id3621 . -91) (undo-tree-id3622 . -91) (undo-tree-id3623 . -91) (undo-tree-id3624 . -91) (undo-tree-id3625 . -91) (undo-tree-id3626 . -91) (undo-tree-id3627 . -91) (undo-tree-id3628 . -91) (undo-tree-id3629 . -91) (undo-tree-id3630 . -91) (undo-tree-id3631 . -91) (undo-tree-id3632 . -91) (undo-tree-id3633 . -91) (undo-tree-id3634 . -91) (undo-tree-id3635 . -91) (undo-tree-id3636 . -91) (undo-tree-id3637 . -91) (undo-tree-id3638 . -91) (undo-tree-id3639 . -91) (undo-tree-id3640 . -91) (undo-tree-id3641 . -91) (undo-tree-id3642 . -91) (undo-tree-id3643 . -91) (undo-tree-id3644 . -91) (undo-tree-id3645 . -91) (undo-tree-id3646 . -91) (undo-tree-id3647 . -91) (undo-tree-id3648 . -91) (undo-tree-id3649 . -91) (undo-tree-id3650 . -91) (undo-tree-id3651 . -91) (undo-tree-id3652 . -91) (undo-tree-id3653 . -91) (undo-tree-id3654 . -91) (undo-tree-id3655 . -91) (undo-tree-id3656 . -91) (undo-tree-id3657 . -91) (undo-tree-id3658 . -91) (undo-tree-id3659 . -91) (undo-tree-id3660 . -91) (undo-tree-id3661 . -91) (undo-tree-id3662 . -91) (undo-tree-id3663 . -91) (undo-tree-id3664 . -91) (undo-tree-id3665 . -91) (undo-tree-id3666 . -91) (undo-tree-id3667 . -91) (undo-tree-id3668 . -91) (undo-tree-id3669 . -91) (undo-tree-id3670 . -91) (undo-tree-id3671 . -91) (undo-tree-id3672 . -91) (undo-tree-id3673 . -91) (undo-tree-id3674 . -91) (undo-tree-id3675 . -91) (undo-tree-id3676 . -91) (undo-tree-id3677 . -91) (undo-tree-id3678 . -91) (undo-tree-id3679 . -91) (undo-tree-id3680 . -91) (undo-tree-id3681 . -91) (undo-tree-id3682 . -91) (undo-tree-id3683 . -91) (undo-tree-id3684 . -91) (undo-tree-id3685 . -91) (undo-tree-id3686 . -91) (undo-tree-id3687 . -91) (undo-tree-id3688 . -91) (nil fontified t 832 . 833) (nil fontified t 885 . 886) (t 25817 26446 150739 349000)) (25817 26446 119748 0) 0 nil])
([nil nil ((#("  " 0 2 (cider-locals nil help-echo cider--help-echo fontified t ws-butler-chg chg)) . -899) 935) ((899 . 901) (t 25817 26420 342887 345000)) (25817 26420 312226 0) 0 nil])
([nil nil ((#("e" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -88) (undo-tree-id4576 . -1) (undo-tree-id4577 . -1) (undo-tree-id4578 . -1) (undo-tree-id4579 . -1) (undo-tree-id4580 . -1) (undo-tree-id4581 . -1) (undo-tree-id4582 . -1) (undo-tree-id4583 . -1) (undo-tree-id4584 . -1) (undo-tree-id4585 . -1) (undo-tree-id4586 . -1) (undo-tree-id4587 . -1) (undo-tree-id4588 . -1) (undo-tree-id4589 . -1) (undo-tree-id4590 . -1) (undo-tree-id4591 . -1) (undo-tree-id4592 . -1) (undo-tree-id4593 . -1) (undo-tree-id4594 . -1) (undo-tree-id4595 . -1) (undo-tree-id4596 . -1) (undo-tree-id4597 . -1) (undo-tree-id4598 . -1) (undo-tree-id4599 . -1) (undo-tree-id4600 . -1) (undo-tree-id4601 . -1) (undo-tree-id4602 . -1) (undo-tree-id4603 . -1) (undo-tree-id4604 . -1) (undo-tree-id4605 . -1) (undo-tree-id4606 . -1) (undo-tree-id4607 . -1) (undo-tree-id4608 . -1) (undo-tree-id4609 . -1) (undo-tree-id4610 . -1) (undo-tree-id4611 . -1) (undo-tree-id4612 . -1) (undo-tree-id4613 . -1) (undo-tree-id4614 . -1) (undo-tree-id4615 . -1) (undo-tree-id4616 . -1) (undo-tree-id4617 . -1) (undo-tree-id4618 . -1) (undo-tree-id4619 . -1) (undo-tree-id4620 . -1) (undo-tree-id4621 . -1) (undo-tree-id4622 . -1) (undo-tree-id4623 . -1) (undo-tree-id4624 . -1) (undo-tree-id4625 . -1) (undo-tree-id4626 . -1) (undo-tree-id4627 . -1) (undo-tree-id4628 . -1) (undo-tree-id4629 . -1) (undo-tree-id4630 . -1) (undo-tree-id4631 . -1) (undo-tree-id4632 . -1) (undo-tree-id4633 . -1) (undo-tree-id4634 . -1) (undo-tree-id4635 . -1) (undo-tree-id4636 . -1) (undo-tree-id4637 . -1) (undo-tree-id4638 . -1) (undo-tree-id4639 . -1) (undo-tree-id4640 . -1) (undo-tree-id4641 . -1) (undo-tree-id4642 . -1) (undo-tree-id4643 . -1) (undo-tree-id4644 . -1) (undo-tree-id4645 . -1) (undo-tree-id4646 . -1) (undo-tree-id4647 . -1) (undo-tree-id4648 . -1) (undo-tree-id4649 . -1) (undo-tree-id4650 . -1) (undo-tree-id4651 . -1) (undo-tree-id4652 . -1) (undo-tree-id4653 . -1) (undo-tree-id4654 . -1) (undo-tree-id4655 . -1) (undo-tree-id4656 . -1) (undo-tree-id4657 . -1) (undo-tree-id4658 . -1) (undo-tree-id4659 . -1) (undo-tree-id4660 . -1) (undo-tree-id4661 . -1) (undo-tree-id4662 . -1) (undo-tree-id4663 . -1) (undo-tree-id4664 . -1) (undo-tree-id4665 . -1) (undo-tree-id4666 . -1) (undo-tree-id4667 . -1) (undo-tree-id4668 . -1) (undo-tree-id4669 . -1) (undo-tree-id4670 . -1) (undo-tree-id4671 . -1) (undo-tree-id4672 . -1) (undo-tree-id4673 . -1) (undo-tree-id4674 . -1) (undo-tree-id4675 . -1) (undo-tree-id4676 . -1) (undo-tree-id4677 . -1) (undo-tree-id4678 . -1) (undo-tree-id4679 . -1) (undo-tree-id4680 . -1) (undo-tree-id4681 . -1) (undo-tree-id4682 . -1) (undo-tree-id4683 . -1) (undo-tree-id4684 . -1) (undo-tree-id4685 . -1) (undo-tree-id4686 . -1) (undo-tree-id4687 . -1) (undo-tree-id4688 . -1) (undo-tree-id4689 . -1) (undo-tree-id4690 . -1) (undo-tree-id4691 . -1) (undo-tree-id4692 . -1) (undo-tree-id4693 . -1) (undo-tree-id4694 . -1) (undo-tree-id4695 . -1) (undo-tree-id4696 . -1) (undo-tree-id4697 . -1) (undo-tree-id4698 . -1) (undo-tree-id4699 . -1) (undo-tree-id4700 . -1) (undo-tree-id4701 . -1) (undo-tree-id4702 . -1) (undo-tree-id4703 . -1) (undo-tree-id4704 . -1) (undo-tree-id4705 . -1) (undo-tree-id4706 . -1) (undo-tree-id4707 . -1) (undo-tree-id4708 . -1) (undo-tree-id4709 . -1) (undo-tree-id4710 . -1) (undo-tree-id4711 . -1) (undo-tree-id4712 . -1) (#("c" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -89) (undo-tree-id4713 . -1) (undo-tree-id4714 . -1) (undo-tree-id4715 . -1) (undo-tree-id4716 . -1) (undo-tree-id4717 . -1) (undo-tree-id4718 . -1) (undo-tree-id4719 . -1) (undo-tree-id4720 . -1) (undo-tree-id4721 . -1) (undo-tree-id4722 . -1) (undo-tree-id4723 . -1) (undo-tree-id4724 . -1) (undo-tree-id4725 . -1) (undo-tree-id4726 . -1) (undo-tree-id4727 . -1) (undo-tree-id4728 . -1) (undo-tree-id4729 . -1) (undo-tree-id4730 . -1) (undo-tree-id4731 . -1) (undo-tree-id4732 . -1) (undo-tree-id4733 . -1) (undo-tree-id4734 . -1) (undo-tree-id4735 . -1) (undo-tree-id4736 . -1) (undo-tree-id4737 . -1) (undo-tree-id4738 . -1) (undo-tree-id4739 . -1) (undo-tree-id4740 . -1) (undo-tree-id4741 . -1) (undo-tree-id4742 . -1) (undo-tree-id4743 . -1) (undo-tree-id4744 . -1) (undo-tree-id4745 . -1) (undo-tree-id4746 . -1) (undo-tree-id4747 . -1) (undo-tree-id4748 . -1) (undo-tree-id4749 . -1) (undo-tree-id4750 . -1) (undo-tree-id4751 . -1) (undo-tree-id4752 . -1) (undo-tree-id4753 . -1) (undo-tree-id4754 . -1) (undo-tree-id4755 . -1) (undo-tree-id4756 . -1) 90) nil (25817 26473 868030 0) 0 nil])
nil
nil
([nil nil ((88 . 93)) nil (25817 26473 867869 0) 0 nil])
([nil nil ((#("                " 0 16 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . 70) (undo-tree-id4329 . -16) (undo-tree-id4330 . -16) (undo-tree-id4331 . -16) (undo-tree-id4332 . -16) (undo-tree-id4333 . -16) (undo-tree-id4334 . -16) (undo-tree-id4335 . -16) (undo-tree-id4336 . -16) (undo-tree-id4337 . -16) (undo-tree-id4338 . -16) (undo-tree-id4339 . -16) (undo-tree-id4340 . -16) (undo-tree-id4341 . -16) (undo-tree-id4342 . -16) (undo-tree-id4343 . -16) (undo-tree-id4344 . -16) (undo-tree-id4345 . -16) (undo-tree-id4346 . -16) (undo-tree-id4347 . -16) (undo-tree-id4348 . -16) (undo-tree-id4349 . -16) (undo-tree-id4350 . -16) (undo-tree-id4351 . -16) (undo-tree-id4352 . -16) (undo-tree-id4353 . -16) (undo-tree-id4354 . -16) (undo-tree-id4355 . -16) (undo-tree-id4356 . -16) (undo-tree-id4357 . -16) (undo-tree-id4358 . -16) (undo-tree-id4359 . -16) (undo-tree-id4360 . -16) (undo-tree-id4361 . -16) (undo-tree-id4362 . -16) (undo-tree-id4363 . -16) (undo-tree-id4364 . -16) (undo-tree-id4365 . -16) (undo-tree-id4366 . -16) (undo-tree-id4367 . -16) (undo-tree-id4368 . -16) (undo-tree-id4369 . -16) (undo-tree-id4370 . -16) (undo-tree-id4371 . -16) (undo-tree-id4372 . -16) (undo-tree-id4373 . -16) (undo-tree-id4374 . -16) (undo-tree-id4375 . -16) (undo-tree-id4376 . -16) (undo-tree-id4377 . -16) (undo-tree-id4378 . -16) (undo-tree-id4379 . -16) (undo-tree-id4380 . -16) (undo-tree-id4381 . -16) (undo-tree-id4382 . -16) (undo-tree-id4383 . -16) (undo-tree-id4384 . -16) (undo-tree-id4385 . -16) (undo-tree-id4386 . -16) (undo-tree-id4387 . -16) (undo-tree-id4388 . -16) (undo-tree-id4389 . -16) (undo-tree-id4390 . -16) (undo-tree-id4391 . -16) (undo-tree-id4392 . -16) (undo-tree-id4393 . -16) (undo-tree-id4394 . -16) (undo-tree-id4395 . -16) (undo-tree-id4396 . -16) (undo-tree-id4397 . -16) (undo-tree-id4398 . -16) (undo-tree-id4399 . -16) (undo-tree-id4400 . -16) (undo-tree-id4401 . -16) (undo-tree-id4402 . -16) (undo-tree-id4403 . -16) (undo-tree-id4404 . -16) (undo-tree-id4405 . -16) (undo-tree-id4406 . -16) (undo-tree-id4407 . -16) (undo-tree-id4408 . -16) (undo-tree-id4409 . -16) (undo-tree-id4410 . -16) (undo-tree-id4411 . -16) (undo-tree-id4412 . -16) (undo-tree-id4413 . -16) (undo-tree-id4414 . -16) (undo-tree-id4415 . -16) (undo-tree-id4416 . -16) (undo-tree-id4417 . -16) (undo-tree-id4418 . -16) (undo-tree-id4419 . -16) (undo-tree-id4420 . -16) (undo-tree-id4421 . -16) (undo-tree-id4422 . -16) (undo-tree-id4423 . -16) (undo-tree-id4424 . -16) (undo-tree-id4425 . -16) (undo-tree-id4426 . -16) (undo-tree-id4427 . -16) (undo-tree-id4428 . -16) (undo-tree-id4429 . -16) (undo-tree-id4430 . -16) (undo-tree-id4431 . -16) (undo-tree-id4432 . -16) (undo-tree-id4433 . -16) (undo-tree-id4434 . -16) (undo-tree-id4435 . -16) (undo-tree-id4436 . -16) (undo-tree-id4437 . -16) (undo-tree-id4438 . -16) (undo-tree-id4439 . -16) (undo-tree-id4440 . -16) (undo-tree-id4441 . -16) (undo-tree-id4442 . -16) (undo-tree-id4443 . -16) (undo-tree-id4444 . -16) (undo-tree-id4445 . -16) (undo-tree-id4446 . -16) (undo-tree-id4447 . -16) (undo-tree-id4448 . -16) (undo-tree-id4449 . -16) (undo-tree-id4450 . -16) (undo-tree-id4451 . -16) (undo-tree-id4452 . -16) (undo-tree-id4453 . -16) (undo-tree-id4454 . -16) (undo-tree-id4455 . -16) (undo-tree-id4456 . -16) (undo-tree-id4457 . -16) (undo-tree-id4458 . -16) (undo-tree-id4459 . -16) (undo-tree-id4460 . -16) (undo-tree-id4461 . -16) (undo-tree-id4462 . -16) (undo-tree-id4463 . -16) (undo-tree-id4464 . -16) (undo-tree-id4465 . -16) (undo-tree-id4466 . -16) (undo-tree-id4467 . -16) (undo-tree-id4468 . -16) (undo-tree-id4469 . -16) (undo-tree-id4470 . -16) (undo-tree-id4471 . -16) (undo-tree-id4472 . -16) (undo-tree-id4473 . -16) (undo-tree-id4474 . -16) (undo-tree-id4475 . -16) (undo-tree-id4476 . -16) (undo-tree-id4477 . -16) (undo-tree-id4478 . -16) (undo-tree-id4479 . -16) (undo-tree-id4480 . -16) (undo-tree-id4481 . -16) (undo-tree-id4482 . -16) (undo-tree-id4483 . -16) (undo-tree-id4484 . -16) (undo-tree-id4485 . -16) (undo-tree-id4486 . -16) (undo-tree-id4487 . -16) (undo-tree-id4488 . -16) (undo-tree-id4489 . -16) (undo-tree-id4490 . -16) (undo-tree-id4491 . -16) (undo-tree-id4492 . -16) (undo-tree-id4493 . -16) (undo-tree-id4494 . -16) (undo-tree-id4495 . -16) (undo-tree-id4496 . -16) (undo-tree-id4497 . -16) (undo-tree-id4498 . -16) (undo-tree-id4499 . -16) (undo-tree-id4500 . -16) (undo-tree-id4501 . -16) (undo-tree-id4502 . -16) (undo-tree-id4503 . -16) (undo-tree-id4504 . -16) (undo-tree-id4505 . -16) (undo-tree-id4506 . -16) (undo-tree-id4507 . -16) (undo-tree-id4508 . -16) (undo-tree-id4509 . -16) (undo-tree-id4510 . -16) (undo-tree-id4511 . -16) (undo-tree-id4512 . -16) (undo-tree-id4513 . -16) (undo-tree-id4514 . -16) (undo-tree-id4515 . -16) (undo-tree-id4516 . -16) (undo-tree-id4517 . -16) (undo-tree-id4518 . -16) (undo-tree-id4519 . -16) (undo-tree-id4520 . -16) (undo-tree-id4521 . -16) (undo-tree-id4522 . -16) (undo-tree-id4523 . -16) (undo-tree-id4524 . -16) (undo-tree-id4525 . -16) (undo-tree-id4526 . -16) (undo-tree-id4527 . -16) (undo-tree-id4528 . -16) (undo-tree-id4529 . -16) (undo-tree-id4530 . -16) (undo-tree-id4531 . -16) (undo-tree-id4532 . -16) (undo-tree-id4533 . -16) (undo-tree-id4534 . -16) (undo-tree-id4535 . -16) (undo-tree-id4536 . -16) (undo-tree-id4537 . -16) (undo-tree-id4538 . -16) (undo-tree-id4539 . -16) (undo-tree-id4540 . -16) (undo-tree-id4541 . -16) (undo-tree-id4542 . -16) (undo-tree-id4543 . -16) (undo-tree-id4544 . -16) (undo-tree-id4545 . -16) (undo-tree-id4546 . -16) (undo-tree-id4547 . -16) (undo-tree-id4548 . -16) (undo-tree-id4549 . -16) (undo-tree-id4550 . -16) (undo-tree-id4551 . -16) (undo-tree-id4552 . -16) (undo-tree-id4553 . -16) (undo-tree-id4554 . -16) (undo-tree-id4555 . -16) (undo-tree-id4556 . -16) (undo-tree-id4557 . -16) (undo-tree-id4558 . -16) (undo-tree-id4559 . -16) (undo-tree-id4560 . -16) (undo-tree-id4561 . -16) (undo-tree-id4562 . -16) (undo-tree-id4563 . -16) (undo-tree-id4564 . -16) (undo-tree-id4565 . -16) (undo-tree-id4566 . -16) (undo-tree-id4567 . -16) (undo-tree-id4568 . -16) (undo-tree-id4569 . -16) (undo-tree-id4570 . -16) (undo-tree-id4571 . -16) (undo-tree-id4572 . -16) (undo-tree-id4573 . -16) (undo-tree-id4574 . -16) (undo-tree-id4575 . -16)) nil (25817 26473 867859 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -69) (undo-tree-id3993 . -1) (undo-tree-id3994 . -1) (undo-tree-id3995 . -1) (undo-tree-id3996 . -1) (undo-tree-id3997 . -1) (undo-tree-id3998 . -1) (undo-tree-id3999 . -1) (undo-tree-id4000 . -1) (undo-tree-id4001 . -1) (undo-tree-id4002 . -1) (undo-tree-id4003 . -1) (undo-tree-id4004 . -1) (undo-tree-id4005 . -1) (undo-tree-id4006 . -1) (undo-tree-id4007 . -1) (undo-tree-id4008 . -1) (undo-tree-id4009 . -1) (undo-tree-id4010 . -1) (undo-tree-id4011 . -1) (undo-tree-id4012 . -1) (undo-tree-id4013 . -1) (undo-tree-id4014 . -1) (undo-tree-id4015 . -1) (undo-tree-id4016 . -1) (undo-tree-id4017 . -1) (undo-tree-id4018 . -1) (undo-tree-id4019 . -1) (undo-tree-id4020 . -1) (undo-tree-id4021 . -1) (undo-tree-id4022 . -1) (undo-tree-id4023 . -1) (undo-tree-id4024 . -1) (undo-tree-id4025 . -1) (undo-tree-id4026 . -1) (undo-tree-id4027 . -1) (undo-tree-id4028 . -1) (undo-tree-id4029 . -1) (undo-tree-id4030 . -1) (undo-tree-id4031 . -1) (undo-tree-id4032 . -1) (undo-tree-id4033 . -1) (undo-tree-id4034 . -1) (undo-tree-id4035 . -1) (undo-tree-id4036 . -1) (undo-tree-id4037 . -1) (undo-tree-id4038 . -1) (undo-tree-id4039 . -1) (undo-tree-id4040 . -1) (undo-tree-id4041 . -1) (undo-tree-id4042 . -1) (undo-tree-id4043 . -1) (undo-tree-id4044 . -1) (undo-tree-id4045 . -1) (undo-tree-id4046 . -1) (undo-tree-id4047 . -1) (undo-tree-id4048 . -1) (undo-tree-id4049 . -1) (undo-tree-id4050 . -1) (undo-tree-id4051 . -1) (undo-tree-id4052 . -1) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) (undo-tree-id4055 . -1) (undo-tree-id4056 . -1) (undo-tree-id4057 . -1) (undo-tree-id4058 . -1) (undo-tree-id4059 . -1) (undo-tree-id4060 . -1) (undo-tree-id4061 . -1) (undo-tree-id4062 . -1) (undo-tree-id4063 . -1) (undo-tree-id4064 . -1) (undo-tree-id4065 . -1) (undo-tree-id4066 . -1) (undo-tree-id4067 . -1) (undo-tree-id4068 . -1) (undo-tree-id4069 . -1) (undo-tree-id4070 . -1) (undo-tree-id4071 . -1) (undo-tree-id4072 . -1) (undo-tree-id4073 . -1) (undo-tree-id4074 . -1) (undo-tree-id4075 . -1) (undo-tree-id4076 . -1) (undo-tree-id4077 . -1) (undo-tree-id4078 . -1) (undo-tree-id4079 . -1) (undo-tree-id4080 . -1) (undo-tree-id4081 . -1) (undo-tree-id4082 . -1) (undo-tree-id4083 . -1) (undo-tree-id4084 . -1) (undo-tree-id4085 . -1) (undo-tree-id4086 . -1) (undo-tree-id4087 . -1) (undo-tree-id4088 . -1) (undo-tree-id4089 . -1) (undo-tree-id4090 . -1) (undo-tree-id4091 . -1) (undo-tree-id4092 . -1) (undo-tree-id4093 . -1) (undo-tree-id4094 . -1) (undo-tree-id4095 . -1) (undo-tree-id4096 . -1) (undo-tree-id4097 . -1) (undo-tree-id4098 . -1) (undo-tree-id4099 . -1) (undo-tree-id4100 . -1) (undo-tree-id4101 . -1) (undo-tree-id4102 . -1) (undo-tree-id4103 . -1) (undo-tree-id4104 . -1) (undo-tree-id4105 . -1) (undo-tree-id4106 . -1) (undo-tree-id4107 . -1) (undo-tree-id4108 . -1) (undo-tree-id4109 . -1) (undo-tree-id4110 . -1) (undo-tree-id4111 . -1) (undo-tree-id4112 . -1) (undo-tree-id4113 . -1) (undo-tree-id4114 . -1) (undo-tree-id4115 . -1) (undo-tree-id4116 . -1) (undo-tree-id4117 . -1) (undo-tree-id4118 . -1) (undo-tree-id4119 . -1) (undo-tree-id4120 . -1) (undo-tree-id4121 . -1) (undo-tree-id4122 . -1) (undo-tree-id4123 . -1) (undo-tree-id4124 . -1) (undo-tree-id4125 . -1) (undo-tree-id4126 . -1) (undo-tree-id4127 . -1) (undo-tree-id4128 . -1) (undo-tree-id4129 . -1) (undo-tree-id4130 . -1) (undo-tree-id4131 . -1) (undo-tree-id4132 . -1) (undo-tree-id4133 . -1) (undo-tree-id4134 . -1) (undo-tree-id4135 . -1) (undo-tree-id4136 . -1) (undo-tree-id4137 . -1) (undo-tree-id4138 . -1) (undo-tree-id4139 . -1) (undo-tree-id4140 . -1) (undo-tree-id4141 . -1) (undo-tree-id4142 . -1) (undo-tree-id4143 . -1) (undo-tree-id4144 . -1) (undo-tree-id4145 . -1) (undo-tree-id4146 . -1) (undo-tree-id4147 . -1) (undo-tree-id4148 . -1) (undo-tree-id4149 . -1) (undo-tree-id4150 . -1) (undo-tree-id4151 . -1) (undo-tree-id4152 . -1) (undo-tree-id4153 . -1) (undo-tree-id4154 . -1) (undo-tree-id4155 . -1) (undo-tree-id4156 . -1) (undo-tree-id4157 . -1) (undo-tree-id4158 . -1) (undo-tree-id4159 . -1) (undo-tree-id4160 . -1) (undo-tree-id4161 . -1) (undo-tree-id4162 . -1) (undo-tree-id4163 . -1) (undo-tree-id4164 . -1) (undo-tree-id4165 . -1) (undo-tree-id4166 . -1) (undo-tree-id4167 . -1) (undo-tree-id4168 . -1) (undo-tree-id4169 . -1) (undo-tree-id4170 . -1) (undo-tree-id4171 . -1) (undo-tree-id4172 . -1) (undo-tree-id4173 . -1) (undo-tree-id4174 . -1) (undo-tree-id4175 . -1) (undo-tree-id4176 . -1) (undo-tree-id4177 . -1) (undo-tree-id4178 . -1) (undo-tree-id4179 . -1) (undo-tree-id4180 . -1) (undo-tree-id4181 . -1) (undo-tree-id4182 . -1) (undo-tree-id4183 . -1) (undo-tree-id4184 . -1) (undo-tree-id4185 . -1) (undo-tree-id4186 . -1) (undo-tree-id4187 . -1) (undo-tree-id4188 . -1) (undo-tree-id4189 . -1) (undo-tree-id4190 . -1) (undo-tree-id4191 . -1) (undo-tree-id4192 . -1) (undo-tree-id4193 . -1) (undo-tree-id4194 . -1) (undo-tree-id4195 . -1) (undo-tree-id4196 . -1) (undo-tree-id4197 . -1) (undo-tree-id4198 . -1) (undo-tree-id4199 . -1) (undo-tree-id4200 . -1) (undo-tree-id4201 . -1) (undo-tree-id4202 . -1) (undo-tree-id4203 . -1) (undo-tree-id4204 . -1) (undo-tree-id4205 . -1) (undo-tree-id4206 . -1) (undo-tree-id4207 . -1) (undo-tree-id4208 . -1) (undo-tree-id4209 . -1) (undo-tree-id4210 . -1) (undo-tree-id4211 . -1) (undo-tree-id4212 . -1) (undo-tree-id4213 . -1) (undo-tree-id4214 . -1) (undo-tree-id4215 . -1) (undo-tree-id4216 . -1) (undo-tree-id4217 . -1) (undo-tree-id4218 . -1) (undo-tree-id4219 . -1) (undo-tree-id4220 . -1) (undo-tree-id4221 . -1) (undo-tree-id4222 . -1) (undo-tree-id4223 . -1) (undo-tree-id4224 . -1) (undo-tree-id4225 . -1) (undo-tree-id4226 . -1) (undo-tree-id4227 . -1) (undo-tree-id4228 . -1) (undo-tree-id4229 . -1) (undo-tree-id4230 . -1) (undo-tree-id4231 . -1) (undo-tree-id4232 . -1) (undo-tree-id4233 . -1) (undo-tree-id4234 . -1) (undo-tree-id4235 . -1) (undo-tree-id4236 . -1) (undo-tree-id4237 . -1) (undo-tree-id4238 . -1) (undo-tree-id4239 . -1) (undo-tree-id4240 . -1) (undo-tree-id4241 . -1) (undo-tree-id4242 . -1) (undo-tree-id4243 . -1) (undo-tree-id4244 . -1) (undo-tree-id4245 . -1) (undo-tree-id4246 . -1) (undo-tree-id4247 . -1) (undo-tree-id4248 . -1) (undo-tree-id4249 . -1) (undo-tree-id4250 . -1) (undo-tree-id4251 . -1) (undo-tree-id4252 . -1) (undo-tree-id4253 . -1) (undo-tree-id4254 . -1) (undo-tree-id4255 . -1) (undo-tree-id4256 . -1) (undo-tree-id4257 . -1) (undo-tree-id4258 . -1) (undo-tree-id4259 . -1) (undo-tree-id4260 . -1) (undo-tree-id4261 . -1) (undo-tree-id4262 . -1) (undo-tree-id4263 . -1) (undo-tree-id4264 . -1) (undo-tree-id4265 . -1) (undo-tree-id4266 . -1) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) (undo-tree-id4269 . -1) (undo-tree-id4270 . -1) (undo-tree-id4271 . -1) (undo-tree-id4272 . -1) (undo-tree-id4273 . -1) (undo-tree-id4274 . -1) (undo-tree-id4275 . -1) (undo-tree-id4276 . -1) (undo-tree-id4277 . -1) (undo-tree-id4278 . -1) (undo-tree-id4279 . -1) (undo-tree-id4280 . -1) (undo-tree-id4281 . -1) (undo-tree-id4282 . -1) (undo-tree-id4283 . -1) (undo-tree-id4284 . -1) (undo-tree-id4285 . -1) (undo-tree-id4286 . -1) (undo-tree-id4287 . -1) (undo-tree-id4288 . -1) (undo-tree-id4289 . -1) (undo-tree-id4290 . -1) (undo-tree-id4291 . -1) (undo-tree-id4292 . -1) (undo-tree-id4293 . -1) (undo-tree-id4294 . -1) (undo-tree-id4295 . -1) (undo-tree-id4296 . -1) (undo-tree-id4297 . -1) (undo-tree-id4298 . -1) (undo-tree-id4299 . -1) (undo-tree-id4300 . -1) (undo-tree-id4301 . -1) (undo-tree-id4302 . -1) (undo-tree-id4303 . -1) (undo-tree-id4304 . -1) (undo-tree-id4305 . -1) (undo-tree-id4306 . -1) (undo-tree-id4307 . -1) (undo-tree-id4308 . -1) (undo-tree-id4309 . -1) (undo-tree-id4310 . -1) (undo-tree-id4311 . -1) (undo-tree-id4312 . -1) (undo-tree-id4313 . -1) (undo-tree-id4314 . -1) (undo-tree-id4315 . -1) (undo-tree-id4316 . -1) (undo-tree-id4317 . -1) (undo-tree-id4318 . -1) (undo-tree-id4319 . -1) (undo-tree-id4320 . -1) (undo-tree-id4321 . -1) (undo-tree-id4322 . -1) (undo-tree-id4323 . -1) (undo-tree-id4324 . -1) (undo-tree-id4325 . -1) (undo-tree-id4326 . -1) (undo-tree-id4327 . -1) (undo-tree-id4328 . -1) 70) nil (25817 26473 867631 0) 0 nil])
([nil nil ((69 . 70)) nil (25817 26501 316103 0) 0 nil])
([nil nil ((62 . 69)) nil (25817 26507 17865 0) 0 nil] [nil nil ((848 . 852) (t 25817 26473 900760 39000)) ((#("
   " 0 1 (cider-locals nil fontified t help-echo cider--help-echo) 1 4 (cider-locals nil fontified t help-echo cider--help-echo)) . 848) (undo-tree-id5431 . -4) (undo-tree-id5432 . -4) (undo-tree-id5433 . -4) (undo-tree-id5434 . -1) (undo-tree-id5435 . -4) (undo-tree-id5436 . -4) (undo-tree-id5437 . -4) (undo-tree-id5438 . -4) (undo-tree-id5439 . -4) (undo-tree-id5440 . -4) (undo-tree-id5441 . -4) (undo-tree-id5442 . -4) (undo-tree-id5443 . -4) (undo-tree-id5444 . -4)) (25817 26500 714203 0) 0 nil])
([nil nil ((855 . 859) (t 25817 26507 51537 291000)) nil (25817 26511 9745 0) 0 nil])
([nil nil ((nil help-echo cider--help-echo 942 . 943) (nil fontified nil 942 . 943) (nil help-echo cider--help-echo 941 . 942) (nil fontified nil 941 . 942) (nil help-echo cider--help-echo 940 . 941) (nil fontified nil 940 . 941) (nil help-echo cider--help-echo 933 . 940) (nil fontified nil 933 . 940) (nil help-echo cider--help-echo 932 . 933) (nil fontified nil 932 . 933) (nil help-echo cider--help-echo 931 . 932) (nil fontified nil 931 . 932) (nil help-echo cider--help-echo 927 . 931) (nil fontified nil 927 . 931) (nil help-echo cider--help-echo 926 . 927) (nil fontified nil 926 . 927) (nil help-echo cider--help-echo 925 . 926) (nil fontified nil 925 . 926) (nil help-echo cider--help-echo 924 . 925) (nil fontified nil 924 . 925) (nil help-echo cider--help-echo 910 . 924) (nil fontified nil 910 . 924) (nil help-echo cider--help-echo 909 . 910) (nil fontified nil 909 . 910) (nil help-echo cider--help-echo 890 . 909) (nil fontified nil 890 . 909) (nil help-echo cider--help-echo 889 . 890) (nil fontified nil 889 . 890) (nil help-echo cider--help-echo 883 . 889) (nil fontified nil 883 . 889) (nil help-echo cider--help-echo 882 . 883) (nil fontified nil 882 . 883) (nil help-echo cider--help-echo 881 . 882) (nil fontified nil 881 . 882) (nil help-echo cider--help-echo 867 . 881) (nil fontified nil 867 . 881) (nil help-echo cider--help-echo 866 . 867) (nil fontified nil 866 . 867) (nil help-echo cider--help-echo 865 . 866) (nil fontified nil 865 . 866) (nil help-echo cider--help-echo 864 . 865) (nil fontified nil 864 . 865) (nil help-echo cider--help-echo 863 . 864) (nil fontified nil 863 . 864) (nil help-echo cider--help-echo 853 . 863) (nil fontified nil 853 . 863) (nil help-echo cider--help-echo 852 . 853) (nil fontified nil 852 . 853) (852 . 943)) ((#(":directives [{:directive-type :access
                   :directive-args {:role :checker}}]" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 1 11 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 11 12 (cider-locals nil help-echo cider--help-echo fontified nil) 12 13 (face (rainbow-delimiters-depth-4-face) cider-locals nil help-echo cider--help-echo fontified nil) 13 14 (face (rainbow-delimiters-depth-5-face) cider-locals nil help-echo cider--help-echo fontified nil) 14 15 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 15 29 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 29 30 (cider-locals nil help-echo cider--help-echo fontified nil) 30 31 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 31 37 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 37 38 (cider-locals nil help-echo cider--help-echo fontified nil) 38 57 (cider-locals nil help-echo cider--help-echo fontified nil) 57 58 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 58 72 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 72 73 (cider-locals nil help-echo cider--help-echo fontified nil) 73 74 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo fontified nil) 74 75 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 75 79 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 79 80 (cider-locals nil help-echo cider--help-echo fontified nil) 80 81 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 81 88 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 88 89 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo fontified nil) 89 90 (face (rainbow-delimiters-depth-5-face) cider-locals nil help-echo cider--help-echo fontified nil) 90 91 (face (rainbow-delimiters-depth-4-face) cider-locals nil help-echo cider--help-echo fontified nil rear-nonsticky t)) . 852) (undo-tree-id4758 . -91) (undo-tree-id4759 . -91) (undo-tree-id4760 . -91) (undo-tree-id4761 . -91) (undo-tree-id4762 . -91) (undo-tree-id4763 . -91) (undo-tree-id4764 . -91) (undo-tree-id4765 . -91) (undo-tree-id4766 . -91) (undo-tree-id4767 . -91) (undo-tree-id4768 . -91) (undo-tree-id4769 . -91) (undo-tree-id4770 . -91) (undo-tree-id4771 . -91) (undo-tree-id4772 . -91) (undo-tree-id4773 . -91) (undo-tree-id4774 . -91) (undo-tree-id4775 . -91) (undo-tree-id4776 . -91) (undo-tree-id4777 . -91) (undo-tree-id4778 . -91) (undo-tree-id4779 . -91) (undo-tree-id4780 . -91) (undo-tree-id4781 . -91) (undo-tree-id4782 . -91) (undo-tree-id4783 . -91) (undo-tree-id4784 . -91) (undo-tree-id4785 . -91) (undo-tree-id4786 . -91) (undo-tree-id4787 . -91) (undo-tree-id4788 . -91) (undo-tree-id4789 . -91) (undo-tree-id4790 . -91) (undo-tree-id4791 . -91) (undo-tree-id4792 . -91) (undo-tree-id4793 . -91) (undo-tree-id4794 . -91) (undo-tree-id4795 . -91) (undo-tree-id4796 . -91) (undo-tree-id4797 . -91) (undo-tree-id4798 . -91) (undo-tree-id4799 . -91) (undo-tree-id4800 . -91) (undo-tree-id4801 . -91) (undo-tree-id4802 . -91) (undo-tree-id4803 . -91) (undo-tree-id4804 . -91) (undo-tree-id4805 . -91) (undo-tree-id4806 . -91) (undo-tree-id4807 . -91) (undo-tree-id4808 . -91) (undo-tree-id4809 . -91) (undo-tree-id4810 . -91) (undo-tree-id4811 . -91) (undo-tree-id4812 . -91) (undo-tree-id4813 . -91) (undo-tree-id4814 . -91) (undo-tree-id4815 . -91) (undo-tree-id4816 . -91) (undo-tree-id4817 . -91) (undo-tree-id4818 . -91) (undo-tree-id4819 . -91) (undo-tree-id4820 . -91) (undo-tree-id4821 . -91) (undo-tree-id4822 . -91) (undo-tree-id4823 . -91) (undo-tree-id4824 . -91) (undo-tree-id4825 . -91) (undo-tree-id4826 . -91) (undo-tree-id4827 . -91) (undo-tree-id4828 . -91) (undo-tree-id4829 . -91) (undo-tree-id4830 . -91) (undo-tree-id4831 . -91) (undo-tree-id4832 . -91) (undo-tree-id4833 . -91) (undo-tree-id4834 . -91) (undo-tree-id4835 . -91) (undo-tree-id4836 . -91) (undo-tree-id4837 . -91) (undo-tree-id4838 . -91) (undo-tree-id4839 . -91) (undo-tree-id4840 . -91) (undo-tree-id4841 . -91) (undo-tree-id4842 . -91) (undo-tree-id4843 . -91) (undo-tree-id4844 . -91) (undo-tree-id4845 . -91) (undo-tree-id4846 . -91) (undo-tree-id4847 . -91) (undo-tree-id4848 . -91) (undo-tree-id4849 . -91) (undo-tree-id4850 . -91) (undo-tree-id4851 . -91) (undo-tree-id4852 . -91) (undo-tree-id4853 . -91) (undo-tree-id4854 . -91) (undo-tree-id4855 . -91) (undo-tree-id4856 . -91) (undo-tree-id4857 . -91) (undo-tree-id4858 . -91) (undo-tree-id4859 . -91) (undo-tree-id4860 . -91) (undo-tree-id4861 . -91) (undo-tree-id4862 . -91) (undo-tree-id4863 . -91) (undo-tree-id4864 . -91) (undo-tree-id4865 . -91) (undo-tree-id4866 . -91) (undo-tree-id4867 . -91) (undo-tree-id4868 . -91) (undo-tree-id4869 . -91) (undo-tree-id4870 . -91) (undo-tree-id4871 . -38) (undo-tree-id4872 . -91) (undo-tree-id4873 . -91) (undo-tree-id4874 . -91) (undo-tree-id4875 . -91) (undo-tree-id4876 . -91) (undo-tree-id4877 . -91) (undo-tree-id4878 . -91) (undo-tree-id4879 . -91) (undo-tree-id4880 . -91) (undo-tree-id4881 . -91) (undo-tree-id4882 . -91) (undo-tree-id4883 . -91) (undo-tree-id4884 . -91) (undo-tree-id4885 . -91) (undo-tree-id4886 . -91) (undo-tree-id4887 . -91) (undo-tree-id4888 . -91) (undo-tree-id4889 . -91) (undo-tree-id4890 . -91) (undo-tree-id4891 . -91) (undo-tree-id4892 . -91) (undo-tree-id4893 . -91) (undo-tree-id4894 . -91) (undo-tree-id4895 . -91) (undo-tree-id4896 . -91) (undo-tree-id4897 . -91) (undo-tree-id4898 . -91) (undo-tree-id4899 . -91) (undo-tree-id4900 . -91) (undo-tree-id4901 . -91) (undo-tree-id4902 . -91) (undo-tree-id4903 . -91) (undo-tree-id4904 . -91) (undo-tree-id4905 . -91) (undo-tree-id4906 . -91) (undo-tree-id4907 . -91) (undo-tree-id4908 . -91) (undo-tree-id4909 . -91) (undo-tree-id4910 . -91) (undo-tree-id4911 . -91) (undo-tree-id4912 . -91) (undo-tree-id4913 . -91) (undo-tree-id4914 . -91) (undo-tree-id4915 . -91) (undo-tree-id4916 . -91) (undo-tree-id4917 . -91) (undo-tree-id4918 . -91) (undo-tree-id4919 . -91) (undo-tree-id4920 . -91) (undo-tree-id4921 . -91) (undo-tree-id4922 . -91) (undo-tree-id4923 . -91) (undo-tree-id4924 . -91) (undo-tree-id4925 . -91) (undo-tree-id4926 . -91) (undo-tree-id4927 . -91) (undo-tree-id4928 . -91) (undo-tree-id4929 . -91) (undo-tree-id4930 . -91) (undo-tree-id4931 . -91) (undo-tree-id4932 . -91) (undo-tree-id4933 . -91) (undo-tree-id4934 . -91) (undo-tree-id4935 . -91) (undo-tree-id4936 . -91) (undo-tree-id4937 . -91) (undo-tree-id4938 . -91) (undo-tree-id4939 . -91) (undo-tree-id4940 . -91) (undo-tree-id4941 . -91) (undo-tree-id4942 . -91) (undo-tree-id4943 . -91) (undo-tree-id4944 . -91) (undo-tree-id4945 . -91) (undo-tree-id4946 . -91) (undo-tree-id4947 . -91) (undo-tree-id4948 . -91) (undo-tree-id4949 . -91) (undo-tree-id4950 . -91) (undo-tree-id4951 . -91) (undo-tree-id4952 . -91) (undo-tree-id4953 . -91) (undo-tree-id4954 . -91) (undo-tree-id4955 . -91) (undo-tree-id4956 . -91) (undo-tree-id4957 . -91) (undo-tree-id4958 . -91) (undo-tree-id4959 . -91) (undo-tree-id4960 . -91) (undo-tree-id4961 . -91) (undo-tree-id4962 . -91) (undo-tree-id4963 . -91) (undo-tree-id4964 . -91) (undo-tree-id4965 . -91) (undo-tree-id4966 . -91) (undo-tree-id4967 . -91) (undo-tree-id4968 . -91) (undo-tree-id4969 . -91) (undo-tree-id4970 . -91) (undo-tree-id4971 . -91) (undo-tree-id4972 . -91) (undo-tree-id4973 . -91) (undo-tree-id4974 . -91) (undo-tree-id4975 . -91) (undo-tree-id4976 . -91) (undo-tree-id4977 . -91) (undo-tree-id4978 . -91) (undo-tree-id4979 . -91) (undo-tree-id4980 . -91) (undo-tree-id4981 . -91) (undo-tree-id4982 . -91) (undo-tree-id4983 . -91) (undo-tree-id4984 . -91) (undo-tree-id4985 . -91) (undo-tree-id4986 . -91) (undo-tree-id4987 . -91) (undo-tree-id4988 . -91) (undo-tree-id4989 . -91) (undo-tree-id4990 . -91) (undo-tree-id4991 . -91) (undo-tree-id4992 . -91) (undo-tree-id4993 . -91) (undo-tree-id4994 . -91) (undo-tree-id4995 . -91) (undo-tree-id4996 . -91) (undo-tree-id4997 . -91) (undo-tree-id4998 . -91) (undo-tree-id4999 . -91) (undo-tree-id5000 . -91) (undo-tree-id5001 . -91) (undo-tree-id5002 . -91) (undo-tree-id5003 . -91) (undo-tree-id5004 . -91) (undo-tree-id5005 . -91) (undo-tree-id5006 . -91) (undo-tree-id5007 . -91) (undo-tree-id5008 . -91) (undo-tree-id5009 . -91) (undo-tree-id5010 . -91) (undo-tree-id5011 . -91) (undo-tree-id5012 . -91) (undo-tree-id5013 . -91) (undo-tree-id5014 . -91) (undo-tree-id5015 . -91) (undo-tree-id5016 . -91) (undo-tree-id5017 . -91) (undo-tree-id5018 . -91) (undo-tree-id5019 . -91) (undo-tree-id5020 . -91) (undo-tree-id5021 . -91) (undo-tree-id5022 . -91) (undo-tree-id5023 . -91) (undo-tree-id5024 . -91) (undo-tree-id5025 . -91) (undo-tree-id5026 . -91) (undo-tree-id5027 . -91) (undo-tree-id5028 . -91) (undo-tree-id5029 . -91) (undo-tree-id5030 . -91) (undo-tree-id5031 . -91) (undo-tree-id5032 . -91) (undo-tree-id5033 . -91) (undo-tree-id5034 . -91) (undo-tree-id5035 . -91) (undo-tree-id5036 . -91) (undo-tree-id5037 . -91) (undo-tree-id5038 . -91) (undo-tree-id5039 . -91) (undo-tree-id5040 . -91) (undo-tree-id5041 . -91) (undo-tree-id5042 . -91) (undo-tree-id5043 . -91) (undo-tree-id5044 . -91) (undo-tree-id5045 . -91) (undo-tree-id5046 . -91) (undo-tree-id5047 . -91) (undo-tree-id5048 . -91) (undo-tree-id5049 . -91) (undo-tree-id5050 . -91) (undo-tree-id5051 . -91) (undo-tree-id5052 . -91) (undo-tree-id5053 . -91) (undo-tree-id5054 . -91) (undo-tree-id5055 . -91) (undo-tree-id5056 . -91) (undo-tree-id5057 . -91) (undo-tree-id5058 . -91) (undo-tree-id5059 . -91) (undo-tree-id5060 . -91) (undo-tree-id5061 . -91) (undo-tree-id5062 . -91) (undo-tree-id5063 . -91) (undo-tree-id5064 . -91) (undo-tree-id5065 . -91) (undo-tree-id5066 . -91) (undo-tree-id5067 . -91) (undo-tree-id5068 . -91) (undo-tree-id5069 . -91) (undo-tree-id5070 . -91) (undo-tree-id5071 . -91) (undo-tree-id5072 . -91) (undo-tree-id5073 . -91) (undo-tree-id5074 . -91) (undo-tree-id5075 . -91) (undo-tree-id5076 . -91) (undo-tree-id5077 . -91) (undo-tree-id5078 . -91) (undo-tree-id5079 . -91) (undo-tree-id5080 . -91) (undo-tree-id5081 . -91) (undo-tree-id5082 . -91) (undo-tree-id5083 . -91) (undo-tree-id5084 . -91) (undo-tree-id5085 . -91) (undo-tree-id5086 . -91) (undo-tree-id5087 . -91) (undo-tree-id5088 . -91) (undo-tree-id5089 . -91) (undo-tree-id5090 . -91) (undo-tree-id5091 . -91) (undo-tree-id5092 . -91) (undo-tree-id5093 . -91) (undo-tree-id5094 . -91) (undo-tree-id5095 . -91) (undo-tree-id5096 . -91) (undo-tree-id5097 . -91) (undo-tree-id5098 . -91) (undo-tree-id5099 . -91) (undo-tree-id5100 . -91) (undo-tree-id5101 . -91) (undo-tree-id5102 . -91) (undo-tree-id5103 . -91) (undo-tree-id5104 . -91) (undo-tree-id5105 . -91) (undo-tree-id5106 . -91) (undo-tree-id5107 . -91) (undo-tree-id5108 . -91) (undo-tree-id5109 . -91) (undo-tree-id5110 . -91) (undo-tree-id5111 . -91) (undo-tree-id5112 . -91) (undo-tree-id5113 . -91) (undo-tree-id5114 . -91) (undo-tree-id5115 . -91) (undo-tree-id5116 . -91) (undo-tree-id5117 . -91) (undo-tree-id5118 . -91) (undo-tree-id5119 . -91) (undo-tree-id5120 . -91) (undo-tree-id5121 . -91) (undo-tree-id5122 . -91) (undo-tree-id5123 . -91) (undo-tree-id5124 . -91) (undo-tree-id5125 . -91) (undo-tree-id5126 . -91) (undo-tree-id5127 . -91) (undo-tree-id5128 . -91) (undo-tree-id5129 . -91) (undo-tree-id5130 . -91) (undo-tree-id5131 . -91) (undo-tree-id5132 . -91) (undo-tree-id5133 . -91) (undo-tree-id5134 . -91) (undo-tree-id5135 . -91) (undo-tree-id5136 . -91) (undo-tree-id5137 . -91) (undo-tree-id5138 . -91) (undo-tree-id5139 . -91) (undo-tree-id5140 . -91) (undo-tree-id5141 . -91) (undo-tree-id5142 . -91) (undo-tree-id5143 . -91) (undo-tree-id5144 . -91) (undo-tree-id5145 . -91) (undo-tree-id5146 . -91) (undo-tree-id5147 . -91) (undo-tree-id5148 . -91) (undo-tree-id5149 . -91) (undo-tree-id5150 . -91) (undo-tree-id5151 . -91) (undo-tree-id5152 . -91) (undo-tree-id5153 . -91) (undo-tree-id5154 . -91) (undo-tree-id5155 . -91) (undo-tree-id5156 . -91) (undo-tree-id5157 . -91) (undo-tree-id5158 . -91) (undo-tree-id5159 . -91) (undo-tree-id5160 . -91) (undo-tree-id5161 . -91) (undo-tree-id5162 . -91) (undo-tree-id5163 . -91) (undo-tree-id5164 . -91) (undo-tree-id5165 . -91) (undo-tree-id5166 . -91) (undo-tree-id5167 . -91) (undo-tree-id5168 . -91) (undo-tree-id5169 . -91) (undo-tree-id5170 . -91) (undo-tree-id5171 . -91) (undo-tree-id5172 . -91) (undo-tree-id5173 . -91) (undo-tree-id5174 . -91) (undo-tree-id5175 . -91) (undo-tree-id5176 . -91) (undo-tree-id5177 . -91) (undo-tree-id5178 . -91) (undo-tree-id5179 . -91) (undo-tree-id5180 . -91) (undo-tree-id5181 . -91) (undo-tree-id5182 . -91) (undo-tree-id5183 . -91) (undo-tree-id5184 . -91) (undo-tree-id5185 . -91) (undo-tree-id5186 . -91) (undo-tree-id5187 . -91) (undo-tree-id5188 . -91) (undo-tree-id5189 . -91) (undo-tree-id5190 . -91) (undo-tree-id5191 . -91) (undo-tree-id5192 . -91) (undo-tree-id5193 . -91) (undo-tree-id5194 . -91) (undo-tree-id5195 . -91) (undo-tree-id5196 . -91) (undo-tree-id5197 . -91) (undo-tree-id5198 . -91) (undo-tree-id5199 . -91) (undo-tree-id5200 . -91) (undo-tree-id5201 . -91) (undo-tree-id5202 . -91) (undo-tree-id5203 . -91) (undo-tree-id5204 . -91) (undo-tree-id5205 . -91) (undo-tree-id5206 . -91) (undo-tree-id5207 . -91) (undo-tree-id5208 . -91) (undo-tree-id5209 . -91) (undo-tree-id5210 . -91) (undo-tree-id5211 . -91) (undo-tree-id5212 . -91) (undo-tree-id5213 . -91) (undo-tree-id5214 . -91) (undo-tree-id5215 . -91) (undo-tree-id5216 . -91) (undo-tree-id5217 . -91) (undo-tree-id5218 . -91) (undo-tree-id5219 . -91) (undo-tree-id5220 . -91) (undo-tree-id5221 . -91) (undo-tree-id5222 . -91) (undo-tree-id5223 . -91) (undo-tree-id5224 . -91) (undo-tree-id5225 . -91) (undo-tree-id5226 . -91) (undo-tree-id5227 . -91) (undo-tree-id5228 . -91) (undo-tree-id5229 . -91) (undo-tree-id5230 . -91) (undo-tree-id5231 . -91) (undo-tree-id5232 . -91) (undo-tree-id5233 . -91) (undo-tree-id5234 . -91) (undo-tree-id5235 . -91) (undo-tree-id5236 . -91) (undo-tree-id5237 . -91) (undo-tree-id5238 . -91) (undo-tree-id5239 . -91) (undo-tree-id5240 . -91) (undo-tree-id5241 . -91) (undo-tree-id5242 . -91) (undo-tree-id5243 . -91) (undo-tree-id5244 . -91) (undo-tree-id5245 . -91) (undo-tree-id5246 . -91) (undo-tree-id5247 . -91) (undo-tree-id5248 . -91) (undo-tree-id5249 . -91) (undo-tree-id5250 . -91) (undo-tree-id5251 . -91) (undo-tree-id5252 . -91) (undo-tree-id5253 . -91) (undo-tree-id5254 . -91) (undo-tree-id5255 . -91) (undo-tree-id5256 . -91) (undo-tree-id5257 . -91) (undo-tree-id5258 . -91) (undo-tree-id5259 . -91) (undo-tree-id5260 . -91) (undo-tree-id5261 . -91) (undo-tree-id5262 . -91) (undo-tree-id5263 . -91) (undo-tree-id5264 . -91) (undo-tree-id5265 . -91) (undo-tree-id5266 . -91) (undo-tree-id5267 . -91) (undo-tree-id5268 . -91) (undo-tree-id5269 . -91) (undo-tree-id5270 . -91) (undo-tree-id5271 . -91) (undo-tree-id5272 . -91) (undo-tree-id5273 . -91) (undo-tree-id5274 . -91) (undo-tree-id5275 . -91) (undo-tree-id5276 . -91) (undo-tree-id5277 . -91) (undo-tree-id5278 . -91) (undo-tree-id5279 . -91) (undo-tree-id5280 . -91) (undo-tree-id5281 . -91) (undo-tree-id5282 . -91) (undo-tree-id5283 . -91) (undo-tree-id5284 . -91) (undo-tree-id5285 . -91) (undo-tree-id5286 . -91) (undo-tree-id5287 . -91) (undo-tree-id5288 . -91) (undo-tree-id5289 . -91) (undo-tree-id5290 . -91) (undo-tree-id5291 . -91) (undo-tree-id5292 . -91) (undo-tree-id5293 . -91) (undo-tree-id5294 . -91) (undo-tree-id5295 . -91) (undo-tree-id5296 . -91) (undo-tree-id5297 . -91) (undo-tree-id5298 . -91) (undo-tree-id5299 . -91) (undo-tree-id5300 . -91) (undo-tree-id5301 . -91) (undo-tree-id5302 . -91) (undo-tree-id5303 . -91) (undo-tree-id5304 . -91) (undo-tree-id5305 . -91) (undo-tree-id5306 . -91) (undo-tree-id5307 . -91) (undo-tree-id5308 . -91) (undo-tree-id5309 . -91) (undo-tree-id5310 . -91) (undo-tree-id5311 . -91) (undo-tree-id5312 . -91) (undo-tree-id5313 . -91) (undo-tree-id5314 . -91) (undo-tree-id5315 . -91) (undo-tree-id5316 . -91) (undo-tree-id5317 . -91) (undo-tree-id5318 . -91) (undo-tree-id5319 . -91) (undo-tree-id5320 . -91) (undo-tree-id5321 . -91) (undo-tree-id5322 . -91) (undo-tree-id5323 . -91) (undo-tree-id5324 . -91) (undo-tree-id5325 . -91) (undo-tree-id5326 . -91) (undo-tree-id5327 . -91) (undo-tree-id5328 . -91) (undo-tree-id5329 . -91) (undo-tree-id5330 . -91) (undo-tree-id5331 . -91) (undo-tree-id5332 . -91) (undo-tree-id5333 . -91) (undo-tree-id5334 . -91) (undo-tree-id5335 . -91) (undo-tree-id5336 . -91) (undo-tree-id5337 . -91) (undo-tree-id5338 . -91) (undo-tree-id5339 . -91) (undo-tree-id5340 . -91) (undo-tree-id5341 . -91) (undo-tree-id5342 . -91) (undo-tree-id5343 . -91) (undo-tree-id5344 . -91) (undo-tree-id5345 . -91) (undo-tree-id5346 . -91) (undo-tree-id5347 . -91) (undo-tree-id5348 . -91) (undo-tree-id5349 . -91) (undo-tree-id5350 . -91) (undo-tree-id5351 . -91) (undo-tree-id5352 . -91) (undo-tree-id5353 . -91) (undo-tree-id5354 . -91) (undo-tree-id5355 . -91) (undo-tree-id5356 . -91) (undo-tree-id5357 . -91) (undo-tree-id5358 . -91) (undo-tree-id5359 . -91) (undo-tree-id5360 . -91) (undo-tree-id5361 . -91) (undo-tree-id5362 . -91) (undo-tree-id5363 . -91) (undo-tree-id5364 . -91) (undo-tree-id5365 . -91) (undo-tree-id5366 . -91) (undo-tree-id5367 . -91) (undo-tree-id5368 . -91) (undo-tree-id5369 . -91) (undo-tree-id5370 . -91) (undo-tree-id5371 . -91) (undo-tree-id5372 . -91) (undo-tree-id5373 . -91) (undo-tree-id5374 . -91) (undo-tree-id5375 . -91) (undo-tree-id5376 . -91) (undo-tree-id5377 . -91) (undo-tree-id5378 . -91) (undo-tree-id5379 . -91) (undo-tree-id5380 . -91) (undo-tree-id5381 . -91) (undo-tree-id5382 . -91) (undo-tree-id5383 . -91) (undo-tree-id5384 . -91) (undo-tree-id5385 . -91) (undo-tree-id5386 . -91) (undo-tree-id5387 . -91) (undo-tree-id5388 . -91) (undo-tree-id5389 . -91) (undo-tree-id5390 . -91) (undo-tree-id5391 . -91) (undo-tree-id5392 . -91) (undo-tree-id5393 . -91) (undo-tree-id5394 . -91) (undo-tree-id5395 . -91) (undo-tree-id5396 . -91) (undo-tree-id5397 . -91) (undo-tree-id5398 . -91) (undo-tree-id5399 . -91) (undo-tree-id5400 . -91) (undo-tree-id5401 . -91) (undo-tree-id5402 . -91) (undo-tree-id5403 . -91) (undo-tree-id5404 . -91) (undo-tree-id5405 . -91) (undo-tree-id5406 . -91) (undo-tree-id5407 . -91) (undo-tree-id5408 . -91) (undo-tree-id5409 . -91) (undo-tree-id5410 . -91) (undo-tree-id5411 . -91) (undo-tree-id5412 . -91) (undo-tree-id5413 . -91) (undo-tree-id5414 . -91) (undo-tree-id5415 . -91) (undo-tree-id5416 . -91) (undo-tree-id5417 . -91) (undo-tree-id5418 . -91) (undo-tree-id5419 . -91) (undo-tree-id5420 . -91) (undo-tree-id5421 . -91) (undo-tree-id5422 . -91) (undo-tree-id5423 . -91) (undo-tree-id5424 . -91) (undo-tree-id5425 . -91) (undo-tree-id5426 . -91) (undo-tree-id5427 . -91) (undo-tree-id5428 . -91) (undo-tree-id5429 . -91) (undo-tree-id5430 . -91) (nil fontified t 889 . 890) (nil fontified t 942 . 943) (t 25817 26484 284694 583000)) (25817 26484 250983 0) 0 nil] [nil nil ((nil rear-nonsticky nil 867 . 868) (nil help-echo cider--help-echo 852 . 868) (nil fontified nil 852 . 868) (852 . 868)) ((#("                " 0 15 (cider-locals nil help-echo cider--help-echo fontified nil ws-butler-chg chg) 15 16 (cider-locals nil help-echo cider--help-echo rear-nonsticky nil fontified nil ws-butler-chg chg)) . 852) (undo-tree-id4757 . -16) (nil rear-nonsticky t 867 . 868)) (25817 26481 613233 0) 0 nil])
([nil nil ((nil help-echo cider--help-echo 949 . 950) (nil fontified nil 949 . 950) (nil help-echo cider--help-echo 948 . 949) (nil fontified nil 948 . 949) (nil help-echo cider--help-echo 947 . 948) (nil fontified nil 947 . 948) (nil help-echo cider--help-echo 940 . 947) (nil fontified nil 940 . 947) (nil help-echo cider--help-echo 939 . 940) (nil fontified nil 939 . 940) (nil help-echo cider--help-echo 938 . 939) (nil fontified nil 938 . 939) (nil help-echo cider--help-echo 934 . 938) (nil fontified nil 934 . 938) (nil help-echo cider--help-echo 933 . 934) (nil fontified nil 933 . 934) (nil help-echo cider--help-echo 932 . 933) (nil fontified nil 932 . 933) (nil help-echo cider--help-echo 931 . 932) (nil fontified nil 931 . 932) (nil help-echo cider--help-echo 917 . 931) (nil fontified nil 917 . 931) (nil help-echo cider--help-echo 916 . 917) (nil fontified nil 916 . 917) (nil help-echo cider--help-echo 897 . 916) (nil fontified nil 897 . 916) (nil help-echo cider--help-echo 896 . 897) (nil fontified nil 896 . 897) (nil help-echo cider--help-echo 890 . 896) (nil fontified nil 890 . 896) (nil help-echo cider--help-echo 889 . 890) (nil fontified nil 889 . 890) (nil help-echo cider--help-echo 888 . 889) (nil fontified nil 888 . 889) (nil help-echo cider--help-echo 874 . 888) (nil fontified nil 874 . 888) (nil help-echo cider--help-echo 873 . 874) (nil fontified nil 873 . 874) (nil help-echo cider--help-echo 872 . 873) (nil fontified nil 872 . 873) (nil help-echo cider--help-echo 871 . 872) (nil fontified nil 871 . 872) (nil help-echo cider--help-echo 870 . 871) (nil fontified nil 870 . 871) (nil help-echo cider--help-echo 860 . 870) (nil fontified nil 860 . 870) (nil help-echo cider--help-echo 859 . 860) (nil fontified nil 859 . 860) (859 . 950)) nil (25817 26511 9739 0) 0 nil])
nil
nil
([nil nil ((#("   :directives [{:directive-type :access
                   :directive-args {:role :checker}}]" 0 3 (cider-locals nil fontified t help-echo cider--help-echo) 3 4 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 4 14 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 14 15 (cider-locals nil help-echo cider--help-echo fontified t) 15 16 (face (rainbow-delimiters-depth-4-face) cider-locals nil help-echo cider--help-echo fontified t) 16 17 (face (rainbow-delimiters-depth-5-face) cider-locals nil help-echo cider--help-echo fontified t) 17 18 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 18 32 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 32 33 (cider-locals nil help-echo cider--help-echo fontified t) 33 34 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 34 40 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 40 41 (cider-locals nil help-echo cider--help-echo fontified t) 41 60 (cider-locals nil help-echo cider--help-echo fontified t) 60 61 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 61 75 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 75 76 (cider-locals nil help-echo cider--help-echo fontified t) 76 77 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo fontified t) 77 78 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 78 82 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 82 83 (cider-locals nil help-echo cider--help-echo fontified t) 83 84 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 84 91 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 91 92 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo fontified t) 92 93 (face (rainbow-delimiters-depth-5-face) cider-locals nil help-echo cider--help-echo fontified t) 93 94 (face (rainbow-delimiters-depth-4-face) cider-locals nil help-echo cider--help-echo fontified t rear-nonsticky t)) . 856) (undo-tree-id6163 . -94) (undo-tree-id6164 . -94) (undo-tree-id6165 . -94) (undo-tree-id6166 . -94) (undo-tree-id6167 . -94) (undo-tree-id6168 . -94) (undo-tree-id6169 . -94) (undo-tree-id6170 . -94) (undo-tree-id6171 . -94) (undo-tree-id6172 . -94) (undo-tree-id6173 . -94) (undo-tree-id6174 . -94) (undo-tree-id6175 . -94) (undo-tree-id6176 . -94) (undo-tree-id6177 . -94) (undo-tree-id6178 . -94) (undo-tree-id6179 . -94) (undo-tree-id6180 . -94) (undo-tree-id6181 . -94) (undo-tree-id6182 . -94) (undo-tree-id6183 . -94) (undo-tree-id6184 . -94) (undo-tree-id6185 . -94) (undo-tree-id6186 . -94) (undo-tree-id6187 . -94) (undo-tree-id6188 . -94) (undo-tree-id6189 . -94) (undo-tree-id6190 . -94) (undo-tree-id6191 . -94) (undo-tree-id6192 . -94) (undo-tree-id6193 . -94) (undo-tree-id6194 . -94) (undo-tree-id6195 . -94) (undo-tree-id6196 . -94) (undo-tree-id6197 . -94) (undo-tree-id6198 . -94) (undo-tree-id6199 . -94) (undo-tree-id6200 . -94) (undo-tree-id6201 . -94) (undo-tree-id6202 . -94) (undo-tree-id6203 . -94) (undo-tree-id6204 . -94) (undo-tree-id6205 . -94) (undo-tree-id6206 . -94) (undo-tree-id6207 . -94) (undo-tree-id6208 . -94) (undo-tree-id6209 . -94) (undo-tree-id6210 . -94) (undo-tree-id6211 . -94) (undo-tree-id6212 . -94) (undo-tree-id6213 . -94) (undo-tree-id6214 . -94) (undo-tree-id6215 . -94) (undo-tree-id6216 . -94) (undo-tree-id6217 . -94) (undo-tree-id6218 . -94) (undo-tree-id6219 . -94) (undo-tree-id6220 . -94) (undo-tree-id6221 . -94) (undo-tree-id6222 . -94) (undo-tree-id6223 . -94) (undo-tree-id6224 . -94) (undo-tree-id6225 . -94) (undo-tree-id6226 . -94) (undo-tree-id6227 . -94) (undo-tree-id6228 . -94) (undo-tree-id6229 . -94) (undo-tree-id6230 . -94) (undo-tree-id6231 . -94) (undo-tree-id6232 . -94) (undo-tree-id6233 . -94) (undo-tree-id6234 . -94) (undo-tree-id6235 . -94) (undo-tree-id6236 . -94) (undo-tree-id6237 . -94) (undo-tree-id6238 . -94) (undo-tree-id6239 . -94) (undo-tree-id6240 . -94) (undo-tree-id6241 . -94) (undo-tree-id6242 . -94) (undo-tree-id6243 . -94) (undo-tree-id6244 . -94) (undo-tree-id6245 . -94) (undo-tree-id6246 . -94) (undo-tree-id6247 . -94) (undo-tree-id6248 . -94) (undo-tree-id6249 . -94) (undo-tree-id6250 . -94) (undo-tree-id6251 . -94) (undo-tree-id6252 . -94) (undo-tree-id6253 . -94) (undo-tree-id6254 . -94) (undo-tree-id6255 . -94) (undo-tree-id6256 . -94) (undo-tree-id6257 . -94) (undo-tree-id6258 . -94) (undo-tree-id6259 . -94) (undo-tree-id6260 . -94) (undo-tree-id6261 . -94) (undo-tree-id6262 . -94) (undo-tree-id6263 . -94) (undo-tree-id6264 . -94) (undo-tree-id6265 . -94) (undo-tree-id6266 . -94) (undo-tree-id6267 . -94) (undo-tree-id6268 . -94) (undo-tree-id6269 . -94) (undo-tree-id6270 . -94) (undo-tree-id6271 . -94) (undo-tree-id6272 . -94) (undo-tree-id6273 . -94) (undo-tree-id6274 . -94) (undo-tree-id6275 . -94) (undo-tree-id6276 . -94) (undo-tree-id6277 . -94) (undo-tree-id6278 . -94) (undo-tree-id6279 . -94) (undo-tree-id6280 . -94) (undo-tree-id6281 . -94) (undo-tree-id6282 . -94) (undo-tree-id6283 . -94) (undo-tree-id6284 . -94) (undo-tree-id6285 . -94) (undo-tree-id6286 . -94) (undo-tree-id6287 . -94) (undo-tree-id6288 . -94) (undo-tree-id6289 . -94) (undo-tree-id6290 . -94) (undo-tree-id6291 . -94) (undo-tree-id6292 . -94) (undo-tree-id6293 . -94) (undo-tree-id6294 . -94) (undo-tree-id6295 . -94) (undo-tree-id6296 . -94) (undo-tree-id6297 . -94) (undo-tree-id6298 . -94) (undo-tree-id6299 . -94) (undo-tree-id6300 . -94) (undo-tree-id6301 . -94) (undo-tree-id6302 . -94) (undo-tree-id6303 . -94) (undo-tree-id6304 . -94) (undo-tree-id6305 . -94) (undo-tree-id6306 . -94) (undo-tree-id6307 . -94) (undo-tree-id6308 . -94) (undo-tree-id6309 . -94) (undo-tree-id6310 . -94) (undo-tree-id6311 . -94) (undo-tree-id6312 . -94) (undo-tree-id6313 . -94) (undo-tree-id6314 . -94) (undo-tree-id6315 . -94) (undo-tree-id6316 . -94) (undo-tree-id6317 . -94) (undo-tree-id6318 . -94) (undo-tree-id6319 . -94) (undo-tree-id6320 . -94) (undo-tree-id6321 . -94) (undo-tree-id6322 . -94) (undo-tree-id6323 . -94) (undo-tree-id6324 . -94) (undo-tree-id6325 . -94) (undo-tree-id6326 . -94) (undo-tree-id6327 . -94) (undo-tree-id6328 . -94) (undo-tree-id6329 . -94) (undo-tree-id6330 . -94) (undo-tree-id6331 . -94) (undo-tree-id6332 . -94) (undo-tree-id6333 . -94) (undo-tree-id6334 . -94) (undo-tree-id6335 . -94) (undo-tree-id6336 . -94) (undo-tree-id6337 . -94) (undo-tree-id6338 . -94) (undo-tree-id6339 . -94) (undo-tree-id6340 . -94) (undo-tree-id6341 . -94) (undo-tree-id6342 . -94) (undo-tree-id6343 . -94) (undo-tree-id6344 . -94) (undo-tree-id6345 . -94) (undo-tree-id6346 . -94) (undo-tree-id6347 . -94) (undo-tree-id6348 . -94) (undo-tree-id6349 . -94) (undo-tree-id6350 . -94) (undo-tree-id6351 . -94) (undo-tree-id6352 . -94) (undo-tree-id6353 . -94) (undo-tree-id6354 . -94) (undo-tree-id6355 . -94) (undo-tree-id6356 . -94) (undo-tree-id6357 . -94) (undo-tree-id6358 . -94) (undo-tree-id6359 . -94) (undo-tree-id6360 . -94) (undo-tree-id6361 . -94) (undo-tree-id6362 . -94) (undo-tree-id6363 . -94) (undo-tree-id6364 . -94) (undo-tree-id6365 . -94) (undo-tree-id6366 . -94) (undo-tree-id6367 . -94) (undo-tree-id6368 . -94) (undo-tree-id6369 . -94) (undo-tree-id6370 . -94) (undo-tree-id6371 . -94) (undo-tree-id6372 . -94) (undo-tree-id6373 . -94) (undo-tree-id6374 . -94) (undo-tree-id6375 . -94) (undo-tree-id6376 . -94) (undo-tree-id6377 . -94) (undo-tree-id6378 . -94) (undo-tree-id6379 . -94) (undo-tree-id6380 . -94) (undo-tree-id6381 . -94) (undo-tree-id6382 . -94) (undo-tree-id6383 . -94) (undo-tree-id6384 . -94) (undo-tree-id6385 . -94) (undo-tree-id6386 . -94) (undo-tree-id6387 . -94) (undo-tree-id6388 . -94) (undo-tree-id6389 . -94) (undo-tree-id6390 . -94) (undo-tree-id6391 . -94) (undo-tree-id6392 . -94) (undo-tree-id6393 . -94) (undo-tree-id6394 . -94) (undo-tree-id6395 . -94) (undo-tree-id6396 . -94) (undo-tree-id6397 . -94) (undo-tree-id6398 . -94) (undo-tree-id6399 . -94) (undo-tree-id6400 . -94) (undo-tree-id6401 . -94) (undo-tree-id6402 . -94) (undo-tree-id6403 . -94) (undo-tree-id6404 . -94) (undo-tree-id6405 . -94) (undo-tree-id6406 . -94) (undo-tree-id6407 . -94) (undo-tree-id6408 . -94) (undo-tree-id6409 . -94) (undo-tree-id6410 . -94) (undo-tree-id6411 . -94) (undo-tree-id6412 . -94) (undo-tree-id6413 . -94) (undo-tree-id6414 . -94) (undo-tree-id6415 . -94) (undo-tree-id6416 . -94) (undo-tree-id6417 . -94) (undo-tree-id6418 . -94) (undo-tree-id6419 . -94) (undo-tree-id6420 . -94) (undo-tree-id6421 . -94) (undo-tree-id6422 . -94) (undo-tree-id6423 . -94) (undo-tree-id6424 . -94) (undo-tree-id6425 . -94) (undo-tree-id6426 . -94) (undo-tree-id6427 . -94) (undo-tree-id6428 . -94) (undo-tree-id6429 . -94) (undo-tree-id6430 . -94) (undo-tree-id6431 . -94) (undo-tree-id6432 . -94) (undo-tree-id6433 . -94) (undo-tree-id6434 . -94) (undo-tree-id6435 . -94) (undo-tree-id6436 . -94) (undo-tree-id6437 . -94) (undo-tree-id6438 . -94) (undo-tree-id6439 . -94) (undo-tree-id6440 . -94) (undo-tree-id6441 . -94) (undo-tree-id6442 . -94) (undo-tree-id6443 . -94) (undo-tree-id6444 . -94) (undo-tree-id6445 . -94) (undo-tree-id6446 . -94) (undo-tree-id6447 . -94) (undo-tree-id6448 . -94) (undo-tree-id6449 . -94) (undo-tree-id6450 . -94) (undo-tree-id6451 . -94) (undo-tree-id6452 . -94) (undo-tree-id6453 . -94) (undo-tree-id6454 . -94) (undo-tree-id6455 . -94) (undo-tree-id6456 . -94) (undo-tree-id6457 . -94) (undo-tree-id6458 . -94) (undo-tree-id6459 . -94) (undo-tree-id6460 . -94) (undo-tree-id6461 . -94) (undo-tree-id6462 . -94) (undo-tree-id6463 . -94) (undo-tree-id6464 . -94) (undo-tree-id6465 . -94) (undo-tree-id6466 . -94) (undo-tree-id6467 . -94) (undo-tree-id6468 . -94) (undo-tree-id6469 . -94) (undo-tree-id6470 . -94) (undo-tree-id6471 . -94) (undo-tree-id6472 . -94) (undo-tree-id6473 . -94) (undo-tree-id6474 . -94) (undo-tree-id6475 . -94) (undo-tree-id6476 . -94) (undo-tree-id6477 . -94) (undo-tree-id6478 . -94) (undo-tree-id6479 . -94) (undo-tree-id6480 . -94) (undo-tree-id6481 . -94) (undo-tree-id6482 . -94) (undo-tree-id6483 . -94) (undo-tree-id6484 . -94) (undo-tree-id6485 . -94) (undo-tree-id6486 . -94) (undo-tree-id6487 . -94) (undo-tree-id6488 . -94) (undo-tree-id6489 . -94) (undo-tree-id6490 . -94) (undo-tree-id6491 . -94) (undo-tree-id6492 . -94) (undo-tree-id6493 . -94) (undo-tree-id6494 . -94) (undo-tree-id6495 . -94) (undo-tree-id6496 . -94) (undo-tree-id6497 . -94) (undo-tree-id6498 . -94) (undo-tree-id6499 . -94) (undo-tree-id6500 . -94) (undo-tree-id6501 . -94) (undo-tree-id6502 . -94) (undo-tree-id6503 . -94) (undo-tree-id6504 . -94) (undo-tree-id6505 . -94) (undo-tree-id6506 . -94) (undo-tree-id6507 . -94) (undo-tree-id6508 . -94) (undo-tree-id6509 . -94) (undo-tree-id6510 . -94) (undo-tree-id6511 . -94) (undo-tree-id6512 . -3) (undo-tree-id6513 . -94) (undo-tree-id6514 . -94) (undo-tree-id6515 . -94) (undo-tree-id6516 . -94) (undo-tree-id6517 . -94) (undo-tree-id6518 . -94) (undo-tree-id6519 . -94) (undo-tree-id6520 . -94) (undo-tree-id6521 . -94) (undo-tree-id6522 . -94) (undo-tree-id6523 . -94) (undo-tree-id6524 . -94) (undo-tree-id6525 . -94) (undo-tree-id6526 . -94) (undo-tree-id6527 . -94) (undo-tree-id6528 . -94) (undo-tree-id6529 . -94) (undo-tree-id6530 . -94) (undo-tree-id6531 . -94) (undo-tree-id6532 . -94) (undo-tree-id6533 . -94) (undo-tree-id6534 . -94) (undo-tree-id6535 . -94) (undo-tree-id6536 . -94) (undo-tree-id6537 . -94) (undo-tree-id6538 . -94) (undo-tree-id6539 . -94) (undo-tree-id6540 . -94) (undo-tree-id6541 . -94) (undo-tree-id6542 . -94) (undo-tree-id6543 . -94) (undo-tree-id6544 . -94) (undo-tree-id6545 . -94) (undo-tree-id6546 . -94) (undo-tree-id6547 . -94) (undo-tree-id6548 . -94) (undo-tree-id6549 . -94) (undo-tree-id6550 . -94) (undo-tree-id6551 . -94) (undo-tree-id6552 . -94) (undo-tree-id6553 . -94) (undo-tree-id6554 . -94) (undo-tree-id6555 . -94) (undo-tree-id6556 . -94) (undo-tree-id6557 . -40) (undo-tree-id6558 . -40) (undo-tree-id6559 . -40) (undo-tree-id6560 . -40) (undo-tree-id6561 . -40) (undo-tree-id6562 . -40) (undo-tree-id6563 . -40) (undo-tree-id6564 . -40) (undo-tree-id6565 . -40) (undo-tree-id6566 . -40) (undo-tree-id6567 . -40) (undo-tree-id6568 . -40) (undo-tree-id6569 . -40) (undo-tree-id6570 . -40) (undo-tree-id6571 . -40) (undo-tree-id6572 . -40) (undo-tree-id6573 . -40) (undo-tree-id6574 . -40) (undo-tree-id6575 . -40) (undo-tree-id6576 . -40) (undo-tree-id6577 . -40) (undo-tree-id6578 . -40) (undo-tree-id6579 . -40) (undo-tree-id6580 . -40) (undo-tree-id6581 . -40) (undo-tree-id6582 . -40) (undo-tree-id6583 . -40) (undo-tree-id6584 . -40) (undo-tree-id6585 . -40) (undo-tree-id6586 . -40) (undo-tree-id6587 . -40) (undo-tree-id6588 . -40) (undo-tree-id6589 . -40) (undo-tree-id6590 . -40) (undo-tree-id6591 . -40) (undo-tree-id6592 . -40) (undo-tree-id6593 . -40) (undo-tree-id6594 . -40) (undo-tree-id6595 . -40) (undo-tree-id6596 . -40) (undo-tree-id6597 . -40) (undo-tree-id6598 . -40) (undo-tree-id6599 . -40) (undo-tree-id6600 . -94) (t 25817 26511 43728 461000)) nil (25817 26521 619555 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . -855) (undo-tree-id5445 . -1) (undo-tree-id5446 . -1) (undo-tree-id5447 . -1) (undo-tree-id5448 . -1) (undo-tree-id5449 . -1) (undo-tree-id5450 . -1) (undo-tree-id5451 . -1) (undo-tree-id5452 . -1) (undo-tree-id5453 . -1) (undo-tree-id5454 . -1) (undo-tree-id5455 . -1) (undo-tree-id5456 . -1) (undo-tree-id5457 . -1) (undo-tree-id5458 . -1) (undo-tree-id5459 . -1) (undo-tree-id5460 . -1) (undo-tree-id5461 . -1) (undo-tree-id5462 . -1) (undo-tree-id5463 . -1) (undo-tree-id5464 . -1) (undo-tree-id5465 . -1) (undo-tree-id5466 . -1) (undo-tree-id5467 . -1) (undo-tree-id5468 . -1) (undo-tree-id5469 . -1) (undo-tree-id5470 . -1) (undo-tree-id5471 . -1) (undo-tree-id5472 . -1) (undo-tree-id5473 . -1) (undo-tree-id5474 . -1) (undo-tree-id5475 . -1) (undo-tree-id5476 . -1) (undo-tree-id5477 . -1) (undo-tree-id5478 . -1) (undo-tree-id5479 . -1) (undo-tree-id5480 . -1) (undo-tree-id5481 . -1) (undo-tree-id5482 . -1) (undo-tree-id5483 . -1) (undo-tree-id5484 . -1) (undo-tree-id5485 . -1) (undo-tree-id5486 . -1) (undo-tree-id5487 . -1) (undo-tree-id5488 . -1) (undo-tree-id5489 . -1) (undo-tree-id5490 . -1) (undo-tree-id5491 . -1) (undo-tree-id5492 . -1) (undo-tree-id5493 . -1) (undo-tree-id5494 . -1) (undo-tree-id5495 . -1) (undo-tree-id5496 . -1) (undo-tree-id5497 . -1) (undo-tree-id5498 . -1) (undo-tree-id5499 . -1) (undo-tree-id5500 . -1) (undo-tree-id5501 . -1) (undo-tree-id5502 . -1) (undo-tree-id5503 . -1) (undo-tree-id5504 . -1) (undo-tree-id5505 . -1) (undo-tree-id5506 . -1) (undo-tree-id5507 . -1) (undo-tree-id5508 . -1) (undo-tree-id5509 . -1) (undo-tree-id5510 . -1) (undo-tree-id5511 . -1) (undo-tree-id5512 . -1) (undo-tree-id5513 . -1) (undo-tree-id5514 . -1) (undo-tree-id5515 . -1) (undo-tree-id5516 . -1) (undo-tree-id5517 . -1) (undo-tree-id5518 . -1) (undo-tree-id5519 . -1) (undo-tree-id5520 . -1) (undo-tree-id5521 . -1) (undo-tree-id5522 . -1) (undo-tree-id5523 . -1) (undo-tree-id5524 . -1) (undo-tree-id5525 . -1) (undo-tree-id5526 . -1) (undo-tree-id5527 . -1) (undo-tree-id5528 . -1) (undo-tree-id5529 . -1) (undo-tree-id5530 . -1) (undo-tree-id5531 . -1) (undo-tree-id5532 . -1) (undo-tree-id5533 . -1) (undo-tree-id5534 . -1) (undo-tree-id5535 . -1) (undo-tree-id5536 . -1) (undo-tree-id5537 . -1) (undo-tree-id5538 . -1) (undo-tree-id5539 . -1) (undo-tree-id5540 . -1) (undo-tree-id5541 . -1) (undo-tree-id5542 . -1) (undo-tree-id5543 . -1) (undo-tree-id5544 . -1) (undo-tree-id5545 . -1) (undo-tree-id5546 . -1) (undo-tree-id5547 . -1) (undo-tree-id5548 . -1) (undo-tree-id5549 . -1) (undo-tree-id5550 . -1) (undo-tree-id5551 . -1) (undo-tree-id5552 . -1) (undo-tree-id5553 . -1) (undo-tree-id5554 . -1) (undo-tree-id5555 . -1) (undo-tree-id5556 . -1) (undo-tree-id5557 . -1) (undo-tree-id5558 . -1) (undo-tree-id5559 . -1) (undo-tree-id5560 . -1) (undo-tree-id5561 . -1) (undo-tree-id5562 . -1) (undo-tree-id5563 . -1) (undo-tree-id5564 . -1) (undo-tree-id5565 . -1) (undo-tree-id5566 . -1) (undo-tree-id5567 . -1) (undo-tree-id5568 . -1) (undo-tree-id5569 . -1) (undo-tree-id5570 . -1) (undo-tree-id5571 . -1) (undo-tree-id5572 . -1) (undo-tree-id5573 . -1) (undo-tree-id5574 . -1) (undo-tree-id5575 . -1) (undo-tree-id5576 . -1) (undo-tree-id5577 . -1) (undo-tree-id5578 . -1) (undo-tree-id5579 . -1) (undo-tree-id5580 . -1) (undo-tree-id5581 . -1) (undo-tree-id5582 . -1) (undo-tree-id5583 . -1) (undo-tree-id5584 . -1) (undo-tree-id5585 . -1) (undo-tree-id5586 . -1) (undo-tree-id5587 . -1) (undo-tree-id5588 . -1) (undo-tree-id5589 . -1) (undo-tree-id5590 . -1) (undo-tree-id5591 . -1) (undo-tree-id5592 . -1) (undo-tree-id5593 . -1) (undo-tree-id5594 . -1) (undo-tree-id5595 . -1) (undo-tree-id5596 . -1) (undo-tree-id5597 . -1) (undo-tree-id5598 . -1) (undo-tree-id5599 . -1) (undo-tree-id5600 . -1) (undo-tree-id5601 . -1) (undo-tree-id5602 . -1) (undo-tree-id5603 . -1) (undo-tree-id5604 . -1) (undo-tree-id5605 . -1) (undo-tree-id5606 . -1) (undo-tree-id5607 . -1) (undo-tree-id5608 . -1) (undo-tree-id5609 . -1) (undo-tree-id5610 . -1) (undo-tree-id5611 . -1) (undo-tree-id5612 . -1) (undo-tree-id5613 . -1) (undo-tree-id5614 . -1) (undo-tree-id5615 . -1) (undo-tree-id5616 . -1) (undo-tree-id5617 . -1) (undo-tree-id5618 . -1) (undo-tree-id5619 . -1) (undo-tree-id5620 . -1) (undo-tree-id5621 . -1) (undo-tree-id5622 . -1) (undo-tree-id5623 . -1) (undo-tree-id5624 . -1) (undo-tree-id5625 . -1) (undo-tree-id5626 . -1) (undo-tree-id5627 . -1) (undo-tree-id5628 . -1) (undo-tree-id5629 . -1) (undo-tree-id5630 . -1) (undo-tree-id5631 . -1) (undo-tree-id5632 . -1) (undo-tree-id5633 . -1) (undo-tree-id5634 . -1) (undo-tree-id5635 . -1) (undo-tree-id5636 . -1) (undo-tree-id5637 . -1) (undo-tree-id5638 . -1) (undo-tree-id5639 . -1) (undo-tree-id5640 . -1) (undo-tree-id5641 . -1) (undo-tree-id5642 . -1) (undo-tree-id5643 . -1) (undo-tree-id5644 . -1) (undo-tree-id5645 . -1) (undo-tree-id5646 . -1) (undo-tree-id5647 . -1) (undo-tree-id5648 . -1) (undo-tree-id5649 . -1) (undo-tree-id5650 . -1) (undo-tree-id5651 . -1) (undo-tree-id5652 . -1) (undo-tree-id5653 . -1) (undo-tree-id5654 . -1) (undo-tree-id5655 . -1) (undo-tree-id5656 . -1) (undo-tree-id5657 . -1) (undo-tree-id5658 . -1) (undo-tree-id5659 . -1) (undo-tree-id5660 . -1) (undo-tree-id5661 . -1) (undo-tree-id5662 . -1) (undo-tree-id5663 . -1) (undo-tree-id5664 . -1) (undo-tree-id5665 . -1) (undo-tree-id5666 . -1) (undo-tree-id5667 . -1) (undo-tree-id5668 . -1) (undo-tree-id5669 . -1) (undo-tree-id5670 . -1) (undo-tree-id5671 . -1) (undo-tree-id5672 . -1) (undo-tree-id5673 . -1) (undo-tree-id5674 . -1) (undo-tree-id5675 . -1) (undo-tree-id5676 . -1) (undo-tree-id5677 . -1) (undo-tree-id5678 . -1) (undo-tree-id5679 . -1) (undo-tree-id5680 . -1) (undo-tree-id5681 . -1) (undo-tree-id5682 . -1) (undo-tree-id5683 . -1) (undo-tree-id5684 . -1) (undo-tree-id5685 . -1) (undo-tree-id5686 . -1) (undo-tree-id5687 . -1) (undo-tree-id5688 . -1) (undo-tree-id5689 . -1) (undo-tree-id5690 . -1) (undo-tree-id5691 . -1) (undo-tree-id5692 . -1) (undo-tree-id5693 . -1) (undo-tree-id5694 . -1) (undo-tree-id5695 . -1) (undo-tree-id5696 . -1) (undo-tree-id5697 . -1) (undo-tree-id5698 . -1) (undo-tree-id5699 . -1) (undo-tree-id5700 . -1) (undo-tree-id5701 . -1) (undo-tree-id5702 . -1) (undo-tree-id5703 . -1) (undo-tree-id5704 . -1) (undo-tree-id5705 . -1) (undo-tree-id5706 . -1) (undo-tree-id5707 . -1) (undo-tree-id5708 . -1) (undo-tree-id5709 . -1) (undo-tree-id5710 . -1) (undo-tree-id5711 . -1) (undo-tree-id5712 . -1) (undo-tree-id5713 . -1) (undo-tree-id5714 . -1) (undo-tree-id5715 . -1) (undo-tree-id5716 . -1) (undo-tree-id5717 . -1) (undo-tree-id5718 . -1) (undo-tree-id5719 . -1) (undo-tree-id5720 . -1) (undo-tree-id5721 . -1) (undo-tree-id5722 . -1) (undo-tree-id5723 . -1) (undo-tree-id5724 . -1) (undo-tree-id5725 . -1) (undo-tree-id5726 . -1) (undo-tree-id5727 . -1) (undo-tree-id5728 . -1) (undo-tree-id5729 . -1) (undo-tree-id5730 . -1) (undo-tree-id5731 . -1) (undo-tree-id5732 . -1) (undo-tree-id5733 . -1) (undo-tree-id5734 . -1) (undo-tree-id5735 . -1) (undo-tree-id5736 . -1) (undo-tree-id5737 . -1) (undo-tree-id5738 . -1) (undo-tree-id5739 . -1) (undo-tree-id5740 . -1) (undo-tree-id5741 . -1) (undo-tree-id5742 . -1) (undo-tree-id5743 . -1) (undo-tree-id5744 . -1) (undo-tree-id5745 . -1) (undo-tree-id5746 . -1) (undo-tree-id5747 . -1) (undo-tree-id5748 . -1) (undo-tree-id5749 . -1) (undo-tree-id5750 . -1) (undo-tree-id5751 . -1) (undo-tree-id5752 . -1) (undo-tree-id5753 . -1) (undo-tree-id5754 . -1) (undo-tree-id5755 . -1) (undo-tree-id5756 . -1) (undo-tree-id5757 . -1) (undo-tree-id5758 . -1) (undo-tree-id5759 . -1) (undo-tree-id5760 . -1) (undo-tree-id5761 . -1) (undo-tree-id5762 . -1) (undo-tree-id5763 . -1) (undo-tree-id5764 . -1) (undo-tree-id5765 . -1) (undo-tree-id5766 . -1) (undo-tree-id5767 . -1) (undo-tree-id5768 . -1) (undo-tree-id5769 . -1) (undo-tree-id5770 . -1) (undo-tree-id5771 . -1) (undo-tree-id5772 . -1) (undo-tree-id5773 . -1) (undo-tree-id5774 . -1) (undo-tree-id5775 . -1) (undo-tree-id5776 . -1) (undo-tree-id5777 . -1) (undo-tree-id5778 . -1) (undo-tree-id5779 . -1) (undo-tree-id5780 . -1) (undo-tree-id5781 . -1) (undo-tree-id5782 . -1) (undo-tree-id5783 . -1) (undo-tree-id5784 . -1) (undo-tree-id5785 . -1) (undo-tree-id5786 . -1) (undo-tree-id5787 . -1) (undo-tree-id5788 . -1) (undo-tree-id5789 . -1) (undo-tree-id5790 . -1) (undo-tree-id5791 . -1) (undo-tree-id5792 . -1) (undo-tree-id5793 . -1) (undo-tree-id5794 . -1) (undo-tree-id5795 . -1) (undo-tree-id5796 . -1) (undo-tree-id5797 . -1) (undo-tree-id5798 . -1) (undo-tree-id5799 . -1) (undo-tree-id5800 . -1) (undo-tree-id5801 . -1) (undo-tree-id5802 . -1) (undo-tree-id5803 . -1) (undo-tree-id5804 . -1) (undo-tree-id5805 . -1) (undo-tree-id5806 . -1) (undo-tree-id5807 . -1) (undo-tree-id5808 . -1) (undo-tree-id5809 . -1) (undo-tree-id5810 . -1) (undo-tree-id5811 . -1) (undo-tree-id5812 . -1) (undo-tree-id5813 . -1) (undo-tree-id5814 . -1) (undo-tree-id5815 . -1) (undo-tree-id5816 . -1) (undo-tree-id5817 . -1) (undo-tree-id5818 . -1) (undo-tree-id5819 . -1) (undo-tree-id5820 . -1) (undo-tree-id5821 . -1) (undo-tree-id5822 . -1) (undo-tree-id5823 . -1) (undo-tree-id5824 . -1) (undo-tree-id5825 . -1) (undo-tree-id5826 . -1) (undo-tree-id5827 . -1) (undo-tree-id5828 . -1) (undo-tree-id5829 . -1) (undo-tree-id5830 . -1) (undo-tree-id5831 . -1) (undo-tree-id5832 . -1) (undo-tree-id5833 . -1) (undo-tree-id5834 . -1) (undo-tree-id5835 . -1) (undo-tree-id5836 . -1) (undo-tree-id5837 . -1) (undo-tree-id5838 . -1) (undo-tree-id5839 . -1) (undo-tree-id5840 . -1) (undo-tree-id5841 . -1) (undo-tree-id5842 . -1) (undo-tree-id5843 . -1) (undo-tree-id5844 . -1) (undo-tree-id5845 . -1) (undo-tree-id5846 . -1) (undo-tree-id5847 . -1) (undo-tree-id5848 . -1) (undo-tree-id5849 . -1) (undo-tree-id5850 . -1) (undo-tree-id5851 . -1) (undo-tree-id5852 . -1) (undo-tree-id5853 . -1) (undo-tree-id5854 . -1) (undo-tree-id5855 . -1) (undo-tree-id5856 . -1) (undo-tree-id5857 . -1) (undo-tree-id5858 . -1) (undo-tree-id5859 . -1) (undo-tree-id5860 . -1) (undo-tree-id5861 . -1) (undo-tree-id5862 . -1) (undo-tree-id5863 . -1) (undo-tree-id5864 . -1) (undo-tree-id5865 . -1) (undo-tree-id5866 . -1) (undo-tree-id5867 . -1) (undo-tree-id5868 . -1) (undo-tree-id5869 . -1) (undo-tree-id5870 . -1) (undo-tree-id5871 . -1) (undo-tree-id5872 . -1) (undo-tree-id5873 . -1) (undo-tree-id5874 . -1) (undo-tree-id5875 . -1) (undo-tree-id5876 . -1) (undo-tree-id5877 . -1) (undo-tree-id5878 . -1) (undo-tree-id5879 . -1) (undo-tree-id5880 . -1) (undo-tree-id5881 . -1) (undo-tree-id5882 . -1) (undo-tree-id5883 . -1) (undo-tree-id5884 . -1) (undo-tree-id5885 . -1) (undo-tree-id5886 . -1) (undo-tree-id5887 . -1) (undo-tree-id5888 . -1) (undo-tree-id5889 . -1) (undo-tree-id5890 . -1) (undo-tree-id5891 . -1) (undo-tree-id5892 . -1) (undo-tree-id5893 . -1) (undo-tree-id5894 . -1) (undo-tree-id5895 . -1) (undo-tree-id5896 . -1) (undo-tree-id5897 . -1) (undo-tree-id5898 . -1) (undo-tree-id5899 . -1) (undo-tree-id5900 . -1) (undo-tree-id5901 . -1) (undo-tree-id5902 . -1) (undo-tree-id5903 . -1) (undo-tree-id5904 . -1) (undo-tree-id5905 . -1) (undo-tree-id5906 . -1) (undo-tree-id5907 . -1) (undo-tree-id5908 . -1) (undo-tree-id5909 . -1) (undo-tree-id5910 . -1) (undo-tree-id5911 . -1) (undo-tree-id5912 . -1) (undo-tree-id5913 . -1) (undo-tree-id5914 . -1) (undo-tree-id5915 . -1) (undo-tree-id5916 . -1) (undo-tree-id5917 . -1) (undo-tree-id5918 . -1) (undo-tree-id5919 . -1) (undo-tree-id5920 . -1) (undo-tree-id5921 . -1) (undo-tree-id5922 . -1) (undo-tree-id5923 . -1) (undo-tree-id5924 . -1) (undo-tree-id5925 . -1) (undo-tree-id5926 . -1) (undo-tree-id5927 . -1) (undo-tree-id5928 . -1) (undo-tree-id5929 . -1) (undo-tree-id5930 . -1) (undo-tree-id5931 . -1) (undo-tree-id5932 . -1) (undo-tree-id5933 . -1) (undo-tree-id5934 . -1) (undo-tree-id5935 . -1) (undo-tree-id5936 . -1) (undo-tree-id5937 . -1) (undo-tree-id5938 . -1) (undo-tree-id5939 . -1) (undo-tree-id5940 . -1) (undo-tree-id5941 . -1) (undo-tree-id5942 . -1) (undo-tree-id5943 . -1) (undo-tree-id5944 . -1) (undo-tree-id5945 . -1) (undo-tree-id5946 . -1) (undo-tree-id5947 . -1) (undo-tree-id5948 . -1) (undo-tree-id5949 . -1) (undo-tree-id5950 . -1) (undo-tree-id5951 . -1) (undo-tree-id5952 . -1) (undo-tree-id5953 . -1) (undo-tree-id5954 . -1) (undo-tree-id5955 . -1) (undo-tree-id5956 . -1) (undo-tree-id5957 . -1) (undo-tree-id5958 . -1) (undo-tree-id5959 . -1) (undo-tree-id5960 . -1) (undo-tree-id5961 . -1) (undo-tree-id5962 . -1) (undo-tree-id5963 . -1) (undo-tree-id5964 . -1) (undo-tree-id5965 . -1) (undo-tree-id5966 . -1) (undo-tree-id5967 . -1) (undo-tree-id5968 . -1) (undo-tree-id5969 . -1) (undo-tree-id5970 . -1) (undo-tree-id5971 . -1) (undo-tree-id5972 . -1) (undo-tree-id5973 . -1) (undo-tree-id5974 . -1) (undo-tree-id5975 . -1) (undo-tree-id5976 . -1) (undo-tree-id5977 . -1) (undo-tree-id5978 . -1) (undo-tree-id5979 . -1) (undo-tree-id5980 . -1) (undo-tree-id5981 . -1) (undo-tree-id5982 . -1) (undo-tree-id5983 . -1) (undo-tree-id5984 . -1) (undo-tree-id5985 . -1) (undo-tree-id5986 . -1) (undo-tree-id5987 . -1) (undo-tree-id5988 . -1) (undo-tree-id5989 . -1) (undo-tree-id5990 . -1) (undo-tree-id5991 . -1) (undo-tree-id5992 . -1) (undo-tree-id5993 . -1) (undo-tree-id5994 . -1) (undo-tree-id5995 . -1) (undo-tree-id5996 . -1) (undo-tree-id5997 . -1) (undo-tree-id5998 . -1) (undo-tree-id5999 . -1) (undo-tree-id6000 . -1) (undo-tree-id6001 . -1) (undo-tree-id6002 . -1) (undo-tree-id6003 . -1) (undo-tree-id6004 . -1) (undo-tree-id6005 . -1) (undo-tree-id6006 . -1) (undo-tree-id6007 . -1) (undo-tree-id6008 . -1) (undo-tree-id6009 . -1) (undo-tree-id6010 . -1) (undo-tree-id6011 . -1) (undo-tree-id6012 . -1) (undo-tree-id6013 . -1) (undo-tree-id6014 . -1) (undo-tree-id6015 . -1) (undo-tree-id6016 . -1) (undo-tree-id6017 . -1) (undo-tree-id6018 . -1) (undo-tree-id6019 . -1) (undo-tree-id6020 . -1) (undo-tree-id6021 . -1) (undo-tree-id6022 . -1) (undo-tree-id6023 . -1) (undo-tree-id6024 . -1) (undo-tree-id6025 . -1) (undo-tree-id6026 . -1) (undo-tree-id6027 . -1) (undo-tree-id6028 . -1) (undo-tree-id6029 . -1) (undo-tree-id6030 . -1) (undo-tree-id6031 . -1) (undo-tree-id6032 . -1) (undo-tree-id6033 . -1) (undo-tree-id6034 . -1) (undo-tree-id6035 . -1) (undo-tree-id6036 . -1) (undo-tree-id6037 . -1) (undo-tree-id6038 . -1) (undo-tree-id6039 . -1) (undo-tree-id6040 . -1) (undo-tree-id6041 . -1) (undo-tree-id6042 . -1) (undo-tree-id6043 . -1) (undo-tree-id6044 . -1) (undo-tree-id6045 . -1) (undo-tree-id6046 . -1) (undo-tree-id6047 . -1) (undo-tree-id6048 . -1) (undo-tree-id6049 . -1) (undo-tree-id6050 . -1) (undo-tree-id6051 . -1) (undo-tree-id6052 . -1) (undo-tree-id6053 . -1) (undo-tree-id6054 . -1) (undo-tree-id6055 . -1) (undo-tree-id6056 . -1) (undo-tree-id6057 . -1) (undo-tree-id6058 . -1) (undo-tree-id6059 . -1) (undo-tree-id6060 . -1) (undo-tree-id6061 . -1) (undo-tree-id6062 . -1) (undo-tree-id6063 . -1) (undo-tree-id6064 . -1) (undo-tree-id6065 . -1) (undo-tree-id6066 . -1) (undo-tree-id6067 . -1) (undo-tree-id6068 . -1) (undo-tree-id6069 . -1) (undo-tree-id6070 . -1) (undo-tree-id6071 . -1) (undo-tree-id6072 . -1) (undo-tree-id6073 . -1) (undo-tree-id6074 . -1) (undo-tree-id6075 . -1) (undo-tree-id6076 . -1) (undo-tree-id6077 . -1) (undo-tree-id6078 . -1) (undo-tree-id6079 . -1) (undo-tree-id6080 . -1) (undo-tree-id6081 . -1) (undo-tree-id6082 . -1) (undo-tree-id6083 . -1) (undo-tree-id6084 . -1) (undo-tree-id6085 . -1) (undo-tree-id6086 . -1) (undo-tree-id6087 . -1) (undo-tree-id6088 . -1) (undo-tree-id6089 . -1) (undo-tree-id6090 . -1) (undo-tree-id6091 . -1) (undo-tree-id6092 . -1) (undo-tree-id6093 . -1) (undo-tree-id6094 . -1) (undo-tree-id6095 . -1) (undo-tree-id6096 . -1) (undo-tree-id6097 . -1) (undo-tree-id6098 . -1) (undo-tree-id6099 . -1) (undo-tree-id6100 . -1) (undo-tree-id6101 . -1) (undo-tree-id6102 . -1) (undo-tree-id6103 . -1) (undo-tree-id6104 . -1) (undo-tree-id6105 . -1) (undo-tree-id6106 . -1) (undo-tree-id6107 . -1) (undo-tree-id6108 . -1) (undo-tree-id6109 . -1) (undo-tree-id6110 . -1) (undo-tree-id6111 . -1) (undo-tree-id6112 . -1) (undo-tree-id6113 . -1) (undo-tree-id6114 . -1) (undo-tree-id6115 . -1) (undo-tree-id6116 . -1) (undo-tree-id6117 . -1) (undo-tree-id6118 . -1) (undo-tree-id6119 . -1) (undo-tree-id6120 . -1) (undo-tree-id6121 . -1) (undo-tree-id6122 . -1) (undo-tree-id6123 . -1) (undo-tree-id6124 . -1) (undo-tree-id6125 . -1) (undo-tree-id6126 . -1) (undo-tree-id6127 . -1) (undo-tree-id6128 . -1) (undo-tree-id6129 . -1) (undo-tree-id6130 . -1) (undo-tree-id6131 . -1) (undo-tree-id6132 . -1) (undo-tree-id6133 . -1) (undo-tree-id6134 . -1) (undo-tree-id6135 . -1) (undo-tree-id6136 . -1) (undo-tree-id6137 . -1) (undo-tree-id6138 . -1) (undo-tree-id6139 . -1) (undo-tree-id6140 . -1) (undo-tree-id6141 . -1) (undo-tree-id6142 . -1) (undo-tree-id6143 . -1) (undo-tree-id6144 . -1) (undo-tree-id6145 . -1) (undo-tree-id6146 . -1) (undo-tree-id6147 . -1) (undo-tree-id6148 . -1) (undo-tree-id6149 . -1) (undo-tree-id6150 . -1) (undo-tree-id6151 . -1) (undo-tree-id6152 . -1) (undo-tree-id6153 . -1) (undo-tree-id6154 . -1) (undo-tree-id6155 . -1) (undo-tree-id6156 . -1) (undo-tree-id6157 . -1) (undo-tree-id6158 . -1) (undo-tree-id6159 . -1) (undo-tree-id6160 . -1) (undo-tree-id6161 . -1) (undo-tree-id6162 . -1) 856) nil (25817 26544 216709 0) 0 nil])
([nil nil ((795 . 807) (t 25817 26544 851576 686000)) nil (25817 30688 204588 0) 0 nil] [nil nil ((807 . 810) (t 25817 26521 654306 404000)) ((#("
  " 0 1 (cider-locals nil fontified t help-echo cider--help-echo) 1 3 (cider-locals nil fontified t help-echo cider--help-echo)) . 807) (undo-tree-id6712 . -3) (undo-tree-id6713 . -3) (undo-tree-id6714 . -3) (undo-tree-id6715 . -3) (undo-tree-id6716 . -3) (undo-tree-id6717 . -3) (undo-tree-id6718 . -3) (undo-tree-id6719 . -3) (undo-tree-id6720 . -3) (undo-tree-id6721 . -3) (undo-tree-id6722 . -3) (undo-tree-id6723 . -3) (undo-tree-id6724 . -3) (undo-tree-id6725 . -3) (undo-tree-id6726 . -3) (undo-tree-id6727 . -3) (undo-tree-id6728 . -3) (undo-tree-id6729 . -3) (undo-tree-id6730 . -3) (undo-tree-id6731 . -3) (undo-tree-id6732 . -3) (undo-tree-id6733 . -3) (undo-tree-id6734 . -3) (undo-tree-id6735 . -3) (undo-tree-id6736 . -3) (undo-tree-id6737 . -3) (undo-tree-id6738 . -3) (undo-tree-id6739 . -3) (undo-tree-id6740 . -3) (undo-tree-id6741 . -3) (undo-tree-id6742 . -3) (undo-tree-id6743 . -3) (undo-tree-id6744 . -3) (undo-tree-id6745 . -3) (undo-tree-id6746 . -3) (undo-tree-id6747 . -3) (undo-tree-id6748 . -3) (undo-tree-id6749 . -3) (undo-tree-id6750 . -3) (undo-tree-id6751 . -3) (undo-tree-id6752 . -3) (undo-tree-id6753 . -3) (undo-tree-id6754 . -3) (undo-tree-id6755 . -3) (undo-tree-id6756 . -3) (undo-tree-id6757 . -3) (undo-tree-id6758 . -3) (undo-tree-id6759 . -3) (undo-tree-id6760 . -3) (undo-tree-id6761 . -3) (undo-tree-id6762 . -3) (undo-tree-id6763 . -3) (undo-tree-id6764 . -3) (undo-tree-id6765 . -3) (undo-tree-id6766 . -3) (undo-tree-id6767 . -3) (undo-tree-id6768 . -3) (undo-tree-id6769 . -3) (undo-tree-id6770 . -3) (undo-tree-id6771 . -3) (undo-tree-id6772 . -3) (undo-tree-id6773 . -3) (undo-tree-id6774 . -3) (undo-tree-id6775 . -3) (undo-tree-id6776 . -3) (undo-tree-id6777 . -3) (undo-tree-id6778 . -3) (undo-tree-id6779 . -3) (undo-tree-id6780 . -3) (undo-tree-id6781 . -3) (undo-tree-id6782 . -3) (undo-tree-id6783 . -3) (undo-tree-id6784 . -3) (undo-tree-id6785 . -3) (undo-tree-id6786 . -3) (undo-tree-id6787 . -3) (undo-tree-id6788 . -3) (undo-tree-id6789 . -3) (undo-tree-id6790 . -3) (undo-tree-id6791 . -3) (undo-tree-id6792 . -3) (undo-tree-id6793 . -3) (undo-tree-id6794 . -3) (undo-tree-id6795 . -3) (undo-tree-id6796 . -3) (undo-tree-id6797 . -3) (undo-tree-id6798 . -3) (undo-tree-id6799 . -3) (undo-tree-id6800 . -3) (undo-tree-id6801 . -3) (undo-tree-id6802 . -3) (undo-tree-id6803 . -3) (undo-tree-id6804 . -3) (undo-tree-id6805 . -3) (undo-tree-id6806 . -3) (undo-tree-id6807 . -3) (undo-tree-id6808 . -3) (undo-tree-id6809 . -3) (undo-tree-id6810 . -3) (undo-tree-id6811 . -3) (undo-tree-id6812 . -3) (undo-tree-id6813 . -3) (undo-tree-id6814 . -3) (undo-tree-id6815 . -3) (undo-tree-id6816 . -3) (undo-tree-id6817 . -3) (undo-tree-id6818 . -3) (undo-tree-id6819 . -3) (undo-tree-id6820 . -3) (undo-tree-id6821 . -3) (undo-tree-id6822 . -1) (undo-tree-id6823 . -3) (undo-tree-id6824 . -3) (undo-tree-id6825 . -3) (undo-tree-id6826 . -3) (undo-tree-id6827 . -3) (undo-tree-id6828 . -3) (undo-tree-id6829 . -3) (undo-tree-id6830 . -3) (undo-tree-id6831 . -3) (undo-tree-id6832 . -3) (undo-tree-id6833 . -3) (undo-tree-id6834 . -3) (undo-tree-id6835 . -3) (undo-tree-id6836 . -3) (undo-tree-id6837 . -3) (undo-tree-id6838 . -3) (undo-tree-id6839 . -3) (undo-tree-id6840 . -3) (undo-tree-id6841 . -3) (undo-tree-id6842 . -3) (undo-tree-id6843 . -3) (undo-tree-id6844 . -3) (undo-tree-id6845 . -3) (undo-tree-id6846 . -3) (undo-tree-id6847 . -3) (undo-tree-id6848 . -3) (undo-tree-id6849 . -3) (undo-tree-id6850 . -3) (undo-tree-id6851 . -3) (undo-tree-id6852 . -3) (undo-tree-id6853 . -3) (undo-tree-id6854 . -3) (undo-tree-id6855 . -3) (undo-tree-id6856 . -3) (undo-tree-id6857 . -3) (undo-tree-id6858 . -3) (undo-tree-id6859 . -3) (undo-tree-id6860 . -3) (undo-tree-id6861 . -3) (undo-tree-id6862 . -3) (undo-tree-id6863 . -3) (undo-tree-id6864 . -3) (undo-tree-id6865 . -3) (undo-tree-id6866 . -3) (undo-tree-id6867 . -3) (undo-tree-id6868 . -3) (undo-tree-id6869 . -3) (undo-tree-id6870 . -3) (undo-tree-id6871 . -3) (undo-tree-id6872 . -3) (undo-tree-id6873 . -3) (undo-tree-id6874 . -3)) (25817 26543 718099 0) 0 nil])
([nil nil ((nil help-echo cider--help-echo 900 . 901) (nil fontified nil 900 . 901) (nil help-echo cider--help-echo 899 . 900) (nil fontified nil 899 . 900) (nil help-echo cider--help-echo 898 . 899) (nil fontified nil 898 . 899) (nil help-echo cider--help-echo 891 . 898) (nil fontified nil 891 . 898) (nil help-echo cider--help-echo 890 . 891) (nil fontified nil 890 . 891) (nil help-echo cider--help-echo 889 . 890) (nil fontified nil 889 . 890) (nil help-echo cider--help-echo 885 . 889) (nil fontified nil 885 . 889) (nil help-echo cider--help-echo 884 . 885) (nil fontified nil 884 . 885) (nil help-echo cider--help-echo 883 . 884) (nil fontified nil 883 . 884) (nil help-echo cider--help-echo 882 . 883) (nil fontified nil 882 . 883) (nil help-echo cider--help-echo 868 . 882) (nil fontified nil 868 . 882) (nil help-echo cider--help-echo 867 . 868) (nil fontified nil 867 . 868) (nil help-echo cider--help-echo 848 . 867) (nil fontified nil 848 . 867) (nil help-echo cider--help-echo 847 . 848) (nil fontified nil 847 . 848) (nil help-echo cider--help-echo 841 . 847) (nil fontified nil 841 . 847) (nil help-echo cider--help-echo 840 . 841) (nil fontified nil 840 . 841) (nil help-echo cider--help-echo 839 . 840) (nil fontified nil 839 . 840) (nil help-echo cider--help-echo 825 . 839) (nil fontified nil 825 . 839) (nil help-echo cider--help-echo 824 . 825) (nil fontified nil 824 . 825) (nil help-echo cider--help-echo 823 . 824) (nil fontified nil 823 . 824) (nil help-echo cider--help-echo 822 . 823) (nil fontified nil 822 . 823) (nil help-echo cider--help-echo 821 . 822) (nil fontified nil 821 . 822) (nil help-echo cider--help-echo 811 . 821) (nil fontified nil 811 . 821) (nil help-echo cider--help-echo 810 . 811) (nil fontified nil 810 . 811) (nil help-echo cider--help-echo 807 . 810) (nil fontified nil 807 . 810) (807 . 901)) nil (25817 30688 204585 0) 0 nil])
([nil nil ((nil help-echo cider--help-echo 903 . 904) (nil fontified nil 903 . 904) (nil help-echo cider--help-echo 902 . 903) (nil fontified nil 902 . 903) (nil help-echo cider--help-echo 901 . 902) (nil fontified nil 901 . 902) (nil help-echo cider--help-echo 894 . 901) (nil fontified nil 894 . 901) (nil help-echo cider--help-echo 893 . 894) (nil fontified nil 893 . 894) (nil help-echo cider--help-echo 892 . 893) (nil fontified nil 892 . 893) (nil help-echo cider--help-echo 888 . 892) (nil fontified nil 888 . 892) (nil help-echo cider--help-echo 887 . 888) (nil fontified nil 887 . 888) (nil help-echo cider--help-echo 886 . 887) (nil fontified nil 886 . 887) (nil help-echo cider--help-echo 885 . 886) (nil fontified nil 885 . 886) (nil help-echo cider--help-echo 871 . 885) (nil fontified nil 871 . 885) (nil help-echo cider--help-echo 870 . 871) (nil fontified nil 870 . 871) (nil help-echo cider--help-echo 851 . 870) (nil fontified nil 851 . 870) (nil help-echo cider--help-echo 850 . 851) (nil fontified nil 850 . 851) (nil help-echo cider--help-echo 844 . 850) (nil fontified nil 844 . 850) (nil help-echo cider--help-echo 843 . 844) (nil fontified nil 843 . 844) (nil help-echo cider--help-echo 842 . 843) (nil fontified nil 842 . 843) (nil help-echo cider--help-echo 828 . 842) (nil fontified nil 828 . 842) (nil help-echo cider--help-echo 827 . 828) (nil fontified nil 827 . 828) (nil help-echo cider--help-echo 826 . 827) (nil fontified nil 826 . 827) (nil help-echo cider--help-echo 825 . 826) (nil fontified nil 825 . 826) (nil help-echo cider--help-echo 824 . 825) (nil fontified nil 824 . 825) (nil help-echo cider--help-echo 814 . 824) (nil fontified nil 814 . 824) (nil help-echo cider--help-echo 813 . 814) (nil fontified nil 813 . 814) (nil help-echo cider--help-echo 810 . 813) (nil fontified nil 810 . 813) (810 . 904)) ((#("   :directives [{:directive-type :access
                   :directive-args {:role :checker}}]" 0 3 (cider-locals nil help-echo cider--help-echo fontified nil) 3 4 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 4 14 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 14 15 (cider-locals nil help-echo cider--help-echo fontified nil) 15 16 (face (rainbow-delimiters-depth-3-face) cider-locals nil help-echo cider--help-echo fontified nil) 16 17 (face (rainbow-delimiters-depth-4-face) cider-locals nil help-echo cider--help-echo fontified nil) 17 18 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 18 32 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 32 33 (cider-locals nil help-echo cider--help-echo fontified nil) 33 34 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 34 40 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 40 41 (cider-locals nil help-echo cider--help-echo fontified nil) 41 60 (cider-locals nil fontified nil help-echo cider--help-echo) 60 61 (face clojure-keyword-face cider-locals nil fontified nil help-echo cider--help-echo) 61 75 (face clojure-keyword-face cider-locals nil fontified nil help-echo cider--help-echo) 75 76 (cider-locals nil fontified nil help-echo cider--help-echo) 76 77 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified nil help-echo cider--help-echo) 77 78 (face clojure-keyword-face cider-locals nil fontified nil help-echo cider--help-echo) 78 82 (face clojure-keyword-face cider-locals nil fontified nil help-echo cider--help-echo) 82 83 (cider-locals nil fontified nil help-echo cider--help-echo) 83 84 (face clojure-keyword-face cider-locals nil fontified nil help-echo cider--help-echo) 84 91 (face clojure-keyword-face cider-locals nil fontified nil help-echo cider--help-echo) 91 92 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified nil help-echo cider--help-echo) 92 93 (face (rainbow-delimiters-depth-4-face) cider-locals nil fontified nil help-echo cider--help-echo) 93 94 (face (rainbow-delimiters-depth-3-face) cider-locals nil fontified nil help-echo cider--help-echo rear-nonsticky t)) . 810) (undo-tree-id6601 . -40) (undo-tree-id6602 . -40) (undo-tree-id6603 . -40) (undo-tree-id6604 . -40) (undo-tree-id6605 . -40) (undo-tree-id6606 . -40) (undo-tree-id6607 . -40) (undo-tree-id6608 . -40) (undo-tree-id6609 . -40) (undo-tree-id6610 . -40) (undo-tree-id6611 . -40) (undo-tree-id6612 . -40) (undo-tree-id6613 . -40) (undo-tree-id6614 . -40) (undo-tree-id6615 . -40) (undo-tree-id6616 . -40) (undo-tree-id6617 . -40) (undo-tree-id6618 . -40) (undo-tree-id6619 . -40) (undo-tree-id6620 . -40) (undo-tree-id6621 . -40) (undo-tree-id6622 . -40) (undo-tree-id6623 . -40) (undo-tree-id6624 . -40) (undo-tree-id6625 . -40) (undo-tree-id6626 . -40) (undo-tree-id6627 . -40) (undo-tree-id6628 . -40) (undo-tree-id6629 . -40) (undo-tree-id6630 . -40) (undo-tree-id6631 . -40) (undo-tree-id6632 . -40) (undo-tree-id6633 . -40) (undo-tree-id6634 . -40) (undo-tree-id6635 . -40) (undo-tree-id6636 . -40) (undo-tree-id6637 . -40) (undo-tree-id6638 . -40) (undo-tree-id6639 . -40) (undo-tree-id6640 . -40) (undo-tree-id6641 . -40) (undo-tree-id6642 . -40) (undo-tree-id6643 . -40) (undo-tree-id6644 . -40) (undo-tree-id6645 . -40) (undo-tree-id6646 . -40) (undo-tree-id6647 . -40) (undo-tree-id6648 . -40) (undo-tree-id6649 . -40) (undo-tree-id6650 . -40) (undo-tree-id6651 . -40) (undo-tree-id6652 . -40) (undo-tree-id6653 . -40) (undo-tree-id6654 . -40) (undo-tree-id6655 . -40) (undo-tree-id6656 . -40) (undo-tree-id6657 . -40) (undo-tree-id6658 . -40) (undo-tree-id6659 . -40) (undo-tree-id6660 . -40) (undo-tree-id6661 . -40) (undo-tree-id6662 . -40) (undo-tree-id6663 . -40) (undo-tree-id6664 . -40) (undo-tree-id6665 . -40) (undo-tree-id6666 . -40) (undo-tree-id6667 . -40) (undo-tree-id6668 . -40) (undo-tree-id6669 . -40) (undo-tree-id6670 . -40) (undo-tree-id6671 . -40) (undo-tree-id6672 . -40) (undo-tree-id6673 . -40) (undo-tree-id6674 . -40) (undo-tree-id6675 . -40) (undo-tree-id6676 . -40) (undo-tree-id6677 . -40) (undo-tree-id6678 . -40) (undo-tree-id6679 . -40) (undo-tree-id6680 . -40) (undo-tree-id6681 . -40) (undo-tree-id6682 . -40) (undo-tree-id6683 . -40) (undo-tree-id6684 . -40) (undo-tree-id6685 . -40) (undo-tree-id6686 . -40) (undo-tree-id6687 . -40) (undo-tree-id6688 . -40) (undo-tree-id6689 . -40) (undo-tree-id6690 . -40) (undo-tree-id6691 . -40) (undo-tree-id6692 . -40) (undo-tree-id6693 . -40) (undo-tree-id6694 . -40) (undo-tree-id6695 . -40) (undo-tree-id6696 . -40) (undo-tree-id6697 . -40) (undo-tree-id6698 . -40) (undo-tree-id6699 . -40) (undo-tree-id6700 . -40) (undo-tree-id6701 . -40) (undo-tree-id6702 . -40) (undo-tree-id6703 . -40) (undo-tree-id6704 . -40) (undo-tree-id6705 . -40) (undo-tree-id6706 . -40) (undo-tree-id6707 . -40) (undo-tree-id6708 . -40) (undo-tree-id6709 . -40) (undo-tree-id6710 . -40) (undo-tree-id6711 . -40) (nil fontified t 850 . 851) (nil fontified t 903 . 904)) (25817 26543 229097 0) 0 nil])
([nil nil ((848 . 876) (#("                   " 0 19 (cider-locals nil help-echo cider--help-echo fontified t ws-butler-chg chg)) . 848) 901) nil (25817 30688 204569 0) 0 nil])
([nil nil ((#("   " 0 3 (cider-locals nil help-echo cider--help-echo fontified t)) . -810) 850 (t 25817 26528 580037 550000)) ((810 . 813) (t 25817 26530 256240 96000)) (25817 26530 221022 0) 0 nil])
([nil nil ((apply -18 796 932 undo--wrap-and-run-primitive-undo 796 932 ((865 . 868) (810 . 813) (910 . 922) 796))) nil (25817 31033 619037 0) 0 nil])
nil
([nil nil ((apply 6 796 910 undo--wrap-and-run-primitive-undo 796 910 ((#(";; " 0 3 (face font-lock-comment-delimiter-face cider-locals nil help-echo cider--help-echo fontified t)) . -862) (#(";; " 0 3 (face font-lock-comment-delimiter-face cider-locals nil help-echo cider--help-echo fontified t)) . -810) 916))) nil (25817 31400 190953 0) 0 nil])
([nil nil ((#("whatever" 0 8 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t)) . 470) (undo-tree-id127 . -8) (t 25817 31400 226439 80000)) nil (25830 22170 150736 0) 0 nil])
([nil nil ((470 . 474)) nil (25830 22170 150733 0) 0 nil])
([nil nil ((#("u" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -471) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#("s" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -472) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#("t" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -473) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) 474) nil (25830 22170 150725 0) 0 nil])
([nil nil ((471 . 475)) nil (25830 22170 150562 0) 0 nil])
([nil nil ((#("checker" 0 7 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo)) . -897) (undo-tree-id128 . -7) 904 (t 25830 22170 193636 898000)) nil (25830 22180 154033 0) 0 nil])
([nil nil ((897 . 905)) nil (25830 22180 154019 0) 0 nil])
([nil nil ((#("tester" 0 6 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo)) . -1105) (undo-tree-id129 . -6) 1111 (t 25830 22180 194806 635000)) nil (25830 26951 815820 0) 0 nil])
([nil nil ((1105 . 1113)) nil (25830 26951 815806 0) 0 nil])
([nil nil ((#("checker" 0 7 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo)) . -1883) (undo-tree-id130 . -7) (undo-tree-id131 . -7) (undo-tree-id132 . -7) (undo-tree-id133 . -7) (undo-tree-id134 . -7) (undo-tree-id135 . -7) (undo-tree-id136 . -7) (undo-tree-id137 . -7) (undo-tree-id138 . -7) (undo-tree-id139 . -7) (undo-tree-id140 . -7) (undo-tree-id141 . -7) (undo-tree-id142 . -7) (undo-tree-id143 . -7) (undo-tree-id144 . -7) (undo-tree-id145 . -7) (undo-tree-id146 . -7) (undo-tree-id147 . -7) (undo-tree-id148 . -7) (undo-tree-id149 . -7) (undo-tree-id150 . -7) (undo-tree-id151 . -7) (undo-tree-id152 . -7) (undo-tree-id153 . -7) (undo-tree-id154 . -7) (undo-tree-id155 . -7) (undo-tree-id156 . -7) (undo-tree-id157 . -7) (undo-tree-id158 . -7) (undo-tree-id159 . -7) (undo-tree-id160 . -7) (undo-tree-id161 . -7) (undo-tree-id162 . -7) (undo-tree-id163 . -7) (undo-tree-id164 . -7) (undo-tree-id165 . -7) (undo-tree-id166 . -7) (undo-tree-id167 . -7) (undo-tree-id168 . -7) 1890 (t 25830 26951 859490 974000)) nil (25830 26960 773299 0) 0 nil])
([nil nil ((1883 . 1888)) nil (25830 26960 773250 0) 0 nil])
([nil nil ((1117 . 1122) (t 25830 26960 813807 406000)) nil (25830 32758 374069 0) 0 nil])
([nil nil ((1122 . 1129)) nil (25830 32758 374062 0) 0 nil])
([nil nil ((#("    :access" 0 4 (fontified t) 4 5 (face clojure-keyword-face fontified t) 5 11 (face clojure-keyword-face fontified t)) . 1118) (undo-tree-id45 . -11) (undo-tree-id46 . -11) (undo-tree-id47 . -11) (undo-tree-id48 . -11) (undo-tree-id49 . -11) (undo-tree-id50 . -11) (undo-tree-id51 . -11) (undo-tree-id52 . -11) (undo-tree-id53 . -11) (undo-tree-id54 . -11) (undo-tree-id55 . -11) (undo-tree-id56 . -11) (undo-tree-id57 . -11) (undo-tree-id58 . -11) (undo-tree-id59 . -11) (undo-tree-id60 . -11) (undo-tree-id61 . -11) (undo-tree-id62 . -11) (undo-tree-id63 . -11) (undo-tree-id64 . -11) (undo-tree-id65 . -11) (undo-tree-id66 . -11) (undo-tree-id67 . -11) (undo-tree-id68 . -11) (undo-tree-id69 . -11) (undo-tree-id70 . -11) (undo-tree-id71 . -11) (undo-tree-id72 . -11) (t 25830 32758 416302 423000)) nil (25830 32773 754341 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1117) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) 1118) nil (25830 32773 754307 0) 0 nil])
([nil nil ((714 . 719) (t 25830 32773 794485 703000)) nil (25830 52544 990186 0) 0 nil])
([nil nil ((719 . 727)) nil (25830 52544 990184 0) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . 726) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) 727) nil (25830 52544 990181 0) 0 nil])
([nil nil ((726 . 727) 727 (t 25830 52545 28742 737000)) nil (25830 52558 659598 0) 0 nil])
([nil nil ((727 . 729) (t 25830 52545 28742 737000)) nil (25830 52558 659597 0) 0 nil])
([nil nil ((728 . 729)) nil (25830 52558 659595 0) 0 nil])
([nil nil ((726 . 731)) nil (25830 52558 659592 0) 0 nil])
([nil nil ((734 . 740) (t 25830 52558 697453 947000)) nil (25830 52578 247730 0) 0 nil])
([nil nil ((733 . 739) (t 25830 52578 284205 32000)) nil (25830 52583 130338 0) 0 nil])
([nil nil ((747 . 748) (739 . 740) (t 25830 52583 168301 419000)) nil (25830 52586 529111 0) 0 nil])
([nil nil ((740 . 749)) nil (25830 52586 529107 0) 0 nil])
([nil nil ((#("loggedIn" 0 8 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t)) . -238) (undo-tree-id84 . -8) 246 (t 25830 52586 565801 617000)) nil (25830 52729 462825 0) 0 nil])
([nil nil ((238 . 245)) nil (25830 52729 462814 0) 0 nil])
([nil nil ((nil help-echo cider--help-echo 1163 . 1171) (nil fontified t 1163 . 1171) (nil cider-locals nil 1163 . 1171) (nil face clojure-keyword-face 1163 . 1171) (#(":loggedIn" 0 1 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 1 9 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo)) . -1163) (1172 . 1180) (nil help-echo cider--help-echo 1146 . 1154) (nil fontified t 1146 . 1154) (nil cider-locals nil 1146 . 1154) (nil face clojure-keyword-face 1146 . 1154) (#(":loggedIn" 0 1 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 1 9 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo)) . -1146) (1155 . 1163) (nil help-echo cider--help-echo 939 . 947) (t 25830 52729 499604 642000) (nil fontified t 939 . 947) (t 25830 52729 499604 642000) (nil cider-locals nil 939 . 947) (t 25830 52729 499604 642000) (nil face clojure-keyword-face 939 . 947) (t 25830 52729 499604 642000) (#(":loggedIn" 0 1 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo) 1 9 (face clojure-keyword-face cider-locals nil fontified t help-echo cider--help-echo)) . -939) (t 25830 52729 499604 642000) (948 . 956) 1 (t 25830 52729 499604 642000)) nil (25833 8447 126067 0) 0 nil])
([nil nil ((517 . 533) (t 25833 8447 946552 999000)) nil (25833 8686 348375 0) 0 nil] [nil nil ((517 . 533) (t 25833 7653 983834 861000)) ((#("
               " 0 1 (cider-locals nil fontified t help-echo cider--help-echo) 1 16 (cider-locals nil fontified t help-echo cider--help-echo)) . 517) (undo-tree-id391 . -16) (undo-tree-id392 . -16) (undo-tree-id393 . -16) (undo-tree-id394 . -1) (undo-tree-id395 . -16) (undo-tree-id396 . -16)) (25833 8446 351293 0) 0 nil] [nil nil ((517 . 533) (t 25830 52740 137111 489000)) ((#("
               " 0 1 (cider-locals nil fontified t help-echo cider--help-echo) 1 16 (cider-locals nil fontified t help-echo cider--help-echo)) . 517) (undo-tree-id121 . -16) (undo-tree-id122 . -16) (undo-tree-id123 . -16) (undo-tree-id124 . -16) (undo-tree-id125 . -16) (undo-tree-id126 . -16) (undo-tree-id127 . -16) (undo-tree-id128 . -16) (undo-tree-id129 . -16) (undo-tree-id130 . -16) (undo-tree-id131 . -16) (undo-tree-id132 . -16) (undo-tree-id133 . -16) (undo-tree-id134 . -16) (undo-tree-id135 . -16) (undo-tree-id136 . -16) (undo-tree-id137 . -16) (undo-tree-id138 . -1) (undo-tree-id139 . -16) (undo-tree-id140 . -16) (undo-tree-id141 . -16) (undo-tree-id142 . -16) (undo-tree-id143 . -16) (undo-tree-id144 . -16) (undo-tree-id145 . -16) (undo-tree-id146 . -16) (undo-tree-id147 . -16)) (25833 7652 302842 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 625 . 626) (nil help-echo cider--help-echo 625 . 626) (nil fontified nil 625 . 626) (nil help-echo cider--help-echo 624 . 625) (nil fontified nil 624 . 625) (nil help-echo cider--help-echo 623 . 624) (nil fontified nil 623 . 624) (nil help-echo cider--help-echo 618 . 623) (nil fontified nil 618 . 623) (nil help-echo cider--help-echo 617 . 618) (nil fontified nil 617 . 618) (nil help-echo cider--help-echo 616 . 617) (nil fontified nil 616 . 617) (nil help-echo cider--help-echo 612 . 616) (nil fontified nil 612 . 616) (nil help-echo cider--help-echo 611 . 612) (nil fontified nil 611 . 612) (nil help-echo cider--help-echo 610 . 611) (nil fontified nil 610 . 611) (nil help-echo cider--help-echo 609 . 610) (nil fontified nil 609 . 610) (nil help-echo cider--help-echo 595 . 609) (nil fontified nil 595 . 609) (nil help-echo cider--help-echo 594 . 595) (nil fontified nil 594 . 595) (nil help-echo cider--help-echo 570 . 594) (nil fontified nil 570 . 594) (nil help-echo cider--help-echo 564 . 570) (nil fontified nil 564 . 570) (nil help-echo cider--help-echo 563 . 564) (nil fontified nil 563 . 564) (nil help-echo cider--help-echo 562 . 563) (nil fontified nil 562 . 563) (nil help-echo cider--help-echo 548 . 562) (nil fontified nil 548 . 562) (nil help-echo cider--help-echo 547 . 548) (nil fontified nil 547 . 548) (nil help-echo cider--help-echo 546 . 547) (nil fontified nil 546 . 547) (nil help-echo cider--help-echo 545 . 546) (nil fontified nil 545 . 546) (nil help-echo cider--help-echo 544 . 545) (nil fontified nil 544 . 545) (nil help-echo cider--help-echo 534 . 544) (nil fontified nil 534 . 544) (nil help-echo cider--help-echo 533 . 534) (nil fontified nil 533 . 534) (533 . 626)) nil (25833 8686 348369 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 625 . 626) (nil help-echo cider--help-echo 625 . 626) (nil fontified nil 625 . 626) (nil help-echo cider--help-echo 624 . 625) (nil fontified nil 624 . 625) (nil help-echo cider--help-echo 623 . 624) (nil fontified nil 623 . 624) (nil help-echo cider--help-echo 618 . 623) (nil fontified nil 618 . 623) (nil help-echo cider--help-echo 617 . 618) (nil fontified nil 617 . 618) (nil help-echo cider--help-echo 616 . 617) (nil fontified nil 616 . 617) (nil help-echo cider--help-echo 612 . 616) (nil fontified nil 612 . 616) (nil help-echo cider--help-echo 611 . 612) (nil fontified nil 611 . 612) (nil help-echo cider--help-echo 610 . 611) (nil fontified nil 610 . 611) (nil help-echo cider--help-echo 609 . 610) (nil fontified nil 609 . 610) (nil help-echo cider--help-echo 595 . 609) (nil fontified nil 595 . 609) (nil help-echo cider--help-echo 594 . 595) (nil fontified nil 594 . 595) (nil help-echo cider--help-echo 570 . 594) (nil fontified nil 570 . 594) (nil help-echo cider--help-echo 564 . 570) (nil fontified nil 564 . 570) (nil help-echo cider--help-echo 563 . 564) (nil fontified nil 563 . 564) (nil help-echo cider--help-echo 562 . 563) (nil fontified nil 562 . 563) (nil help-echo cider--help-echo 548 . 562) (nil fontified nil 548 . 562) (nil help-echo cider--help-echo 547 . 548) (nil fontified nil 547 . 548) (nil help-echo cider--help-echo 546 . 547) (nil fontified nil 546 . 547) (nil help-echo cider--help-echo 545 . 546) (nil fontified nil 545 . 546) (nil help-echo cider--help-echo 544 . 545) (nil fontified nil 544 . 545) (nil help-echo cider--help-echo 534 . 544) (nil fontified nil 534 . 544) (nil help-echo cider--help-echo 533 . 534) (nil fontified nil 533 . 534) (533 . 626)) ((#(":directives [{:directive-type :access
                       :directive-args {:role :guest}}]" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 1 11 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 11 12 (cider-locals nil help-echo cider--help-echo fontified nil) 12 13 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo fontified nil) 13 14 (face (rainbow-delimiters-depth-7-face) cider-locals nil help-echo cider--help-echo fontified nil) 14 15 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 15 29 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 29 30 (cider-locals nil help-echo cider--help-echo fontified nil) 30 31 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 31 37 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 37 38 (cider-locals nil help-echo cider--help-echo fontified nil) 38 61 (cider-locals nil help-echo cider--help-echo fontified nil) 61 62 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 62 76 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 76 77 (cider-locals nil help-echo cider--help-echo fontified nil) 77 78 (face (rainbow-delimiters-depth-8-face) cider-locals nil help-echo cider--help-echo fontified nil) 78 79 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 79 83 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 83 84 (cider-locals nil help-echo cider--help-echo fontified nil) 84 85 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 85 90 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 90 91 (face (rainbow-delimiters-depth-8-face) cider-locals nil help-echo cider--help-echo fontified nil) 91 92 (face (rainbow-delimiters-depth-7-face) cider-locals nil help-echo cider--help-echo fontified nil) 92 93 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo rear-nonsticky nil fontified nil)) . 533) (undo-tree-id264 . -89) (undo-tree-id265 . -85) (undo-tree-id266 . -85) (undo-tree-id267 . -85) (undo-tree-id268 . -85) (undo-tree-id269 . -85) (undo-tree-id270 . -85) (undo-tree-id271 . -85) (undo-tree-id272 . -85) (undo-tree-id273 . -85) (undo-tree-id274 . -85) (undo-tree-id275 . -85) (undo-tree-id276 . -85) (undo-tree-id277 . -85) (undo-tree-id278 . -85) (undo-tree-id279 . -85) (undo-tree-id280 . -85) (undo-tree-id281 . -85) (undo-tree-id282 . -85) (undo-tree-id283 . -85) (undo-tree-id284 . -85) (undo-tree-id285 . -85) (undo-tree-id286 . -85) (undo-tree-id287 . -85) (undo-tree-id288 . -85) (undo-tree-id289 . -85) (undo-tree-id290 . -85) (undo-tree-id291 . -85) (undo-tree-id292 . -85) (undo-tree-id293 . -85) (undo-tree-id294 . -85) (undo-tree-id295 . -85) (undo-tree-id296 . -85) (undo-tree-id297 . -85) (undo-tree-id298 . -85) (undo-tree-id299 . -85) (undo-tree-id300 . -85) (undo-tree-id301 . -85) (undo-tree-id302 . -85) (undo-tree-id303 . -85) (undo-tree-id304 . -85) (undo-tree-id305 . -85) (undo-tree-id306 . -85) (undo-tree-id307 . -85) (undo-tree-id308 . -85) (undo-tree-id309 . -85) (undo-tree-id310 . -85) (undo-tree-id311 . -85) (undo-tree-id312 . -85) (undo-tree-id313 . -85) (undo-tree-id314 . -85) (undo-tree-id315 . -85) (undo-tree-id316 . -85) (undo-tree-id317 . -85) (undo-tree-id318 . -85) (undo-tree-id319 . -85) (undo-tree-id320 . -85) (undo-tree-id321 . -85) (undo-tree-id322 . -85) (undo-tree-id323 . -85) (undo-tree-id324 . -85) (undo-tree-id325 . -85) (undo-tree-id326 . -85) (undo-tree-id327 . -85) (undo-tree-id328 . -85) (undo-tree-id329 . -85) (undo-tree-id330 . -85) (undo-tree-id331 . -85) (undo-tree-id332 . -85) (undo-tree-id333 . -85) (undo-tree-id334 . -85) (undo-tree-id335 . -85) (undo-tree-id336 . -85) (undo-tree-id337 . -85) (undo-tree-id338 . -85) (undo-tree-id339 . -85) (undo-tree-id340 . -85) (undo-tree-id341 . -85) (undo-tree-id342 . -85) (undo-tree-id343 . -85) (undo-tree-id344 . -85) (undo-tree-id345 . -85) (undo-tree-id346 . -85) (undo-tree-id347 . -85) (undo-tree-id348 . -85) (undo-tree-id349 . -85) (undo-tree-id350 . -85) (undo-tree-id351 . -85) (undo-tree-id352 . -85) (undo-tree-id353 . -85) (undo-tree-id354 . -85) (undo-tree-id355 . -85) (undo-tree-id356 . -85) (undo-tree-id357 . -85) (undo-tree-id358 . -85) (undo-tree-id359 . -85) (undo-tree-id360 . -85) (undo-tree-id361 . -85) (undo-tree-id362 . -85) (undo-tree-id363 . -85) (undo-tree-id364 . -85) (undo-tree-id365 . -85) (undo-tree-id366 . -85) (undo-tree-id367 . -85) (undo-tree-id368 . -85) (undo-tree-id369 . -85) (undo-tree-id370 . -85) (undo-tree-id371 . -85) (undo-tree-id372 . -85) (undo-tree-id373 . -85) (undo-tree-id374 . -85) (undo-tree-id375 . -85) (undo-tree-id376 . -85) (undo-tree-id377 . -85) (undo-tree-id378 . -85) (undo-tree-id379 . -85) (undo-tree-id380 . -85) (undo-tree-id381 . -85) (undo-tree-id382 . -38) (undo-tree-id383 . -90) (undo-tree-id384 . -90) (undo-tree-id385 . -90) (undo-tree-id386 . -90) (undo-tree-id387 . -85) (undo-tree-id388 . -90) (undo-tree-id389 . -90) (undo-tree-id390 . -90) (nil fontified t 570 . 571) (nil rear-nonsticky t 625 . 626)) (25833 8446 49317 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 625 . 626) (nil help-echo cider--help-echo 625 . 626) (nil fontified nil 625 . 626) (nil help-echo cider--help-echo 624 . 625) (nil fontified nil 624 . 625) (nil help-echo cider--help-echo 623 . 624) (nil fontified nil 623 . 624) (nil help-echo cider--help-echo 618 . 623) (nil fontified nil 618 . 623) (nil help-echo cider--help-echo 617 . 618) (nil fontified nil 617 . 618) (nil help-echo cider--help-echo 616 . 617) (nil fontified nil 616 . 617) (nil help-echo cider--help-echo 612 . 616) (nil fontified nil 612 . 616) (nil help-echo cider--help-echo 611 . 612) (nil fontified nil 611 . 612) (nil help-echo cider--help-echo 610 . 611) (nil fontified nil 610 . 611) (nil help-echo cider--help-echo 609 . 610) (nil fontified nil 609 . 610) (nil help-echo cider--help-echo 595 . 609) (nil fontified nil 595 . 609) (nil help-echo cider--help-echo 594 . 595) (nil fontified nil 594 . 595) (nil help-echo cider--help-echo 570 . 594) (nil fontified nil 570 . 594) (nil help-echo cider--help-echo 564 . 570) (nil fontified nil 564 . 570) (nil help-echo cider--help-echo 563 . 564) (nil fontified nil 563 . 564) (nil help-echo cider--help-echo 562 . 563) (nil fontified nil 562 . 563) (nil help-echo cider--help-echo 548 . 562) (nil fontified nil 548 . 562) (nil help-echo cider--help-echo 547 . 548) (nil fontified nil 547 . 548) (nil help-echo cider--help-echo 546 . 547) (nil fontified nil 546 . 547) (nil help-echo cider--help-echo 545 . 546) (nil fontified nil 545 . 546) (nil help-echo cider--help-echo 544 . 545) (nil fontified nil 544 . 545) (nil help-echo cider--help-echo 534 . 544) (nil fontified nil 534 . 544) (nil help-echo cider--help-echo 533 . 534) (nil fontified nil 533 . 534) (533 . 626)) ((#(":directives [{:directive-type :access
                       :directive-args {:role :guest}}]" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 1 11 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 11 12 (cider-locals nil help-echo cider--help-echo fontified nil) 12 13 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo fontified nil) 13 14 (face (rainbow-delimiters-depth-7-face) cider-locals nil help-echo cider--help-echo fontified nil) 14 15 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 15 29 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 29 30 (cider-locals nil help-echo cider--help-echo fontified nil) 30 31 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 31 37 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 37 38 (cider-locals nil help-echo cider--help-echo fontified nil) 38 61 (cider-locals nil help-echo cider--help-echo fontified nil) 61 62 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 62 76 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 76 77 (cider-locals nil help-echo cider--help-echo fontified nil) 77 78 (face (rainbow-delimiters-depth-8-face) cider-locals nil help-echo cider--help-echo fontified nil) 78 79 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 79 83 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 83 84 (cider-locals nil help-echo cider--help-echo fontified nil) 84 85 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 85 90 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified nil) 90 91 (face (rainbow-delimiters-depth-8-face) cider-locals nil help-echo cider--help-echo fontified nil) 91 92 (face (rainbow-delimiters-depth-7-face) cider-locals nil help-echo cider--help-echo fontified nil) 92 93 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo rear-nonsticky nil fontified nil)) . 533) (undo-tree-id103 . -85) (undo-tree-id104 . -85) (undo-tree-id105 . -85) (undo-tree-id106 . -85) (undo-tree-id107 . -85) (undo-tree-id108 . -85) (undo-tree-id109 . -85) (undo-tree-id110 . -85) (undo-tree-id111 . -38) (undo-tree-id112 . -90) (undo-tree-id113 . -90) (undo-tree-id114 . -90) (undo-tree-id115 . -90) (undo-tree-id116 . -90) (undo-tree-id117 . -90) (undo-tree-id118 . -90) (undo-tree-id119 . -90) (undo-tree-id120 . -90) (nil fontified t 570 . 571) (nil rear-nonsticky t 625 . 626)) (25833 7651 930727 0) 0 nil])
([nil nil ((#("guest" 0 5 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t)) . -618) (undo-tree-id397 . -5) 623 (t 25833 8686 388240 990000)) nil (25833 8785 179702 0) 0 nil])
([nil nil ((#("guest" 0 5 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t)) . -618) (undo-tree-id148 . -4) (undo-tree-id149 . -5) 623 (t 25833 8359 871941 125000)) ((618 . 623)) (25833 8445 721579 0) 0 nil])
([nil nil ((#("guest" 0 5 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t)) . -618) (undo-tree-id86 . -5) (undo-tree-id88 . -5) (undo-tree-id90 . -5) (undo-tree-id92 . -5) (undo-tree-id94 . -5) (undo-tree-id96 . -5) (undo-tree-id98 . -5) (undo-tree-id99 . -5) (undo-tree-id101 . -5) 623 (t 25833 7622 574390 730000)) ((618 . 623)) (25833 7651 521324 0) 0 nil])
([nil nil ((618 . 625)) nil (25833 8785 179686 0) 0 nil])
([nil nil ((618 . 623)) ((#("admin" 0 5 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t)) . 618) (undo-tree-id255 . -5) (undo-tree-id256 . -5) (undo-tree-id257 . -5) (undo-tree-id258 . -5) (undo-tree-id259 . -5) (undo-tree-id260 . -5) (undo-tree-id261 . -5) (undo-tree-id262 . -5) (undo-tree-id263 . -5)) (25833 8445 392093 0) 0 nil])
([nil nil ((618 . 623)) ((#("admin" 0 5 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t)) . 618) (t 25833 7626 60639 384000)) (25833 7626 22145 0) 0 nil])
([nil nil ((2895 . 2900) (t 25833 8785 221217 518000)) nil (25833 32503 278062 0) 0 nil])
([nil nil ((#("admin" 0 5 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t)) . -618) (undo-tree-id159 . -5) (undo-tree-id160 . -5) (undo-tree-id161 . -5) 623 (t 25833 8381 255466 488000)) ((618 . 623)) (25833 8444 975924 0) 0 nil])
nil
([nil nil ((2896 . 2901) (#("    " 0 4 (cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . 2896) (undo-tree-id547 . -4) 2900) nil (25833 32503 278061 0) 0 nil])
([nil nil ((618 . 626)) ((#("regularx" 0 7 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 7 8 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . 618) (undo-tree-id162 . -8) (undo-tree-id163 . -8) (undo-tree-id164 . -8) (undo-tree-id165 . -8) (undo-tree-id166 . -8) (undo-tree-id167 . -8) (undo-tree-id168 . -8) (undo-tree-id169 . -8) (undo-tree-id170 . -7) (undo-tree-id171 . -7) (undo-tree-id172 . -7) (undo-tree-id173 . -7) (undo-tree-id174 . -7) (undo-tree-id175 . -7) (undo-tree-id176 . -7) (undo-tree-id177 . -7) (undo-tree-id178 . -7) (undo-tree-id179 . -7) (undo-tree-id180 . -7) (undo-tree-id181 . -7) (undo-tree-id182 . -7) (undo-tree-id183 . -7) (undo-tree-id184 . -7) (undo-tree-id185 . -7) (undo-tree-id186 . -7) (undo-tree-id187 . -7) (undo-tree-id188 . -7) (undo-tree-id189 . -7) (undo-tree-id190 . -7) (undo-tree-id191 . -7) (undo-tree-id192 . -7) (undo-tree-id193 . -7) (undo-tree-id194 . -7) (undo-tree-id195 . -7) (undo-tree-id196 . -7) (undo-tree-id197 . -7) (undo-tree-id198 . -7) (undo-tree-id199 . -7) (undo-tree-id200 . -7) (undo-tree-id201 . -7) (undo-tree-id202 . -7) (undo-tree-id203 . -7) (undo-tree-id204 . -7) (undo-tree-id205 . -7) (undo-tree-id206 . -7) (undo-tree-id207 . -7) (undo-tree-id208 . -7) (undo-tree-id209 . -7) (undo-tree-id210 . -7) (undo-tree-id211 . -7) (undo-tree-id212 . -7) (undo-tree-id213 . -7) (undo-tree-id214 . -7) (undo-tree-id215 . -7) (undo-tree-id216 . -7) (undo-tree-id217 . -7) (undo-tree-id218 . -7) (undo-tree-id219 . -7) (undo-tree-id220 . -7) (undo-tree-id221 . -7) (undo-tree-id222 . -7) (undo-tree-id223 . -7) (undo-tree-id224 . -7) (undo-tree-id225 . -7) (undo-tree-id226 . -7) (undo-tree-id227 . -7) (undo-tree-id228 . -7) (undo-tree-id229 . -7) (undo-tree-id230 . -7) (undo-tree-id231 . -7) (undo-tree-id232 . -7) (undo-tree-id233 . -7) (undo-tree-id234 . -7) (undo-tree-id235 . -7) (undo-tree-id236 . -7) (undo-tree-id237 . -7) (undo-tree-id238 . -7) (undo-tree-id239 . -7) (undo-tree-id240 . -7) (undo-tree-id241 . -7) (undo-tree-id242 . -7) (undo-tree-id243 . -7) (undo-tree-id244 . -7) (undo-tree-id245 . -7) (undo-tree-id246 . -7) (undo-tree-id247 . -8) (undo-tree-id248 . -8) (undo-tree-id249 . -8) (undo-tree-id250 . -8) (undo-tree-id251 . -7) (undo-tree-id252 . -8) (undo-tree-id253 . -8) (undo-tree-id254 . -8)) (25833 8444 375377 0) 0 nil])
([nil nil ((2901 . 2910)) nil (25833 32503 278058 0) 0 nil])
([nil nil ((#("x" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -625) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) 626) ((625 . 626) (t 25833 8409 689153 545000)) (25833 8409 648955 0) 0 nil])
([nil nil ((#("P" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . -2909) (undo-tree-id546 . -1) 2910) nil (25833 32503 278057 0) 0 nil])
nil
([nil nil ((2909 . 2914)) nil (25833 32503 278054 0) 0 nil])
([nil nil ((#("O" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . -2910) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (#("k" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . -2911) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (#("e" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . -2912) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (#("n" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . -2913) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) 2914) nil (25833 32503 278047 0) 0 nil])
([nil nil ((2910 . 2914)) nil (25833 32503 277905 0) 0 nil])
([nil nil ((2914 . 2919) (t 25833 32503 318063 607000)) nil (25833 32507 226716 0) 0 nil])
([nil nil ((2919 . 2921)) nil (25833 32507 226714 0) 0 nil])
([nil nil ((2920 . 2921)) nil (25833 32507 226710 0) 0 nil])
([nil nil ((2921 . 2927) (t 25833 32507 265468 421000)) nil (25833 32511 528094 0) 0 nil])
([nil nil ((#(":" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . -2926) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) 2927 (t 25833 32511 568056 212000)) nil (25833 32518 163900 0) 0 nil])
([nil nil ((2926 . 2932)) nil (25833 32518 163855 0) 0 nil])
([nil nil ((2932 . 2938) (t 25833 32518 202142 453000)) nil (25833 32524 236602 0) 0 nil])
([nil nil ((2938 . 2951)) nil (25833 32524 236600 0) 0 nil])
([nil nil ((2951 . 2953)) nil (25833 32524 236599 0) 0 nil])
([nil nil ((2952 . 2967)) nil (25833 32524 236594 0) 0 nil])
([nil nil ((2968 . 2974) (t 25833 32524 275651 255000)) nil (25833 32529 555167 0) 0 nil])
([nil nil ((2974 . 2980)) nil (25833 32529 555162 0) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . -2979) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) 2980 (t 25833 32529 595436 390000)) nil (25833 32563 670705 0) 0 nil])
([nil nil ((2979 . 2985)) nil (25833 32563 670689 0) 0 nil])
([nil nil ((2985 . 2987)) nil (25833 32563 670688 0) 0 nil])
([nil nil ((2986 . 2987)) nil (25833 32563 670687 0) 0 nil])
([nil nil ((#(":" 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -2986) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) 2987) nil (25833 32563 670685 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -2979) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (#(" " 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -2980) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (#(" " 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -2981) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (#(" " 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -2982) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (#(" " 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -2983) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (#(" " 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -2984) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo ws-butler-chg delete fontified nil)) . 2985) (#("{" 0 1 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -2985) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) 2986) nil (25833 32563 670628 0) 0 nil])
([nil nil ((#("     :args" 0 5 (cider-locals nil help-echo cider--help-echo fontified t) 5 6 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 6 10 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t)) . 2969) (undo-tree-id811 . -10) (undo-tree-id812 . -10) (undo-tree-id813 . -10) (undo-tree-id814 . -10) (undo-tree-id815 . -10) (undo-tree-id816 . -10) (undo-tree-id817 . -10) (undo-tree-id818 . -10) (undo-tree-id819 . -10) (undo-tree-id820 . -10) (undo-tree-id821 . -10) (undo-tree-id822 . -10) (undo-tree-id823 . -10) (undo-tree-id824 . -10) (undo-tree-id825 . -10) (undo-tree-id826 . -10) (undo-tree-id827 . -10) (undo-tree-id828 . -10) (undo-tree-id829 . -10) (undo-tree-id830 . -10) (undo-tree-id831 . -10) (undo-tree-id832 . -10) (undo-tree-id833 . -10) (undo-tree-id834 . -10) (undo-tree-id835 . -10) (undo-tree-id836 . -10) (undo-tree-id837 . -10) (undo-tree-id838 . -10) (undo-tree-id839 . -10) (undo-tree-id840 . -10) (undo-tree-id841 . -10) (undo-tree-id842 . -10) (undo-tree-id843 . -10) (undo-tree-id844 . -10) (undo-tree-id845 . -10) (undo-tree-id846 . -10) (undo-tree-id847 . -10) (undo-tree-id848 . -10) (undo-tree-id849 . -10) (undo-tree-id850 . -10) (undo-tree-id851 . -10) (undo-tree-id852 . -10) (undo-tree-id853 . -10) (undo-tree-id854 . -10) (undo-tree-id855 . -10) (undo-tree-id856 . -10) (undo-tree-id857 . -10) (undo-tree-id858 . -10) (undo-tree-id859 . -10) (undo-tree-id860 . -10) (undo-tree-id861 . -10) (undo-tree-id862 . -10) (undo-tree-id863 . -10) (undo-tree-id864 . -10) (undo-tree-id865 . -10) (undo-tree-id866 . -10) (undo-tree-id867 . -10) (undo-tree-id868 . -10) (undo-tree-id869 . -10) (undo-tree-id870 . -10) (undo-tree-id871 . -10) (undo-tree-id872 . -10) (undo-tree-id873 . -10) (undo-tree-id874 . -10) (undo-tree-id875 . -10) (undo-tree-id876 . -10) (undo-tree-id877 . -10) (undo-tree-id878 . -10) (undo-tree-id879 . -10) (undo-tree-id880 . -10) (undo-tree-id881 . -10) (undo-tree-id882 . -10) (undo-tree-id883 . -10) (undo-tree-id884 . -10) (undo-tree-id885 . -10) (undo-tree-id886 . -10) (undo-tree-id887 . -10) (undo-tree-id888 . -10) (undo-tree-id889 . -10) (undo-tree-id890 . -10) (undo-tree-id891 . -10) (undo-tree-id892 . -10) (undo-tree-id893 . -10) (undo-tree-id894 . -10) (undo-tree-id895 . -10) (undo-tree-id896 . -10) (undo-tree-id897 . -10) (undo-tree-id898 . -10) (undo-tree-id899 . -10) (undo-tree-id900 . -10) (undo-tree-id901 . -10) (undo-tree-id902 . -10) (undo-tree-id903 . -10) (undo-tree-id904 . -10) (undo-tree-id905 . -10) (undo-tree-id906 . -10) (undo-tree-id907 . -10) (undo-tree-id908 . -10) (undo-tree-id909 . -10) (undo-tree-id910 . -10) (undo-tree-id911 . -10) (undo-tree-id912 . -10) (undo-tree-id913 . -10) (undo-tree-id914 . -10) (undo-tree-id915 . -10) (undo-tree-id916 . -10) (undo-tree-id917 . -10) (undo-tree-id918 . -10) (undo-tree-id919 . -10) (undo-tree-id920 . -10) (undo-tree-id921 . -10) (undo-tree-id922 . -10) (undo-tree-id923 . -10) (undo-tree-id924 . -10) (undo-tree-id925 . -10) (undo-tree-id926 . -10) (undo-tree-id927 . -10) (undo-tree-id928 . -10) (undo-tree-id929 . -10) (undo-tree-id930 . -10) (undo-tree-id931 . -10) (undo-tree-id932 . -10) (undo-tree-id933 . -10) (undo-tree-id934 . -10) (undo-tree-id935 . -10) (undo-tree-id936 . -10) (undo-tree-id937 . -10) (undo-tree-id938 . -10) (undo-tree-id939 . -10) (undo-tree-id940 . -10) (undo-tree-id941 . -10) (undo-tree-id942 . -10) (undo-tree-id943 . -10) (undo-tree-id944 . -10) (undo-tree-id945 . -10) (undo-tree-id946 . -10) (undo-tree-id947 . -10) (undo-tree-id948 . -10) (undo-tree-id949 . -10) (undo-tree-id950 . -10) (undo-tree-id951 . -10) (undo-tree-id952 . -10) (undo-tree-id953 . -10) (undo-tree-id954 . -10) (undo-tree-id955 . -10) (undo-tree-id956 . -10) (undo-tree-id957 . -10) (undo-tree-id958 . -10) (undo-tree-id959 . -10) (undo-tree-id960 . -10) (undo-tree-id961 . -10) (undo-tree-id962 . -10) (undo-tree-id963 . -10) (undo-tree-id964 . -10) (undo-tree-id965 . -10) (undo-tree-id966 . -10) (undo-tree-id967 . -10) (undo-tree-id968 . -10) (undo-tree-id969 . -10) (undo-tree-id970 . -10) (undo-tree-id971 . -10) (undo-tree-id972 . -10) (undo-tree-id973 . -10) (undo-tree-id974 . -10) (undo-tree-id975 . -10) (undo-tree-id976 . -10) (undo-tree-id977 . -10) (undo-tree-id978 . -10) (undo-tree-id979 . -10) (undo-tree-id980 . -10) (undo-tree-id981 . -10) (undo-tree-id982 . -10) (undo-tree-id983 . -10) (undo-tree-id984 . -10) (undo-tree-id985 . -10) (undo-tree-id986 . -10) (undo-tree-id987 . -10) (undo-tree-id988 . -10) (undo-tree-id989 . -10) (undo-tree-id990 . -10) (undo-tree-id991 . -10) (undo-tree-id992 . -10) (undo-tree-id993 . -10) (undo-tree-id994 . -10) (undo-tree-id995 . -10) (undo-tree-id996 . -10) (undo-tree-id997 . -10) (undo-tree-id998 . -10) (undo-tree-id999 . -10) (undo-tree-id1000 . -10) (undo-tree-id1001 . -10) (undo-tree-id1002 . -10) (undo-tree-id1003 . -10) (undo-tree-id1004 . -10) (undo-tree-id1005 . -10) (undo-tree-id1006 . -10) (undo-tree-id1007 . -10) (undo-tree-id1008 . -10) (undo-tree-id1009 . -10) (undo-tree-id1010 . -10) (undo-tree-id1011 . -10) (undo-tree-id1012 . -10) (undo-tree-id1013 . -10) (undo-tree-id1014 . -10) (undo-tree-id1015 . -10) (undo-tree-id1016 . -10) (undo-tree-id1017 . -10) (undo-tree-id1018 . -10) (undo-tree-id1019 . -10)) nil (25833 32563 669697 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . -2968) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) 2969) nil (25833 32563 669481 0) 0 nil])
([nil nil ((1312 . 1315) (t 25833 32563 711348 849000)) nil (25839 34948 421132 0) 0 nil])
([nil nil ((1313 . 1316) (#("  " 0 2 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . 1313) (undo-tree-id5 . -2) 1315) nil (25839 34948 421131 0) 0 nil])
([nil nil ((1313 . 1315)) nil (25839 34948 421129 0) 0 nil])
([nil nil ((1315 . 1322)) nil (25839 34948 421128 0) 0 nil])
([nil nil ((#("a" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -1317) (undo-tree-id0 . -1) (#("o" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -1318) (undo-tree-id1 . -1) (#("r" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -1319) (undo-tree-id2 . -1) (#("d" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -1320) (undo-tree-id3 . -1) (#("s" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -1321) (undo-tree-id4 . -1) 1322) nil (25839 34948 421126 0) 0 nil])
([nil nil ((1317 . 1321)) nil (25839 34948 421094 0) 0 nil])
([nil nil ((1321 . 1324)) nil (25839 34948 421093 0) 0 nil])
([nil nil ((1324 . 1326)) nil (25839 34948 421092 0) 0 nil])
([nil nil ((1325 . 1326)) nil (25839 34948 421091 0) 0 nil])
([nil nil ((1326 . 1338)) nil (25839 34948 421090 0) 0 nil])
([nil nil ((1338 . 1340)) nil (25839 34948 421090 0) 0 nil])
([nil nil ((1339 . 1360)) nil (25839 34948 421089 0) 0 nil])
([nil nil ((1360 . 1361)) nil (25839 34948 421088 0) 0 nil])
([nil nil ((1362 . 1366)) nil (25839 34948 421086 0) 0 nil])
([nil nil ((1366 . 1373)) nil (25839 34948 421085 0) 0 nil])
([nil nil ((#("  " 0 2 (cider-locals nil fontified t ws-butler-chg chg help-echo cider--help-echo)) . 1375) 1373) nil (25839 34948 421081 0) 0 nil])
([nil nil ((1373 . 1377) (t 25839 34948 466047 506000)) nil (25839 34959 723125 0) 0 nil])
([nil nil ((1377 . 1378)) nil (25839 34959 723124 0) 0 nil])
([nil nil ((#(":" 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -1377) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) 1378) nil (25839 34959 723122 0) 0 nil])
([nil nil ((1377 . 1379)) nil (25839 34959 723099 0) 0 nil])
([nil nil ((1378 . 1379)) nil (25839 34959 723098 0) 0 nil])
([nil nil ((#("i" 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1378) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) 1379) nil (25839 34959 723097 0) 0 nil])
([nil nil ((1378 . 1382)) nil (25839 34959 723088 0) 0 nil])
([nil nil ((1382 . 1384)) nil (25839 34959 723087 0) 0 nil])
([nil nil ((1383 . 1389)) nil (25839 34959 723086 0) 0 nil])
([nil nil ((#(" " 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1388) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) 1389) nil (25839 34959 723084 0) 0 nil])
([nil nil ((1388 . 1389)) nil (25839 34959 723069 0) 0 nil])
([nil nil ((1389 . 1391)) nil (25839 34959 723068 0) 0 nil])
([nil nil ((1390 . 1400)) nil (25839 34959 723067 0) 0 nil])
([nil nil ((1400 . 1402)) nil (25839 34959 723063 0) 0 nil])
([nil nil ((1402 . 1403) (t 25839 34959 764131 425000)) nil (25839 34962 564654 0) 0 nil])
([nil nil ((#("f" 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -1402) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) 1403) nil (25839 34962 564652 0) 0 nil])
([nil nil ((1402 . 1403)) nil (25839 34962 564635 0) 0 nil])
([nil nil ((#("f" 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -1402) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) 1403) nil (25839 34962 564631 0) 0 nil])
([nil nil ((1403 . 1413) (t 25839 34962 606293 730000)) nil (25839 34968 836630 0) 0 nil])
([nil nil ((1413 . 1425)) nil (25839 34968 836629 0) 0 nil])
([nil nil ((1425 . 1427)) nil (25839 34968 836628 0) 0 nil])
([nil nil ((#("         :directives []" 0 9 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t) 9 10 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t) 10 20 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t) 20 21 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t) 21 22 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t) 22 23 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . 1404) (undo-tree-id217 . -9) (undo-tree-id218 . -9) (undo-tree-id219 . -9) (undo-tree-id220 . -9) (undo-tree-id221 . -9) (undo-tree-id222 . -9) (undo-tree-id223 . -9) (undo-tree-id224 . -9) (undo-tree-id225 . -10) (undo-tree-id226 . -10) (undo-tree-id227 . -10) (undo-tree-id228 . -10) (undo-tree-id229 . -10) (undo-tree-id230 . -10) (undo-tree-id231 . -10) (undo-tree-id232 . -10) (undo-tree-id233 . -10) (undo-tree-id234 . -10) (undo-tree-id235 . -10) (undo-tree-id236 . -10) (undo-tree-id237 . -10) (undo-tree-id238 . -10) (undo-tree-id239 . -10) (undo-tree-id240 . -10) (undo-tree-id241 . -10) (undo-tree-id242 . -11) (undo-tree-id243 . -11) (undo-tree-id244 . -11) (undo-tree-id245 . -11) (undo-tree-id246 . -11) (undo-tree-id247 . -11) (undo-tree-id248 . -11) (undo-tree-id249 . -11) (undo-tree-id250 . -12) (undo-tree-id251 . -12) (undo-tree-id252 . -12) (undo-tree-id253 . -12) (undo-tree-id254 . -12) (undo-tree-id255 . -12) (undo-tree-id256 . -12) (undo-tree-id257 . -12) (undo-tree-id258 . -13) (undo-tree-id259 . -13) (undo-tree-id260 . -13) (undo-tree-id261 . -13) (undo-tree-id262 . -13) (undo-tree-id263 . -13) (undo-tree-id264 . -13) (undo-tree-id265 . -13) (undo-tree-id266 . -14) (undo-tree-id267 . -14) (undo-tree-id268 . -14) (undo-tree-id269 . -14) (undo-tree-id270 . -14) (undo-tree-id271 . -14) (undo-tree-id272 . -14) (undo-tree-id273 . -14) (undo-tree-id274 . -15) (undo-tree-id275 . -15) (undo-tree-id276 . -15) (undo-tree-id277 . -15) (undo-tree-id278 . -15) (undo-tree-id279 . -15) (undo-tree-id280 . -15) (undo-tree-id281 . -15) (undo-tree-id282 . -16) (undo-tree-id283 . -16) (undo-tree-id284 . -16) (undo-tree-id285 . -16) (undo-tree-id286 . -16) (undo-tree-id287 . -16) (undo-tree-id288 . -16) (undo-tree-id289 . -16) (undo-tree-id290 . -17) (undo-tree-id291 . -17) (undo-tree-id292 . -17) (undo-tree-id293 . -17) (undo-tree-id294 . -17) (undo-tree-id295 . -17) (undo-tree-id296 . -17) (undo-tree-id297 . -17) (undo-tree-id298 . -19) (undo-tree-id299 . -19) (undo-tree-id300 . -19) (undo-tree-id301 . -19) (undo-tree-id302 . -19) (undo-tree-id303 . -19) (undo-tree-id304 . -19) (undo-tree-id305 . -19) (undo-tree-id306 . -20) (undo-tree-id307 . -20) (undo-tree-id308 . -20) (undo-tree-id309 . -20) (undo-tree-id310 . -20) (undo-tree-id311 . -20) (undo-tree-id312 . -20) (undo-tree-id313 . -20) (undo-tree-id314 . -21) (undo-tree-id315 . -21) (undo-tree-id316 . -21) (undo-tree-id317 . -21) (undo-tree-id318 . -21) (undo-tree-id319 . -21) (undo-tree-id320 . -21) (undo-tree-id321 . -21) (undo-tree-id322 . -22) (undo-tree-id323 . -22) (undo-tree-id324 . -22) (undo-tree-id325 . -22) (undo-tree-id326 . -22) (undo-tree-id327 . -22) (undo-tree-id328 . -22) (undo-tree-id329 . -22) (undo-tree-id330 . -22) (undo-tree-id331 . -22) (undo-tree-id332 . -22) (undo-tree-id333 . -22) (undo-tree-id334 . -22) (undo-tree-id335 . -22) (undo-tree-id336 . -22) (undo-tree-id337 . -22) (undo-tree-id338 . -22) (undo-tree-id339 . -22) (undo-tree-id340 . -22) (undo-tree-id341 . -22) (undo-tree-id342 . -22) (undo-tree-id343 . -22) (undo-tree-id344 . -22) (undo-tree-id345 . -22) (undo-tree-id346 . -22) (undo-tree-id347 . -23)) nil (25839 34968 836621 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -1403) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) 1404) nil (25839 34968 836494 0) 0 nil])
([nil nil ((1403 . 1413) (t 25839 34968 878269 603000)) nil (25839 34978 365529 0) 0 nil])
([nil nil ((1413 . 1420)) nil (25839 34978 365527 0) 0 nil])
([nil nil ((1420 . 1422)) nil (25839 34978 365526 0) 0 nil])
([nil nil ((1421 . 1436)) nil (25839 34978 365522 0) 0 nil])
([nil nil ((1687 . 1692) (t 25839 34978 406702 212000)) nil (25839 35031 959307 0) 0 nil])
([nil nil ((1692 . 1699)) nil (25839 35031 959306 0) 0 nil])
([nil nil ((1699 . 1701)) nil (25839 35031 959305 0) 0 nil])
([nil nil ((1700 . 1706)) nil (25839 35031 959303 0) 0 nil])
([nil nil ((1706 . 1708)) nil (25839 35031 959302 0) 0 nil])
([nil nil ((1707 . 1717)) nil (25839 35031 959301 0) 0 nil])
([nil nil ((#("*" 0 1 (face font-lock-function-name-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1716) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) 1717) nil (25839 35031 959298 0) 0 nil])
([nil nil ((1716 . 1718)) nil (25839 35031 959282 0) 0 nil])
([nil nil ((1717 . 1718)) nil (25839 35031 959281 0) 0 nil])
([nil nil ((1718 . 1728)) nil (25839 35031 959277 0) 0 nil])
([nil nil ((1968 . 1972) (#("   " 0 3 (cider-locals nil fontified t help-echo cider--help-echo)) . 1968) (undo-tree-id361 . -3) 1971 (t 25839 35032 1991 576000)) nil (25839 35920 528035 0) 0 nil])
([nil nil ((1969 . 1973) (#("   " 0 3 (cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . 1969) (undo-tree-id360 . -3) 1972) nil (25839 35920 528032 0) 0 nil])
([nil nil ((1968 . 1971)) nil (25839 35920 528029 0) 0 nil])
([nil nil ((1971 . 1973)) nil (25839 35920 528028 0) 0 nil])
([nil nil ((1972 . 1973)) nil (25839 35920 528027 0) 0 nil])
([nil nil ((#("G" 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1972) (undo-tree-id359 . -1) 1973) nil (25839 35920 528026 0) 0 nil])
([nil nil ((1972 . 1976)) nil (25839 35920 528023 0) 0 nil])
([nil nil ((1976 . 1985)) nil (25839 35920 528022 0) 0 nil])
([nil nil ((#("l" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . 1977)) nil (25839 35920 528020 0) 0 nil])
([nil nil ((#("a" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1976) (undo-tree-id358 . -1) 1977) nil (25839 35920 528019 0) 0 nil])
([nil nil ((1976 . 1978)) nil (25839 35920 528017 0) 0 nil])
([nil nil ((#("k" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1977) (undo-tree-id357 . -1) 1978) nil (25839 35920 528015 0) 0 nil])
([nil nil ((1977 . 1978)) nil (25839 35920 528007 0) 0 nil])
([nil nil ((1985 . 1990)) nil (25839 35920 528006 0) 0 nil])
([nil nil ((1990 . 1992)) nil (25839 35920 528004 0) 0 nil])
([nil nil ((1991 . 1993)) nil (25839 35920 528003 0) 0 nil])
([nil nil ((1993 . 2003)) nil (25839 35920 528002 0) 0 nil])
([nil nil ((2003 . 2009)) nil (25839 35920 528001 0) 0 nil])
([nil nil ((2009 . 2022)) nil (25839 35920 528001 0) 0 nil])
([nil nil ((2022 . 2024)) nil (25839 35920 527999 0) 0 nil])
([nil nil ((2023 . 2040)) nil (25839 35920 527994 0) 0 nil])
([nil nil ((2041 . 2047) (t 25839 35920 570239 268000)) nil (25839 35961 134031 0) 0 nil])
([nil nil ((2047 . 2052)) nil (25839 35961 134030 0) 0 nil])
([nil nil ((#(":args" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t) 1 5 (face clojure-keyword-face cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . 2047) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -2) (undo-tree-id1510 . -2) (undo-tree-id1511 . -2) (undo-tree-id1512 . -2) (undo-tree-id1513 . -2) (undo-tree-id1514 . -2) (undo-tree-id1515 . -2) (undo-tree-id1516 . -2) (undo-tree-id1517 . -3) (undo-tree-id1518 . -3) (undo-tree-id1519 . -3) (undo-tree-id1520 . -3) (undo-tree-id1521 . -3) (undo-tree-id1522 . -3) (undo-tree-id1523 . -3) (undo-tree-id1524 . -3) (undo-tree-id1525 . -5) (undo-tree-id1526 . -5) (undo-tree-id1527 . -5) (undo-tree-id1528 . -5) (undo-tree-id1529 . -5) (undo-tree-id1530 . -5) (undo-tree-id1531 . -5) (undo-tree-id1532 . -5) (undo-tree-id1533 . -5) (undo-tree-id1534 . -5) (undo-tree-id1535 . -5) (undo-tree-id1536 . -5) (undo-tree-id1537 . -5) (undo-tree-id1538 . -5) (undo-tree-id1539 . -5) (undo-tree-id1540 . -5) (undo-tree-id1541 . -5) (undo-tree-id1542 . -5) (undo-tree-id1543 . -5) (undo-tree-id1544 . -5) (undo-tree-id1545 . -5) (undo-tree-id1546 . -5) (undo-tree-id1547 . -5) (undo-tree-id1548 . -5) (undo-tree-id1549 . -5) (undo-tree-id1550 . -5) (undo-tree-id1551 . -5) (undo-tree-id1552 . -5) (undo-tree-id1553 . -5) (undo-tree-id1554 . -5) (undo-tree-id1555 . -5)) nil (25839 35961 134026 0) 0 nil])
([nil nil ((#("     " 0 5 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . 2042) (undo-tree-id988 . -5) (undo-tree-id989 . -5) (undo-tree-id990 . -5) (undo-tree-id991 . -5) (undo-tree-id992 . -5) (undo-tree-id993 . -5) (undo-tree-id994 . -5) (undo-tree-id995 . -5) (undo-tree-id996 . -5) (undo-tree-id997 . -5) (undo-tree-id998 . -5) (undo-tree-id999 . -5) (undo-tree-id1000 . -5) (undo-tree-id1001 . -5) (undo-tree-id1002 . -5) (undo-tree-id1003 . -5) (undo-tree-id1004 . -5) (undo-tree-id1005 . -5) (undo-tree-id1006 . -5) (undo-tree-id1007 . -5) (undo-tree-id1008 . -5) (undo-tree-id1009 . -5) (undo-tree-id1010 . -5) (undo-tree-id1011 . -5) (undo-tree-id1012 . -5) (undo-tree-id1013 . -5) (undo-tree-id1014 . -5) (undo-tree-id1015 . -5) (undo-tree-id1016 . -5) (undo-tree-id1017 . -5) (undo-tree-id1018 . -5) (undo-tree-id1019 . -5) (undo-tree-id1020 . -5) (undo-tree-id1021 . -5) (undo-tree-id1022 . -5) (undo-tree-id1023 . -5) (undo-tree-id1024 . -5) (undo-tree-id1025 . -5) (undo-tree-id1026 . -5) (undo-tree-id1027 . -5) (undo-tree-id1028 . -5) (undo-tree-id1029 . -5) (undo-tree-id1030 . -5) (undo-tree-id1031 . -5) (undo-tree-id1032 . -5) (undo-tree-id1033 . -5) (undo-tree-id1034 . -5) (undo-tree-id1035 . -5) (undo-tree-id1036 . -5) (undo-tree-id1037 . -5) (undo-tree-id1038 . -5) (undo-tree-id1039 . -5) (undo-tree-id1040 . -5) (undo-tree-id1041 . -5) (undo-tree-id1042 . -5) (undo-tree-id1043 . -5) (undo-tree-id1044 . -5) (undo-tree-id1045 . -5) (undo-tree-id1046 . -5) (undo-tree-id1047 . -5) (undo-tree-id1048 . -5) (undo-tree-id1049 . -5) (undo-tree-id1050 . -5) (undo-tree-id1051 . -5) (undo-tree-id1052 . -5) (undo-tree-id1053 . -5) (undo-tree-id1054 . -5) (undo-tree-id1055 . -5) (undo-tree-id1056 . -5) (undo-tree-id1057 . -5) (undo-tree-id1058 . -5) (undo-tree-id1059 . -5) (undo-tree-id1060 . -5) (undo-tree-id1061 . -5) (undo-tree-id1062 . -5) (undo-tree-id1063 . -5) (undo-tree-id1064 . -5) (undo-tree-id1065 . -5) (undo-tree-id1066 . -5) (undo-tree-id1067 . -5) (undo-tree-id1068 . -5) (undo-tree-id1069 . -5) (undo-tree-id1070 . -5) (undo-tree-id1071 . -5) (undo-tree-id1072 . -5) (undo-tree-id1073 . -5) (undo-tree-id1074 . -5) (undo-tree-id1075 . -5) (undo-tree-id1076 . -5) (undo-tree-id1077 . -5) (undo-tree-id1078 . -5) (undo-tree-id1079 . -5) (undo-tree-id1080 . -5) (undo-tree-id1081 . -5) (undo-tree-id1082 . -5) (undo-tree-id1083 . -5) (undo-tree-id1084 . -5) (undo-tree-id1085 . -5) (undo-tree-id1086 . -5) (undo-tree-id1087 . -5) (undo-tree-id1088 . -5) (undo-tree-id1089 . -5) (undo-tree-id1090 . -5) (undo-tree-id1091 . -5) (undo-tree-id1092 . -5) (undo-tree-id1093 . -5) (undo-tree-id1094 . -5) (undo-tree-id1095 . -5) (undo-tree-id1096 . -5) (undo-tree-id1097 . -5) (undo-tree-id1098 . -5) (undo-tree-id1099 . -5) (undo-tree-id1100 . -5) (undo-tree-id1101 . -5) (undo-tree-id1102 . -5) (undo-tree-id1103 . -5) (undo-tree-id1104 . -5) (undo-tree-id1105 . -5) (undo-tree-id1106 . -5) (undo-tree-id1107 . -5) (undo-tree-id1108 . -5) (undo-tree-id1109 . -5) (undo-tree-id1110 . -5) (undo-tree-id1111 . -5) (undo-tree-id1112 . -5) (undo-tree-id1113 . -5) (undo-tree-id1114 . -5) (undo-tree-id1115 . -5) (undo-tree-id1116 . -5) (undo-tree-id1117 . -5) (undo-tree-id1118 . -5) (undo-tree-id1119 . -5) (undo-tree-id1120 . -5) (undo-tree-id1121 . -5) (undo-tree-id1122 . -5) (undo-tree-id1123 . -5) (undo-tree-id1124 . -5) (undo-tree-id1125 . -5) (undo-tree-id1126 . -5) (undo-tree-id1127 . -5) (undo-tree-id1128 . -5) (undo-tree-id1129 . -5) (undo-tree-id1130 . -5) (undo-tree-id1131 . -5) (undo-tree-id1132 . -5) (undo-tree-id1133 . -5) (undo-tree-id1134 . -5) (undo-tree-id1135 . -5) (undo-tree-id1136 . -5) (undo-tree-id1137 . -5) (undo-tree-id1138 . -5) (undo-tree-id1139 . -5) (undo-tree-id1140 . -5) (undo-tree-id1141 . -5) (undo-tree-id1142 . -5) (undo-tree-id1143 . -5) (undo-tree-id1144 . -5) (undo-tree-id1145 . -5) (undo-tree-id1146 . -5) (undo-tree-id1147 . -5) (undo-tree-id1148 . -5) (undo-tree-id1149 . -5) (undo-tree-id1150 . -5) (undo-tree-id1151 . -5) (undo-tree-id1152 . -5) (undo-tree-id1153 . -5) (undo-tree-id1154 . -5) (undo-tree-id1155 . -5) (undo-tree-id1156 . -5) (undo-tree-id1157 . -5) (undo-tree-id1158 . -5) (undo-tree-id1159 . -5) (undo-tree-id1160 . -5) (undo-tree-id1161 . -5) (undo-tree-id1162 . -5) (undo-tree-id1163 . -5) (undo-tree-id1164 . -5) (undo-tree-id1165 . -5) (undo-tree-id1166 . -5) (undo-tree-id1167 . -5) (undo-tree-id1168 . -5) (undo-tree-id1169 . -5) (undo-tree-id1170 . -5) (undo-tree-id1171 . -5) (undo-tree-id1172 . -5) (undo-tree-id1173 . -5) (undo-tree-id1174 . -5) (undo-tree-id1175 . -5) (undo-tree-id1176 . -5) (undo-tree-id1177 . -5) (undo-tree-id1178 . -5) (undo-tree-id1179 . -5) (undo-tree-id1180 . -5) (undo-tree-id1181 . -5) (undo-tree-id1182 . -5) (undo-tree-id1183 . -5) (undo-tree-id1184 . -5) (undo-tree-id1185 . -5) (undo-tree-id1186 . -5) (undo-tree-id1187 . -5) (undo-tree-id1188 . -5) (undo-tree-id1189 . -5) (undo-tree-id1190 . -5) (undo-tree-id1191 . -5) (undo-tree-id1192 . -5) (undo-tree-id1193 . -5) (undo-tree-id1194 . -5) (undo-tree-id1195 . -5) (undo-tree-id1196 . -5) (undo-tree-id1197 . -5) (undo-tree-id1198 . -5) (undo-tree-id1199 . -5) (undo-tree-id1200 . -5) (undo-tree-id1201 . -5) (undo-tree-id1202 . -5) (undo-tree-id1203 . -5) (undo-tree-id1204 . -5) (undo-tree-id1205 . -5) (undo-tree-id1206 . -5) (undo-tree-id1207 . -5) (undo-tree-id1208 . -5) (undo-tree-id1209 . -5) (undo-tree-id1210 . -5) (undo-tree-id1211 . -5) (undo-tree-id1212 . -5) (undo-tree-id1213 . -5) (undo-tree-id1214 . -5) (undo-tree-id1215 . -5) (undo-tree-id1216 . -5) (undo-tree-id1217 . -5) (undo-tree-id1218 . -5) (undo-tree-id1219 . -5) (undo-tree-id1220 . -5) (undo-tree-id1221 . -5) (undo-tree-id1222 . -5) (undo-tree-id1223 . -5) (undo-tree-id1224 . -5) (undo-tree-id1225 . -5) (undo-tree-id1226 . -5) (undo-tree-id1227 . -5) (undo-tree-id1228 . -5) (undo-tree-id1229 . -5) (undo-tree-id1230 . -5) (undo-tree-id1231 . -5) (undo-tree-id1232 . -5) (undo-tree-id1233 . -5) (undo-tree-id1234 . -5) (undo-tree-id1235 . -5) (undo-tree-id1236 . -5) (undo-tree-id1237 . -5) (undo-tree-id1238 . -5) (undo-tree-id1239 . -5) (undo-tree-id1240 . -5) (undo-tree-id1241 . -5) (undo-tree-id1242 . -5) (undo-tree-id1243 . -5) (undo-tree-id1244 . -5) (undo-tree-id1245 . -5) (undo-tree-id1246 . -5) (undo-tree-id1247 . -5) (undo-tree-id1248 . -5) (undo-tree-id1249 . -5) (undo-tree-id1250 . -5) (undo-tree-id1251 . -5) (undo-tree-id1252 . -5) (undo-tree-id1253 . -5) (undo-tree-id1254 . -5) (undo-tree-id1255 . -5) (undo-tree-id1256 . -5) (undo-tree-id1257 . -5) (undo-tree-id1258 . -5) (undo-tree-id1259 . -5) (undo-tree-id1260 . -5) (undo-tree-id1261 . -5) (undo-tree-id1262 . -5) (undo-tree-id1263 . -5) (undo-tree-id1264 . -5) (undo-tree-id1265 . -5) (undo-tree-id1266 . -5) (undo-tree-id1267 . -5) (undo-tree-id1268 . -5) (undo-tree-id1269 . -5) (undo-tree-id1270 . -5) (undo-tree-id1271 . -5) (undo-tree-id1272 . -5) (undo-tree-id1273 . -5) (undo-tree-id1274 . -5) (undo-tree-id1275 . -5) (undo-tree-id1276 . -5) (undo-tree-id1277 . -5) (undo-tree-id1278 . -5) (undo-tree-id1279 . -5) (undo-tree-id1280 . -5) (undo-tree-id1281 . -5) (undo-tree-id1282 . -5) (undo-tree-id1283 . -5) (undo-tree-id1284 . -5) (undo-tree-id1285 . -5) (undo-tree-id1286 . -5) (undo-tree-id1287 . -5) (undo-tree-id1288 . -5) (undo-tree-id1289 . -5) (undo-tree-id1290 . -5) (undo-tree-id1291 . -5) (undo-tree-id1292 . -5) (undo-tree-id1293 . -5) (undo-tree-id1294 . -5) (undo-tree-id1295 . -5) (undo-tree-id1296 . -5) (undo-tree-id1297 . -5) (undo-tree-id1298 . -5) (undo-tree-id1299 . -5) (undo-tree-id1300 . -5) (undo-tree-id1301 . -5) (undo-tree-id1302 . -5) (undo-tree-id1303 . -5) (undo-tree-id1304 . -5) (undo-tree-id1305 . -5) (undo-tree-id1306 . -5) (undo-tree-id1307 . -5) (undo-tree-id1308 . -5) (undo-tree-id1309 . -5) (undo-tree-id1310 . -5) (undo-tree-id1311 . -5) (undo-tree-id1312 . -5) (undo-tree-id1313 . -5) (undo-tree-id1314 . -5) (undo-tree-id1315 . -5) (undo-tree-id1316 . -5) (undo-tree-id1317 . -5) (undo-tree-id1318 . -5) (undo-tree-id1319 . -5) (undo-tree-id1320 . -5) (undo-tree-id1321 . -5) (undo-tree-id1322 . -5) (undo-tree-id1323 . -5) (undo-tree-id1324 . -5) (undo-tree-id1325 . -5) (undo-tree-id1326 . -5) (undo-tree-id1327 . -5) (undo-tree-id1328 . -5) (undo-tree-id1329 . -5) (undo-tree-id1330 . -5) (undo-tree-id1331 . -5) (undo-tree-id1332 . -5) (undo-tree-id1333 . -5) (undo-tree-id1334 . -5) (undo-tree-id1335 . -5) (undo-tree-id1336 . -5) (undo-tree-id1337 . -5) (undo-tree-id1338 . -5) (undo-tree-id1339 . -5) (undo-tree-id1340 . -5) (undo-tree-id1341 . -5) (undo-tree-id1342 . -5) (undo-tree-id1343 . -5) (undo-tree-id1344 . -5) (undo-tree-id1345 . -5) (undo-tree-id1346 . -5) (undo-tree-id1347 . -5) (undo-tree-id1348 . -5) (undo-tree-id1349 . -5) (undo-tree-id1350 . -5) (undo-tree-id1351 . -5) (undo-tree-id1352 . -5) (undo-tree-id1353 . -5) (undo-tree-id1354 . -5) (undo-tree-id1355 . -5) (undo-tree-id1356 . -5) (undo-tree-id1357 . -5) (undo-tree-id1358 . -5) (undo-tree-id1359 . -5) (undo-tree-id1360 . -5) (undo-tree-id1361 . -5) (undo-tree-id1362 . -5) (undo-tree-id1363 . -5) (undo-tree-id1364 . -5) (undo-tree-id1365 . -5) (undo-tree-id1366 . -5) (undo-tree-id1367 . -5) (undo-tree-id1368 . -5) (undo-tree-id1369 . -5) (undo-tree-id1370 . -5) (undo-tree-id1371 . -5) (undo-tree-id1372 . -5) (undo-tree-id1373 . -5) (undo-tree-id1374 . -5) (undo-tree-id1375 . -5) (undo-tree-id1376 . -5) (undo-tree-id1377 . -5) (undo-tree-id1378 . -5) (undo-tree-id1379 . -5) (undo-tree-id1380 . -5) (undo-tree-id1381 . -5) (undo-tree-id1382 . -5) (undo-tree-id1383 . -5) (undo-tree-id1384 . -5) (undo-tree-id1385 . -5) (undo-tree-id1386 . -5) (undo-tree-id1387 . -5) (undo-tree-id1388 . -5) (undo-tree-id1389 . -5) (undo-tree-id1390 . -5) (undo-tree-id1391 . -5) (undo-tree-id1392 . -5) (undo-tree-id1393 . -5) (undo-tree-id1394 . -5) (undo-tree-id1395 . -5) (undo-tree-id1396 . -5) (undo-tree-id1397 . -5) (undo-tree-id1398 . -5) (undo-tree-id1399 . -5) (undo-tree-id1400 . -5) (undo-tree-id1401 . -5) (undo-tree-id1402 . -5) (undo-tree-id1403 . -5) (undo-tree-id1404 . -5) (undo-tree-id1405 . -5) (undo-tree-id1406 . -5) (undo-tree-id1407 . -5) (undo-tree-id1408 . -5) (undo-tree-id1409 . -5) (undo-tree-id1410 . -5) (undo-tree-id1411 . -5) (undo-tree-id1412 . -5) (undo-tree-id1413 . -5) (undo-tree-id1414 . -5) (undo-tree-id1415 . -5) (undo-tree-id1416 . -5) (undo-tree-id1417 . -5) (undo-tree-id1418 . -5) (undo-tree-id1419 . -5) (undo-tree-id1420 . -5) (undo-tree-id1421 . -5) (undo-tree-id1422 . -5) (undo-tree-id1423 . -5) (undo-tree-id1424 . -5) (undo-tree-id1425 . -5) (undo-tree-id1426 . -5) (undo-tree-id1427 . -5) (undo-tree-id1428 . -5) (undo-tree-id1429 . -5) (undo-tree-id1430 . -5) (undo-tree-id1431 . -5) (undo-tree-id1432 . -5) (undo-tree-id1433 . -5) (undo-tree-id1434 . -5) (undo-tree-id1435 . -5) (undo-tree-id1436 . -5) (undo-tree-id1437 . -5) (undo-tree-id1438 . -5) (undo-tree-id1439 . -5) (undo-tree-id1440 . -5) (undo-tree-id1441 . -5) (undo-tree-id1442 . -5) (undo-tree-id1443 . -5) (undo-tree-id1444 . -5) (undo-tree-id1445 . -5) (undo-tree-id1446 . -5) (undo-tree-id1447 . -5) (undo-tree-id1448 . -5) (undo-tree-id1449 . -5) (undo-tree-id1450 . -5) (undo-tree-id1451 . -5) (undo-tree-id1452 . -5) (undo-tree-id1453 . -5) (undo-tree-id1454 . -5) (undo-tree-id1455 . -5) (undo-tree-id1456 . -5) (undo-tree-id1457 . -5) (undo-tree-id1458 . -5) (undo-tree-id1459 . -5) (undo-tree-id1460 . -5) (undo-tree-id1461 . -5) (undo-tree-id1462 . -5) (undo-tree-id1463 . -5) (undo-tree-id1464 . -5) (undo-tree-id1465 . -5) (undo-tree-id1466 . -5) (undo-tree-id1467 . -5) (undo-tree-id1468 . -5) (undo-tree-id1469 . -5) (undo-tree-id1470 . -5) (undo-tree-id1471 . -5) (undo-tree-id1472 . -5) (undo-tree-id1473 . -5) (undo-tree-id1474 . -5) (undo-tree-id1475 . -5) (undo-tree-id1476 . -5) (undo-tree-id1477 . -5) (undo-tree-id1478 . -5) (undo-tree-id1479 . -5) (undo-tree-id1480 . -5) (undo-tree-id1481 . -5) (undo-tree-id1482 . -5) (undo-tree-id1483 . -5) (undo-tree-id1484 . -5) (undo-tree-id1485 . -5) (undo-tree-id1486 . -5) (undo-tree-id1487 . -5) (undo-tree-id1488 . -5) (undo-tree-id1489 . -5) (undo-tree-id1490 . -5) (undo-tree-id1491 . -5) (undo-tree-id1492 . -5) (undo-tree-id1493 . -5) (undo-tree-id1494 . -5) (undo-tree-id1495 . -5) (undo-tree-id1496 . -5) (undo-tree-id1497 . -5) (undo-tree-id1498 . -5) (undo-tree-id1499 . -5) (undo-tree-id1500 . -5)) nil (25839 35961 133959 0) 0 nil])
([nil nil ((#("\\" 0 1 (face clojure-character-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -2042) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (2042 . 2043)) nil (25839 35961 133469 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -2041) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) 2042) nil (25839 35961 133434 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . -2043) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) 2044 (t 25839 35961 178499 969000)) nil (25839 35962 478442 0) 0 nil])
([nil nil ((#(":GetAllBoards
    {:type :Board
     :description \"Return all boards\"}" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 1 6 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 6 7 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 7 13 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 13 14 (cider-locals nil help-echo cider--help-echo fontified t) 14 18 (cider-locals nil help-echo cider--help-echo fontified t) 18 19 (face (rainbow-delimiters-depth-5-face) cider-locals nil help-echo cider--help-echo fontified t) 19 20 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 20 24 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 24 25 (cider-locals nil help-echo cider--help-echo fontified t) 25 26 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 26 31 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 31 32 (cider-locals nil help-echo cider--help-echo fontified t) 32 37 (cider-locals nil help-echo cider--help-echo fontified t) 37 38 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 38 49 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo fontified t) 49 50 (cider-locals nil help-echo cider--help-echo fontified t) 50 68 (face font-lock-string-face cider-locals nil help-echo cider--help-echo fontified t) 68 69 (face font-lock-string-face cider-locals nil help-echo cider--help-echo fontified t) 69 70 (face (rainbow-delimiters-depth-5-face) cider-locals nil help-echo cider--help-echo fontified t)) . 1972) (undo-tree-id1967 . 1) (undo-tree-id1968 . -69) (undo-tree-id1969 . -69) (undo-tree-id1970 . -69) (undo-tree-id1971 . -18) (undo-tree-id1972 . -18) (undo-tree-id1973 . -18) (undo-tree-id1974 . -18) (undo-tree-id1975 . -18) (undo-tree-id1976 . -18) (undo-tree-id1977 . -18) (undo-tree-id1978 . -18) (undo-tree-id1979 . -18) (undo-tree-id1980 . -18) (undo-tree-id1981 . -18) (undo-tree-id1982 . -18) (undo-tree-id1983 . -18) (undo-tree-id1984 . -18) (undo-tree-id1985 . -18) (undo-tree-id1986 . -18) (undo-tree-id1987 . -18) (undo-tree-id1988 . -32) (undo-tree-id1989 . -70) (undo-tree-id1990 . -70) (undo-tree-id1991 . -70) (undo-tree-id1992 . -70) (undo-tree-id1993 . -70) (undo-tree-id1994 . -70) (undo-tree-id1995 . -70) (undo-tree-id1996 . -70) (undo-tree-id1997 . -70) (undo-tree-id1998 . -70) (undo-tree-id1999 . -70) (undo-tree-id2000 . -70) (undo-tree-id2001 . -70) (undo-tree-id2002 . -70) (undo-tree-id2003 . -69) (undo-tree-id2004 . -70) (undo-tree-id2005 . -70) (undo-tree-id2006 . -70) (undo-tree-id2007 . -70) (undo-tree-id2008 . -70) 2042 (t 25839 35962 521369 388000)) nil (25839 35990 472014 0) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-depth-4-face) cider-locals nil ws-butler-chg delete help-echo cider--help-echo fontified nil)) . 1971) (undo-tree-id1815 . 1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-4-face) cider-locals nil help-echo cider--help-echo fontified t)) . -1971) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) 1972) nil (25839 35990 471970 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . -1967) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) 1968) nil (25839 35990 471838 0) 0 nil])
([nil nil ((1975 . 1980)) nil (25839 35990 471820 0) 0 nil])
([nil nil ((1976 . 1981) (#("    " 0 4 (cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . 1976) (undo-tree-id1795 . -4) 1980) nil (25839 35990 471819 0) 0 nil])
([nil nil ((1977 . 1982) (#("    " 0 4 (cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . 1977) (undo-tree-id1794 . -4) 1981) nil (25839 35990 471817 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 2044 . 2045) (nil help-echo cider--help-echo 2044 . 2045) (nil fontified nil 2044 . 2045) (nil help-echo cider--help-echo 2043 . 2044) (nil fontified nil 2043 . 2044) (nil help-echo cider--help-echo 2025 . 2043) (nil fontified nil 2025 . 2043) (nil help-echo cider--help-echo 2024 . 2025) (nil fontified nil 2024 . 2025) (nil help-echo cider--help-echo 2013 . 2024) (nil fontified nil 2013 . 2024) (nil help-echo cider--help-echo 2012 . 2013) (nil fontified nil 2012 . 2013) (nil help-echo cider--help-echo 2007 . 2012) (nil fontified nil 2007 . 2012) (nil help-echo cider--help-echo 2006 . 2007) (nil fontified nil 2006 . 2007) (nil help-echo cider--help-echo 2001 . 2006) (nil fontified nil 2001 . 2006) (nil help-echo cider--help-echo 2000 . 2001) (nil fontified nil 2000 . 2001) (nil help-echo cider--help-echo 1999 . 2000) (nil fontified nil 1999 . 2000) (nil help-echo cider--help-echo 1995 . 1999) (nil fontified nil 1995 . 1999) (nil help-echo cider--help-echo 1994 . 1995) (nil fontified nil 1994 . 1995) (nil help-echo cider--help-echo 1993 . 1994) (nil fontified nil 1993 . 1994) (nil help-echo cider--help-echo 1989 . 1993) (nil fontified nil 1989 . 1993) (nil help-echo cider--help-echo 1988 . 1989) (nil fontified nil 1988 . 1989) (nil help-echo cider--help-echo 1982 . 1988) (nil fontified nil 1982 . 1988) (nil help-echo cider--help-echo 1981 . 1982) (nil fontified nil 1981 . 1982) (nil help-echo cider--help-echo 1976 . 1981) (nil fontified nil 1976 . 1981) (nil help-echo cider--help-echo 1975 . 1976) (nil fontified nil 1975 . 1976) (1975 . 2045)) nil (25839 35990 471812 0) 0 nil])
([nil nil ((#("   " 0 1 (cider-locals nil ws-butler-chg delete fontified t help-echo cider--help-echo) 1 3 (cider-locals nil fontified t help-echo cider--help-echo)) . 1967) (undo-tree-id1584 . -3) (undo-tree-id1585 . -3) (undo-tree-id1586 . -3) (undo-tree-id1587 . -3) (undo-tree-id1588 . -3) (undo-tree-id1589 . -3) (undo-tree-id1590 . -3) (undo-tree-id1591 . -3) (undo-tree-id1592 . -3) (undo-tree-id1593 . -3) (undo-tree-id1594 . -3) (undo-tree-id1595 . -3) (undo-tree-id1596 . -3) (undo-tree-id1597 . -3) (undo-tree-id1598 . -3) (undo-tree-id1599 . -3) (undo-tree-id1600 . -3) (undo-tree-id1601 . -3) (undo-tree-id1602 . -3) (undo-tree-id1603 . -3) (undo-tree-id1604 . -3) (undo-tree-id1605 . -3) (undo-tree-id1606 . -3) (undo-tree-id1607 . -3) (undo-tree-id1608 . -3) (undo-tree-id1609 . -3) (undo-tree-id1610 . -3) (undo-tree-id1611 . -3) (undo-tree-id1612 . -3) (undo-tree-id1613 . -3) (undo-tree-id1614 . -3) (undo-tree-id1615 . -3) (undo-tree-id1616 . -3) (undo-tree-id1617 . -3) (undo-tree-id1618 . -3) (undo-tree-id1619 . -3) (undo-tree-id1620 . -3) (undo-tree-id1621 . -3) (undo-tree-id1622 . -3) (undo-tree-id1623 . -3) (undo-tree-id1624 . -3) (undo-tree-id1625 . -3) (undo-tree-id1626 . -3) (undo-tree-id1627 . -3) (undo-tree-id1628 . -3) (undo-tree-id1629 . -3) (undo-tree-id1630 . -3) (undo-tree-id1631 . -3) (undo-tree-id1632 . -3) (undo-tree-id1633 . -3) (undo-tree-id1634 . -3) (undo-tree-id1635 . -3) (undo-tree-id1636 . -3) (undo-tree-id1637 . -3) (undo-tree-id1638 . -2) (undo-tree-id1639 . -2) (undo-tree-id1640 . -2) (undo-tree-id1641 . -2) (undo-tree-id1642 . -2) (undo-tree-id1643 . -2) (undo-tree-id1644 . -2) (undo-tree-id1645 . -2) (undo-tree-id1646 . -2) (undo-tree-id1647 . -2) (undo-tree-id1648 . -2) (undo-tree-id1649 . -2) (undo-tree-id1650 . -2) (undo-tree-id1651 . -2) (undo-tree-id1652 . -2) (undo-tree-id1653 . -2) (undo-tree-id1654 . -2) (undo-tree-id1655 . -2) (undo-tree-id1656 . -2) (undo-tree-id1657 . -2) (undo-tree-id1658 . -2) (undo-tree-id1659 . -2) (undo-tree-id1660 . -2) (undo-tree-id1661 . -2) (undo-tree-id1662 . -2) (undo-tree-id1663 . -2) (undo-tree-id1664 . -2) (undo-tree-id1665 . -3) (undo-tree-id1666 . -3) (undo-tree-id1667 . -3) (undo-tree-id1668 . -3) (undo-tree-id1669 . -3) (undo-tree-id1670 . -3) (undo-tree-id1671 . -3) (undo-tree-id1672 . -3) (undo-tree-id1673 . -3) (undo-tree-id1674 . -3) (undo-tree-id1675 . -3) (undo-tree-id1676 . -3) (undo-tree-id1677 . -3) (undo-tree-id1678 . -3) (undo-tree-id1679 . -3) (undo-tree-id1680 . -3) (undo-tree-id1681 . -3) (undo-tree-id1682 . -3) (undo-tree-id1683 . -3) (undo-tree-id1684 . -3) (undo-tree-id1685 . -3) (undo-tree-id1686 . -3) (undo-tree-id1687 . -3) (undo-tree-id1688 . -3) (undo-tree-id1689 . -3) (undo-tree-id1690 . -3) (undo-tree-id1691 . -3) (undo-tree-id1692 . -3) (undo-tree-id1693 . -3) (undo-tree-id1694 . -3) (undo-tree-id1695 . -3) (undo-tree-id1696 . -3) (undo-tree-id1697 . -3) (undo-tree-id1698 . -3) (undo-tree-id1699 . -3) (undo-tree-id1700 . -3) (undo-tree-id1701 . -3) (undo-tree-id1702 . -3) (undo-tree-id1703 . -3) (undo-tree-id1704 . -3) (undo-tree-id1705 . -3) (undo-tree-id1706 . -3) (undo-tree-id1707 . -3) (undo-tree-id1708 . -3) (undo-tree-id1709 . -3) (undo-tree-id1710 . -3) (undo-tree-id1711 . -3) (undo-tree-id1712 . -3) (undo-tree-id1713 . -3) (undo-tree-id1714 . -3) (undo-tree-id1715 . -3) (undo-tree-id1716 . -3) (undo-tree-id1717 . -3) (undo-tree-id1718 . -3) (undo-tree-id1719 . -3) (undo-tree-id1720 . -3) (undo-tree-id1721 . -3) (undo-tree-id1722 . -3) (undo-tree-id1723 . -3) (undo-tree-id1724 . -3) (undo-tree-id1725 . -3) (undo-tree-id1726 . -3) (undo-tree-id1727 . -3) (undo-tree-id1728 . -3) (undo-tree-id1729 . -3) (undo-tree-id1730 . -3) (undo-tree-id1731 . -3) (undo-tree-id1732 . -3) (undo-tree-id1733 . -3) (undo-tree-id1734 . -3) (undo-tree-id1735 . -3) (undo-tree-id1736 . -3) (undo-tree-id1737 . -3) (undo-tree-id1738 . -3) (undo-tree-id1739 . -3) (undo-tree-id1740 . -3) (undo-tree-id1741 . -3) (undo-tree-id1742 . -3) (undo-tree-id1743 . -3) (undo-tree-id1744 . -3) (undo-tree-id1745 . -3) (undo-tree-id1746 . -3) (undo-tree-id1747 . -3) (undo-tree-id1748 . -3) (undo-tree-id1749 . -3) (undo-tree-id1750 . -3) (undo-tree-id1751 . -3) (undo-tree-id1752 . -3) (undo-tree-id1753 . -3) (undo-tree-id1754 . -3) (undo-tree-id1755 . -3) (undo-tree-id1756 . -3) (undo-tree-id1757 . -3) (undo-tree-id1758 . -3) (undo-tree-id1759 . -3) (undo-tree-id1760 . -3) (undo-tree-id1761 . -3) (undo-tree-id1762 . -3) (undo-tree-id1763 . -3) (undo-tree-id1764 . -3) (undo-tree-id1765 . -3) (undo-tree-id1766 . -3) (undo-tree-id1767 . -3) (undo-tree-id1768 . -3) (undo-tree-id1769 . -3) (undo-tree-id1770 . -3) (undo-tree-id1771 . -3) (undo-tree-id1772 . -3) (undo-tree-id1773 . -3) (undo-tree-id1774 . -3) (undo-tree-id1775 . -3) (undo-tree-id1776 . -3) (undo-tree-id1777 . -3) (undo-tree-id1778 . -3) (undo-tree-id1779 . -3) (undo-tree-id1780 . -3) (undo-tree-id1781 . -3) (undo-tree-id1782 . -3) (undo-tree-id1783 . -3) (undo-tree-id1784 . -3) (undo-tree-id1785 . -3) (undo-tree-id1786 . -3) (undo-tree-id1787 . -3) (undo-tree-id1788 . -3) (undo-tree-id1789 . -3) (undo-tree-id1790 . -3) (undo-tree-id1791 . -3) (undo-tree-id1792 . -3) (undo-tree-id1793 . -3) 2045) nil (25839 35990 471787 0) 0 nil])
([nil nil ((#("
" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . -2042) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (#("
" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . -2043) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) 2044 (t 25839 35990 517205 955000)) nil (25839 35993 420893 0) 0 nil])
([nil nil ((2042 . 2047)) nil (25839 35993 420874 0) 0 nil])
([nil nil ((#("    " 0 4 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . 2043) (undo-tree-id2009 . -4) (undo-tree-id2010 . -4) (undo-tree-id2011 . -4) (undo-tree-id2012 . -4) (undo-tree-id2013 . -4) (undo-tree-id2014 . -4) (undo-tree-id2015 . -4) (undo-tree-id2016 . -4) (undo-tree-id2017 . -4) (undo-tree-id2018 . -4) 2047) nil (25839 35993 420870 0) 0 nil])
([nil nil ((2043 . 2047) 2047 (t 25839 35993 464590 413000)) nil (25839 36544 202790 0) 0 nil])
([nil nil ((594 . 600) (#(" " 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . 947) (#("  " 0 2 (cider-locals nil help-echo cider--help-echo fontified t)) . 959) (#("  " 0 2 (cider-locals nil help-echo cider--help-echo fontified t)) . 999) (#(" " 0 1 (cider-locals nil help-echo cider--help-echo fontified t)) . 1026) (#("
           " 0 12 (cider-locals nil help-echo cider--help-echo fontified t)) . 1061) (#("    " 0 4 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . 2043) 1438 (1419 . 1419) (1419 . 1420) (#("}" 0 1 (face (rainbow-delimiters-depth-5-face) cider-locals nil help-echo cider--help-echo fontified t)) . -1437) 1387 (t 25839 35993 464590 413000)) nil (25839 36544 202788 0) 0 nil])
([nil nil ((1391 . 1392) (#("}" 0 1 (face (rainbow-delimiters-depth-5-face) cider-locals nil fontified t help-echo cider--help-echo ws-butler-chg chg)) . -1407) 1405) nil (25839 36544 202781 0) 0 nil])
([nil nil ((#("     " 0 5 (cider-locals nil fontified t help-echo cider--help-echo)) . -1397) 1406 (t 25839 36544 247459 289000)) nil (25839 36560 568384 0) 0 nil])
([nil nil ((1404 . 1406) (t 25839 36560 612872 487000)) nil (25839 36569 852264 0) 0 nil])
([nil nil ((1422 . 1422) (1422 . 1423) (#("}" 0 1 (face (rainbow-delimiters-depth-5-face) cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -1405)) nil (25839 36569 852262 0) 0 nil])
([nil nil ((1405 . 1411)) nil (25839 36569 852258 0) 0 nil])
([nil nil ((1392 . 1393) (1377 . 1378) (t 25839 36569 895259 319000)) nil (25839 39537 909933 0) 0 nil])
([nil nil ((1378 . 1383)) nil (25839 39578 770606 0) 0 nil])
([nil nil ((#("list " 0 4 (face font-lock-function-name-face cider-locals nil help-echo cider--help-echo fontified t) 4 5 (cider-locals nil help-echo cider--help-echo fontified t)) . -1378) (undo-tree-id2264 . -2) (undo-tree-id2265 . -2) (undo-tree-id2266 . -2) (undo-tree-id2267 . -2) (undo-tree-id2268 . -2) (undo-tree-id2269 . -2) (undo-tree-id2270 . -2) (undo-tree-id2271 . -2) (undo-tree-id2272 . -2) (undo-tree-id2273 . -2) (undo-tree-id2274 . -2) (undo-tree-id2275 . -2) (undo-tree-id2276 . -2) (undo-tree-id2277 . -2) (undo-tree-id2278 . -2) (undo-tree-id2279 . -2) (undo-tree-id2280 . -2) (undo-tree-id2281 . -2) (undo-tree-id2282 . -4) (undo-tree-id2283 . -4) (undo-tree-id2284 . -4) (undo-tree-id2285 . -4) (undo-tree-id2286 . -4) (undo-tree-id2287 . -4) (undo-tree-id2288 . -4) (undo-tree-id2289 . -4) (undo-tree-id2290 . -5) (undo-tree-id2291 . -5) (undo-tree-id2292 . -5) (undo-tree-id2293 . -5) (undo-tree-id2294 . -5) (undo-tree-id2295 . -5) (undo-tree-id2296 . -5) (undo-tree-id2297 . -5) (undo-tree-id2298 . -5) 1383) nil (25839 39582 453184 0) 0 nil] [nil nil ((1436 . 1437) (1418 . 1419)) ((#("(" 0 1 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo fontified nil)) . 1418) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo fontified t)) . 1436)) (25839 39578 138042 0) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo fontified nil)) . -1377) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-6-face) cider-locals nil help-echo cider--help-echo fontified t)) . -1392) 1378) nil (25839 39582 453150 0) 0 nil])
([nil nil ((1419 . 1424)) ((#("list " 0 4 (face font-lock-function-name-face cider-locals nil help-echo cider--help-echo fontified t) 4 5 (cider-locals nil help-echo cider--help-echo fontified t)) . 1419) (undo-tree-id2039 . -5) (undo-tree-id2040 . -5) (undo-tree-id2041 . -5) (undo-tree-id2042 . -5) (undo-tree-id2043 . -5) (undo-tree-id2044 . -5) (undo-tree-id2045 . -5) (undo-tree-id2046 . -5) (undo-tree-id2047 . -5) (undo-tree-id2048 . -5) (undo-tree-id2049 . -5) (undo-tree-id2050 . -5) (undo-tree-id2051 . -5) (undo-tree-id2052 . -5) (undo-tree-id2053 . -5) (undo-tree-id2054 . -5) (undo-tree-id2055 . -5) (undo-tree-id2056 . -5) (undo-tree-id2057 . -5) (undo-tree-id2058 . -5) (undo-tree-id2059 . -5) (undo-tree-id2060 . -5) (undo-tree-id2061 . -5) (undo-tree-id2062 . -5) (undo-tree-id2063 . -5) (undo-tree-id2064 . -5) (undo-tree-id2065 . -5) (undo-tree-id2066 . -5) (undo-tree-id2067 . -5) (undo-tree-id2068 . -5) (undo-tree-id2069 . -5) (undo-tree-id2070 . -5) (undo-tree-id2071 . -5) (undo-tree-id2072 . -5) (undo-tree-id2073 . -5) (undo-tree-id2074 . -5) (undo-tree-id2075 . -5) (undo-tree-id2076 . -5) (undo-tree-id2077 . -5) (undo-tree-id2078 . -5) (undo-tree-id2079 . -5) (undo-tree-id2080 . -5) (undo-tree-id2081 . -5) (undo-tree-id2082 . -5) (undo-tree-id2083 . -5) (undo-tree-id2084 . -5) (undo-tree-id2085 . -5) (undo-tree-id2086 . -5) (undo-tree-id2087 . -5) (undo-tree-id2088 . -5) (undo-tree-id2089 . -5) (undo-tree-id2090 . -5) (undo-tree-id2091 . -5) (undo-tree-id2092 . -5) (undo-tree-id2093 . -5) (undo-tree-id2094 . -5) (undo-tree-id2095 . -5) (undo-tree-id2096 . -5) (undo-tree-id2097 . -5) (undo-tree-id2098 . -5) (undo-tree-id2099 . -5) (undo-tree-id2100 . -5) (undo-tree-id2101 . -5) (undo-tree-id2102 . -5) (undo-tree-id2103 . -5) (undo-tree-id2104 . -5) (undo-tree-id2105 . -5) (undo-tree-id2106 . -5) (undo-tree-id2107 . -5) (undo-tree-id2108 . -5) (undo-tree-id2109 . -5) (undo-tree-id2110 . -5) (undo-tree-id2111 . -5) (undo-tree-id2112 . -5) (undo-tree-id2113 . -5) (undo-tree-id2114 . -5) (undo-tree-id2115 . -5) (undo-tree-id2116 . -5) (undo-tree-id2117 . -5) (undo-tree-id2118 . -5) (undo-tree-id2119 . -5) (undo-tree-id2120 . -5) (undo-tree-id2121 . -5) (undo-tree-id2122 . -5) (undo-tree-id2123 . -5) (undo-tree-id2124 . -5) (undo-tree-id2125 . -5) (t 25839 39537 956166 560000)) (25839 39537 909925 0) 0 nil])
([nil nil ((1995 . 1996) (1988 . 1989) (t 25839 39582 500250 356000)) nil (25839 39588 597068 0) 0 nil])
nil
([nil nil ((1989 . 1994)) nil (25839 39588 597063 0) 0 nil])
([nil nil ((2363 . 2368) (t 25839 39588 641702 383000)) nil (25839 48779 479755 0) 0 nil])
([nil nil ((2040 . 2045)) nil (25839 48779 479754 0) 0 nil])
([nil nil ((2041 . 2046) (#("    " 0 4 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . 2041) (undo-tree-id2341 . -4) (undo-tree-id2342 . -4) (undo-tree-id2343 . -4) (undo-tree-id2344 . -4) (undo-tree-id2345 . -4) (undo-tree-id2346 . -4) (undo-tree-id2347 . -4) (undo-tree-id2348 . -4) (undo-tree-id2349 . -4) 2045) nil (25839 48779 479752 0) 0 nil])
([nil nil ((2046 . 2048)) nil (25839 48779 479744 0) 0 nil])
([nil nil ((#("G" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -2047) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) 2048) nil (25839 48779 479741 0) 0 nil])
([nil nil ((2047 . 2051)) nil (25839 48779 479732 0) 0 nil])
([nil nil ((2051 . 2054)) nil (25839 48779 479731 0) 0 nil])
([nil nil ((#("P" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -2053) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) 2054) nil (25839 48779 479730 0) 0 nil])
([nil nil ((2053 . 2058)) nil (25839 48779 479721 0) 0 nil])
([nil nil ((#("    " 0 4 (cider-locals nil fontified t ws-butler-chg chg help-echo cider--help-echo)) . 2382) (undo-tree-id2299 . -4) (undo-tree-id2300 . -4) (undo-tree-id2301 . -4) (undo-tree-id2302 . -4) (undo-tree-id2303 . -4) (undo-tree-id2304 . -4) (undo-tree-id2305 . -4) (undo-tree-id2306 . -4) (undo-tree-id2307 . -4) (undo-tree-id2308 . -4) (undo-tree-id2309 . -4) (undo-tree-id2310 . -4) (undo-tree-id2311 . -4) (undo-tree-id2312 . -4) (undo-tree-id2313 . -4) (undo-tree-id2314 . -4) (undo-tree-id2315 . -4) (undo-tree-id2316 . -4) (undo-tree-id2317 . -4) (undo-tree-id2318 . -4) (undo-tree-id2319 . -4) (undo-tree-id2320 . -4) (undo-tree-id2321 . -4) (undo-tree-id2322 . -4) 2058) nil (25839 48779 479716 0) 0 nil])
([nil nil ((2051 . 2052) (t 25839 48779 527447 866000)) nil (25839 48790 222251 0) 0 nil])
([nil nil ((2059 . 2064) (t 25839 48790 269504 569000)) nil (25839 48799 55945 0) 0 nil])
([nil nil ((2064 . 2066)) nil (25839 48799 55944 0) 0 nil])
([nil nil ((2065 . 2071)) nil (25839 48799 55943 0) 0 nil])
([nil nil ((2071 . 2073)) nil (25839 48799 55941 0) 0 nil])
([nil nil ((2072 . 2082)) nil (25839 48799 55937 0) 0 nil])
([nil nil ((2083 . 2089) (t 25839 48799 103085 414000)) nil (25839 48818 271498 0) 0 nil])
([nil nil ((2089 . 2104)) nil (25839 48818 271497 0) 0 nil])
([nil nil ((#("r" 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -2102) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (#("e" 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -2103) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) 2104) nil (25839 48818 271495 0) 0 nil])
([nil nil ((2102 . 2104)) nil (25839 48818 271464 0) 0 nil])
([nil nil ((#("?" 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -2102) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (#("R" 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . -2103) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) 2104) nil (25839 48818 271462 0) 0 nil])
([nil nil ((2102 . 2104)) nil (25839 48818 271432 0) 0 nil])
([nil nil ((2103 . 2110)) nil (25839 48818 271431 0) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -2106) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (#("r" 0 1 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -2107) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (#("m" 0 1 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -2108) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (#(" " 0 1 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -2109) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) 2110) nil (25839 48818 271423 0) 0 nil])
([nil nil ((2106 . 2108)) nil (25839 48818 271291 0) 0 nil])
([nil nil ((2108 . 2114)) nil (25839 48818 271290 0) 0 nil])
([nil nil ((#("b" 0 1 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -2113) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) 2114) nil (25839 48818 271289 0) 0 nil])
([nil nil ((2113 . 2114)) nil (25839 48818 271280 0) 0 nil])
([nil nil ((2114 . 2119)) nil (25839 48818 271279 0) 0 nil])
([nil nil ((#("posts" 0 5 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -2114) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -2) (undo-tree-id2710 . -2) (undo-tree-id2711 . -2) (undo-tree-id2712 . -2) (undo-tree-id2713 . -2) (undo-tree-id2714 . -2) (undo-tree-id2715 . -2) (undo-tree-id2716 . -2) (undo-tree-id2717 . -3) (undo-tree-id2718 . -3) (undo-tree-id2719 . -3) (undo-tree-id2720 . -3) (undo-tree-id2721 . -3) (undo-tree-id2722 . -3) (undo-tree-id2723 . -3) (undo-tree-id2724 . -3) (undo-tree-id2725 . -4) (undo-tree-id2726 . -4) (undo-tree-id2727 . -4) (undo-tree-id2728 . -4) (undo-tree-id2729 . -4) (undo-tree-id2730 . -4) (undo-tree-id2731 . -4) (undo-tree-id2732 . -4) (undo-tree-id2733 . -5) (undo-tree-id2734 . -5) (undo-tree-id2735 . -5) (undo-tree-id2736 . -5) (undo-tree-id2737 . -5) (undo-tree-id2738 . -5) (undo-tree-id2739 . -5) (undo-tree-id2740 . -5) (undo-tree-id2741 . -5) 2119) nil (25839 48818 271277 0) 0 nil])
([nil nil ((#("[" 0 1 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -2113) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) 2114) nil (25839 48818 271238 0) 0 nil])
([nil nil ((2113 . 2126)) nil (25839 48818 271189 0) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -2120) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (#("r" 0 1 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -2121) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (#("m" 0 1 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -2122) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (undo-tree-id2558 . -1) (undo-tree-id2559 . -1) (undo-tree-id2560 . -1) (undo-tree-id2561 . -1) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (#(" " 0 1 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -2123) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (#("a" 0 1 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -2124) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (#(" " 0 1 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -2125) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) 2126) nil (25839 48818 271175 0) 0 nil])
([nil nil ((2120 . 2137)) nil (25839 48818 270914 0) 0 nil])
([nil nil ((2138 . 2144) (t 25839 48818 319650 293000)) nil (25839 48846 684912 0) 0 nil])
([nil nil ((2144 . 2150)) nil (25839 48846 684910 0) 0 nil])
([nil nil ((2149 . 2155) (#(" " 0 1 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . 2149) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) 2150) nil (25839 48846 684908 0) 0 nil])
([nil nil ((2155 . 2157)) nil (25839 48846 684887 0) 0 nil])
([nil nil ((2156 . 2162)) nil (25839 48846 684886 0) 0 nil])
([nil nil ((#("argum" 0 5 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -2157) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -2) (undo-tree-id3034 . -2) (undo-tree-id3035 . -2) (undo-tree-id3036 . -2) (undo-tree-id3037 . -2) (undo-tree-id3038 . -2) (undo-tree-id3039 . -2) (undo-tree-id3040 . -2) (undo-tree-id3041 . -3) (undo-tree-id3042 . -3) (undo-tree-id3043 . -3) (undo-tree-id3044 . -3) (undo-tree-id3045 . -3) (undo-tree-id3046 . -3) (undo-tree-id3047 . -3) (undo-tree-id3048 . -3) (undo-tree-id3049 . -4) (undo-tree-id3050 . -4) (undo-tree-id3051 . -4) (undo-tree-id3052 . -4) (undo-tree-id3053 . -4) (undo-tree-id3054 . -4) (undo-tree-id3055 . -4) (undo-tree-id3056 . -4) (undo-tree-id3057 . -5) (undo-tree-id3058 . -5) (undo-tree-id3059 . -5) (undo-tree-id3060 . -5) (undo-tree-id3061 . -5) (undo-tree-id3062 . -5) (undo-tree-id3063 . -5) (undo-tree-id3064 . -5) (undo-tree-id3065 . -5) 2162) nil (25839 48846 684883 0) 0 nil])
([nil nil ((2157 . 2162)) nil (25839 48846 684843 0) 0 nil])
([nil nil ((2162 . 2163)) nil (25839 48846 684842 0) 0 nil])
([nil nil ((2163 . 2165)) nil (25839 48846 684840 0) 0 nil])
([nil nil ((2164 . 2173)) nil (25839 48846 684839 0) 0 nil])
([nil nil ((#("Str" 0 3 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -2170) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) (undo-tree-id2991 . -2) (undo-tree-id2992 . -2) (undo-tree-id2993 . -2) (undo-tree-id2994 . -2) (undo-tree-id2995 . -2) (undo-tree-id2996 . -2) (undo-tree-id2997 . -2) (undo-tree-id2998 . -2) (undo-tree-id2999 . -3) (undo-tree-id3000 . -3) (undo-tree-id3001 . -3) (undo-tree-id3002 . -3) (undo-tree-id3003 . -3) (undo-tree-id3004 . -3) (undo-tree-id3005 . -3) (undo-tree-id3006 . -3) (undo-tree-id3007 . -3) (undo-tree-id3008 . -3) (undo-tree-id3009 . -3) (undo-tree-id3010 . -3) (undo-tree-id3011 . -3) (undo-tree-id3012 . -3) (undo-tree-id3013 . -3) (undo-tree-id3014 . -3) (undo-tree-id3015 . -3) (undo-tree-id3016 . -3) (undo-tree-id3017 . -3) (undo-tree-id3018 . -3) (undo-tree-id3019 . -3) (undo-tree-id3020 . -3) (undo-tree-id3021 . -3) (undo-tree-id3022 . -3) (undo-tree-id3023 . -3) (undo-tree-id3024 . -3) 2173) nil (25839 48846 684835 0) 0 nil])
([nil nil ((2170 . 2172)) nil (25839 48846 684786 0) 0 nil])
([nil nil ((2171 . 2183)) nil (25839 48846 684782 0) 0 nil])
([nil nil ((2188 . 2193) (t 25839 48846 731290 881000)) nil (25841 19042 316625 0) 0 nil])
([nil nil ((2189 . 2194) (#("    " 0 4 (cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . 2189) (undo-tree-id3147 . -4) 2193) nil (25841 19042 316624 0) 0 nil])
([nil nil ((2189 . 2193)) nil (25841 19042 316621 0) 0 nil])
([nil nil ((2193 . 2202)) nil (25841 19042 316620 0) 0 nil])
([nil nil ((2202 . 2203)) nil (25841 19042 316619 0) 0 nil])
([nil nil ((#("b" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . -2202) (undo-tree-id3146 . -1) 2203) nil (25841 19042 316618 0) 0 nil])
([nil nil ((2202 . 2209)) nil (25841 19042 316616 0) 0 nil])
([nil nil ((#("a" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . -2206) (undo-tree-id3143 . -1) (#("s" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . -2207) (undo-tree-id3144 . -1) (#("t" 0 1 (face clojure-keyword-face cider-locals nil ws-butler-chg chg fontified t help-echo cider--help-echo)) . -2208) (undo-tree-id3145 . -1) 2209) nil (25841 19042 316614 0) 0 nil])
([nil nil ((2206 . 2208)) nil (25841 19042 316610 0) 0 nil])
([nil nil ((2208 . 2213)) nil (25841 19042 316609 0) 0 nil])
([nil nil ((2213 . 2215)) nil (25841 19042 316608 0) 0 nil])
([nil nil ((2214 . 2220)) nil (25841 19042 316607 0) 0 nil])
([nil nil ((2220 . 2222)) nil (25841 19042 316606 0) 0 nil])
([nil nil ((2221 . 2234)) nil (25841 19042 316605 0) 0 nil])
([nil nil ((2235 . 2241)) nil (25841 19042 316604 0) 0 nil])
([nil nil ((2241 . 2254)) nil (25841 19042 316604 0) 0 nil])
([nil nil ((2254 . 2256)) nil (25841 19042 316603 0) 0 nil])
([nil nil ((2255 . 2267)) nil (25841 19042 316602 0) 0 nil])
([nil nil ((#("post " 0 5 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -2262) (undo-tree-id3142 . -5) 2267) nil (25841 19042 316601 0) 0 nil])
([nil nil ((#("a " 0 2 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -2260) (undo-tree-id3141 . -2) 2262) nil (25841 19042 316599 0) 0 nil])
([nil nil ((2260 . 2281)) nil (25841 19042 316597 0) 0 nil])
([nil nil ((2281 . 2283)) nil (25841 19042 316596 0) 0 nil])
([nil nil ((2284 . 2290)) nil (25841 19042 316595 0) 0 nil])
([nil nil ((2290 . 2295)) nil (25841 19042 316594 0) 0 nil])
([nil nil ((2295 . 2301)) nil (25841 19042 316593 0) 0 nil])
([nil nil ((2301 . 2303)) nil (25841 19042 316592 0) 0 nil])
([nil nil ((2302 . 2309)) nil (25841 19042 316591 0) 0 nil])
([nil nil ((2309 . 2311)) nil (25841 19042 316590 0) 0 nil])
([nil nil ((2310 . 2316)) nil (25841 19042 316589 0) 0 nil])
([nil nil ((2316 . 2318)) nil (25841 19042 316589 0) 0 nil])
([nil nil ((2317 . 2325)) nil (25841 19042 316588 0) 0 nil])
([nil nil ((#("k" 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -2323) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (#("k" 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -2324) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) 2325) nil (25841 19042 316585 0) 0 nil])
([nil nil ((2323 . 2329)) nil (25841 19042 316548 0) 0 nil])
([nil nil ((#("board" 0 5 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -2303) (undo-tree-id3084 . -5) (undo-tree-id3085 . -5) (undo-tree-id3086 . -5) (undo-tree-id3087 . -5) (undo-tree-id3088 . -5) (undo-tree-id3089 . -5) (undo-tree-id3090 . -5) (undo-tree-id3091 . -5) (undo-tree-id3092 . -5) (undo-tree-id3093 . -5) (undo-tree-id3094 . -5) (undo-tree-id3095 . -5) (undo-tree-id3096 . -5) (undo-tree-id3097 . -5) 2308) nil (25841 19042 316546 0) 0 nil])
([nil nil ((2303 . 2307)) nil (25841 19042 316517 0) 0 nil])
([nil nil ((#("    " 0 4 (cider-locals nil fontified t ws-butler-chg chg help-echo cider--help-echo)) . 2333) 2307) nil (25841 19042 316513 0) 0 nil])
([nil nil ((3680 . 3683) (t 25841 19042 363784 597000)) nil (25885 49550 35887 0) 0 nil])
([nil nil ((3681 . 3684) (#("  " 0 2 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . 3681) (undo-tree-id1 . -2) 3683) nil (25885 49550 35885 0) 0 nil])
([nil nil ((3682 . 3685) (#("  " 0 2 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . 3682) (undo-tree-id0 . -2) 3684) nil (25885 49550 35882 0) 0 nil])
([nil nil ((3681 . 3683)) nil (25885 49550 35855 0) 0 nil])
([nil nil ((3684 . 3686)) nil (25885 49550 35854 0) 0 nil])
([nil nil ((3686 . 3699)) nil (25885 49550 35852 0) 0 nil])
([nil nil ((#("  " 0 2 (cider-locals nil ws-butler-chg chg help-echo cider--help-echo fontified t)) . 3681) 3699) nil (25885 49550 35847 0) 0 nil])
([nil nil ((3697 . 3700) (t 25885 49550 88121 676000)) nil (25885 49632 651641 0) 0 nil])
([nil nil ((3700 . 3702)) nil (25885 49632 651640 0) 0 nil])
([nil nil ((3701 . 3706)) nil (25885 49632 651639 0) 0 nil])
([nil nil ((#("e" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -3703) (undo-tree-id27 . -1) (#("i" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -3704) (undo-tree-id28 . -1) (#("l" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -3705) (undo-tree-id29 . -1) 3706) nil (25885 49632 651637 0) 0 nil])
([nil nil ((3703 . 3708)) nil (25885 49632 651632 0) 0 nil])
([nil nil ((3708 . 3712)) nil (25885 49632 651631 0) 0 nil])
([nil nil ((3712 . 3714)) nil (25885 49632 651630 0) 0 nil])
([nil nil ((3713 . 3718)) nil (25885 49632 651629 0) 0 nil])
([nil nil ((3718 . 3723)) nil (25885 49632 651628 0) 0 nil])
([nil nil ((3723 . 3725)) nil (25885 49632 651623 0) 0 nil])
([nil nil ((3724 . 3727)) nil (25885 49632 651622 0) 0 nil])
([nil nil ((#("t" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -3725) (undo-tree-id25 . -1) (#("h" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -3726) (undo-tree-id26 . -1) 3727) nil (25885 49632 651621 0) 0 nil])
([nil nil ((3725 . 3730)) nil (25885 49632 651617 0) 0 nil])
([nil nil ((#("Type " 0 4 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t) 4 5 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -3725) (undo-tree-id24 . -5) 3730) nil (25885 49632 651616 0) 0 nil])
([nil nil ((3725 . 3731)) nil (25885 49632 651614 0) 0 nil])
([nil nil ((#(":" 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -3730) (undo-tree-id23 . -1) 3731) nil (25885 49632 651613 0) 0 nil])
([nil nil ((3730 . 3736)) nil (25885 49632 651610 0) 0 nil])
([nil nil ((3736 . 3742)) nil (25885 49632 651609 0) 0 nil])
([nil nil ((3742 . 3743)) nil (25885 49632 651608 0) 0 nil])
([nil nil ((3743 . 3755)) nil (25885 49632 651607 0) 0 nil])
([nil nil ((3755 . 3757)) nil (25885 49632 651606 0) 0 nil])
([nil nil ((3756 . 3767)) nil (25885 49632 651605 0) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -3765) (undo-tree-id21 . -1) (#("u" 0 1 (face font-lock-string-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -3766) (undo-tree-id22 . -1) 3767) nil (25885 49632 651604 0) 0 nil])
([nil nil ((3765 . 3777)) nil (25885 49632 651601 0) 0 nil])
([nil nil ((3777 . 3778)) nil (25885 49632 651600 0) 0 nil])
([nil nil ((3779 . 3785)) nil (25885 49632 651599 0) 0 nil])
([nil nil ((3785 . 3786)) nil (25885 49632 651598 0) 0 nil])
([nil nil ((#(":" 0 1 (cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -3785) (undo-tree-id20 . -1) 3786) nil (25885 49632 651597 0) 0 nil])
([nil nil ((#("t" 0 1 (face clojure-keyword-face cider-locals nil help-echo cider--help-echo ws-butler-chg chg fontified t)) . -3714) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) 3715) nil (25885 49632 651593 0) 0 nil])
([nil nil ((3714 . 3715)) nil (25885 49632 651563 0) 0 nil])
([nil nil ((#("  " 0 2 (cider-locals nil fontified t help-echo cider--help-echo)) . 3789) (undo-tree-id30 . -2) (undo-tree-id31 . -2) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -2) (undo-tree-id80 . -2) (undo-tree-id81 . -2) (undo-tree-id82 . -2) (undo-tree-id83 . -2) (undo-tree-id84 . -2) (undo-tree-id85 . -2) (undo-tree-id86 . -2) (undo-tree-id87 . -2) (undo-tree-id88 . -2) (undo-tree-id89 . -2) (undo-tree-id90 . -2) (undo-tree-id91 . -2) (undo-tree-id92 . -2) (undo-tree-id93 . -2) (undo-tree-id94 . -2) (undo-tree-id95 . -2) (undo-tree-id96 . -2) (undo-tree-id97 . -2) (undo-tree-id98 . -2) (undo-tree-id99 . -2) (undo-tree-id100 . -2) (undo-tree-id101 . -2) (undo-tree-id102 . -2) (undo-tree-id103 . -2) (undo-tree-id104 . -2) (undo-tree-id105 . -2) (undo-tree-id106 . -2) (undo-tree-id107 . -2) (undo-tree-id108 . -2) (undo-tree-id109 . -2) (undo-tree-id110 . -2) (undo-tree-id111 . -2) (undo-tree-id112 . -2) (undo-tree-id113 . -2) (undo-tree-id114 . -2) (undo-tree-id115 . -2) (undo-tree-id116 . -2) (undo-tree-id117 . -2) (undo-tree-id118 . -2) (undo-tree-id119 . -2) (undo-tree-id120 . -2) (undo-tree-id121 . -2) (undo-tree-id122 . -2) (undo-tree-id123 . -2) (undo-tree-id124 . -2) (undo-tree-id125 . -2) (undo-tree-id126 . -2) (undo-tree-id127 . -2) (undo-tree-id128 . -2) (undo-tree-id129 . -2) (undo-tree-id130 . -2) (t 25885 49632 703135 8000)) nil (25885 49635 99676 0) 0 nil])
([nil current ((#("
" 0 1 (cider-locals nil fontified t help-echo cider--help-echo)) . -3788) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) 3789 (t 25885 49635 149795 162000)) nil (25885 49635 969358 0) 0 nil])
nil
