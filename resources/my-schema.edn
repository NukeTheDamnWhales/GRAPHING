{:directive-defs
 {:access
  {:locations #{:field-definition :field :object :schema}
   :args {:role {:type :Access}}}}

 :enums
 {:Access
  {:description "A users access level"
   :values [{:enum-value :guest}
            {:enum-value :regular}
            {:enum-value :admin}]}}

 :unions
 {:NotFoundAcceptableNullUNION
  {:members [:User :NotFoundAcceptableNull]}}

 :objects
 {:NotFoundAcceptableNull
  {:description "Used when we need a wrapped return object with error
will be used with context fields like a token"
   :fields
   {:message {:type String}}}

  :User
  {:description "A user object"
   :fields
   {:id {:type (non-null Int)
         :directives [{:directive-type :access
                       :directive-args {:role :guest}}]}
    :fullName {:type (non-null String)
               :directives [{:directive-type :access
                             :directive-args {:role :regular}}]}
    :userName {:type (non-null String)}
    :password {:type (non-null String)
               :directives [{:directive-type :access
                             :directive-args {:role :admin}}]}
    :accessLevel {:type (non-null :Access)}}}

  :Board
  {:description "different forum boards"
   :fields
   {:id {:type (non-null Int)}
    :title {:type (non-null String)}}}

  :Post
  {:description "A text post by a user"
   :fields
   {:id {:type (non-null Int)}
    :title {:type (non-null String)}
    :body {:type (non-null String)}
    :timeStamp {:type (non-null String)}
    :user {:type (non-null (list :User))}
    :board {:type (non-null (list :Board))}
    :comments {:type (non-null (list :Comment))}}}

  :Comment
  {:description "a comment on a post"
   :fields
   {:id {:type (non-null Int)}
    :body {:type (non-null String)}
    :parent {:type Int}
    :timeStamp {:type (non-null String)}
    :user {:type (non-null (list :User))}
    :post {:type (non-null (list :Post))}}}

  :Query
  {:fields
   {:GetAllBoards
    {:type (list :Board)
     :description "Return all boards"}

    :PostsByBoard
    {:type (list :Post)
     :description "retun all posts from a forum board"
     :args
     {:board {:type (non-null Int)}}}

    :CommentsByPost
    {:type (list :Comment)
     :description "find all comments for a post"
     :args
     {:post {:type (non-null Int)}}}

    :UserByUsername
    {:type :User
     :desciption "Get a user by username"
     :args
     {:username {:type String}}}

    :UserByToken
    {:type :NotFoundAcceptableNullUNION
     :description "Get a user by token"}

    :GetUser
    {:type :User
     :directives [{:directive-type :access
                   :directive-args {:role :guest}}]
     :description "Get a user by name"
     :args
     {:id {:type Int}}}

    :GetPost
    {:type :Post
     :description "Get a post by ID"
     :args
     {:id {:type Int}}}

    :GetComment
    {:type :Comment
     :description "Get a comment by ID"
     :args
     {:id {:type Int}}}

    :User
    {:type :User
     :description "Get a user by token"
     :args {}}}}

  :Mutation
  {:fields
   {:CreatePost
    {:type String
     :description "add a post"
     :args
     {;; :postId {:type (non-null Int)}
      :title {:type (non-null String)}
      :body {:type (non-null String)}
      :board {:type (non-null Int)}}}

    :RefreshToken
    {:type String
     :description "refresh a token"}

    :LogIn
    {:type String
     :description "login and get a token"
     :args
     {:username {:type (non-null String)}
      :password {:type (non-null String)}}}

    :LogOut
    {:type String
     :description "log out"}

    :CreateUser
    {:type String
     :description "Create a new user"
     :args
     {:username {:type (non-null String)}
      :password {:type (non-null String)}}}

    :CreateComment
    {:type String
     :description "Create a new comment automatically gets User from token"
     :args
     {:body {:type (non-null String)}
      :post {:type (non-null Int)}
      :parent {:type Int}}}}}

  :Subscription
  {:fields
   {:LoggedInUsers
    {:type (list String)
     :description "returns logged in users stored in queue"}

    :TheGodlyPickle
    {:type String
     :description "uhh"}}}}}
